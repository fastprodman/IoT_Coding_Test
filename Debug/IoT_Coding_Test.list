
IoT_Coding_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a24  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08001b54  08001b54  00011b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d8c  08001d8c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d8c  08001d8c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d8c  08001d8c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d8c  08001d8c  00011d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d90  08001d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000005c  08001df0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08001df0  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ba1  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000981  00000000  00000000  00021c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  000225f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000180  00000000  00000000  00022820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c27  00000000  00000000  000229a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003040  00000000  00000000  000345c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00058c3a  00000000  00000000  00037607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000114c  00000000  00000000  00090244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00091390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b3c 	.word	0x08001b3c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001b3c 	.word	0x08001b3c

08000170 <isStringAllDigits>:
#include "command_parser.h"

int isStringAllDigits(const char *str) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000178:	e00c      	b.n	8000194 <isStringAllDigits+0x24>
        if (*str < '0' || *str > '9') {
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b2f      	cmp	r3, #47	; 0x2f
 8000180:	d903      	bls.n	800018a <isStringAllDigits+0x1a>
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b39      	cmp	r3, #57	; 0x39
 8000188:	d901      	bls.n	800018e <isStringAllDigits+0x1e>
            return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e007      	b.n	800019e <isStringAllDigits+0x2e>
        }
        str++;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3301      	adds	r3, #1
 8000192:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d1ee      	bne.n	800017a <isStringAllDigits+0xa>
    }
    return 0;
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <call_echo>:

uint8_t call_echo(char *str, uint16_t len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	460b      	mov	r3, r1
 80001b2:	807b      	strh	r3, [r7, #2]

	char *arr;
	uint8_t chr_count;

	arr = strtok(str, " ");
 80001b4:	491d      	ldr	r1, [pc, #116]	; (800022c <call_echo+0x84>)
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	f000 fdc2 	bl	8000d40 <strtok>
 80001bc:	60f8      	str	r0, [r7, #12]
	arr = strtok(NULL, ",");
 80001be:	491c      	ldr	r1, [pc, #112]	; (8000230 <call_echo+0x88>)
 80001c0:	2000      	movs	r0, #0
 80001c2:	f000 fdbd 	bl	8000d40 <strtok>
 80001c6:	60f8      	str	r0, [r7, #12]

	if(isStringAllDigits(arr)){
 80001c8:	68f8      	ldr	r0, [r7, #12]
 80001ca:	f7ff ffd1 	bl	8000170 <isStringAllDigits>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <call_echo+0x30>
		return 1;
 80001d4:	2301      	movs	r3, #1
 80001d6:	e025      	b.n	8000224 <call_echo+0x7c>
	}

	chr_count = atoi(arr);
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	f000 fc04 	bl	80009e6 <atoi>
 80001de:	4603      	mov	r3, r0
 80001e0:	72fb      	strb	r3, [r7, #11]

	if(chr_count < 0 || chr_count >= 300){
		return 1;
	}

	if(len < 0 || len >= 310){
 80001e2:	887b      	ldrh	r3, [r7, #2]
 80001e4:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80001e8:	d301      	bcc.n	80001ee <call_echo+0x46>
		return 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	e01a      	b.n	8000224 <call_echo+0x7c>
	}

	arr = strtok(NULL, "\r");
 80001ee:	4911      	ldr	r1, [pc, #68]	; (8000234 <call_echo+0x8c>)
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fda5 	bl	8000d40 <strtok>
 80001f6:	60f8      	str	r0, [r7, #12]

	write_str("data: ", 6);
 80001f8:	2106      	movs	r1, #6
 80001fa:	480f      	ldr	r0, [pc, #60]	; (8000238 <call_echo+0x90>)
 80001fc:	f000 fbaa 	bl	8000954 <write_str>
	if(chr_count != 0&&len != 0){
 8000200:	7afb      	ldrb	r3, [r7, #11]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d009      	beq.n	800021a <call_echo+0x72>
 8000206:	887b      	ldrh	r3, [r7, #2]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d006      	beq.n	800021a <call_echo+0x72>
		write_str(arr, len-9);
 800020c:	887b      	ldrh	r3, [r7, #2]
 800020e:	3b09      	subs	r3, #9
 8000210:	b29b      	uxth	r3, r3
 8000212:	4619      	mov	r1, r3
 8000214:	68f8      	ldr	r0, [r7, #12]
 8000216:	f000 fb9d 	bl	8000954 <write_str>
	}
	write_str("\r\n", 2);
 800021a:	2102      	movs	r1, #2
 800021c:	4807      	ldr	r0, [pc, #28]	; (800023c <call_echo+0x94>)
 800021e:	f000 fb99 	bl	8000954 <write_str>

	return 0;
 8000222:	2300      	movs	r3, #0
}
 8000224:	4618      	mov	r0, r3
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	08001b54 	.word	0x08001b54
 8000230:	08001b58 	.word	0x08001b58
 8000234:	08001b5c 	.word	0x08001b5c
 8000238:	08001b60 	.word	0x08001b60
 800023c:	08001b68 	.word	0x08001b68

08000240 <call_set_led>:

uint8_t call_set_led(char *str){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

	char *arr;
	uint8_t led_id;
	uint16_t time_ms;

	arr = strtok(str, " ");
 8000248:	4922      	ldr	r1, [pc, #136]	; (80002d4 <call_set_led+0x94>)
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f000 fd78 	bl	8000d40 <strtok>
 8000250:	60f8      	str	r0, [r7, #12]
	arr = strtok(NULL, ",");
 8000252:	4921      	ldr	r1, [pc, #132]	; (80002d8 <call_set_led+0x98>)
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fd73 	bl	8000d40 <strtok>
 800025a:	60f8      	str	r0, [r7, #12]

	if(isStringAllDigits(arr)){
 800025c:	68f8      	ldr	r0, [r7, #12]
 800025e:	f7ff ff87 	bl	8000170 <isStringAllDigits>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <call_set_led+0x2c>
		return 1;
 8000268:	2301      	movs	r3, #1
 800026a:	e02f      	b.n	80002cc <call_set_led+0x8c>
	}

	led_id = atoi(arr);
 800026c:	68f8      	ldr	r0, [r7, #12]
 800026e:	f000 fbba 	bl	80009e6 <atoi>
 8000272:	4603      	mov	r3, r0
 8000274:	72fb      	strb	r3, [r7, #11]

	if(led_id != 0 && led_id != 1){
 8000276:	7afb      	ldrb	r3, [r7, #11]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d004      	beq.n	8000286 <call_set_led+0x46>
 800027c:	7afb      	ldrb	r3, [r7, #11]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d001      	beq.n	8000286 <call_set_led+0x46>
		return 1;
 8000282:	2301      	movs	r3, #1
 8000284:	e022      	b.n	80002cc <call_set_led+0x8c>
	}

	arr = strtok(NULL, "\r");
 8000286:	4915      	ldr	r1, [pc, #84]	; (80002dc <call_set_led+0x9c>)
 8000288:	2000      	movs	r0, #0
 800028a:	f000 fd59 	bl	8000d40 <strtok>
 800028e:	60f8      	str	r0, [r7, #12]

	if(isStringAllDigits(arr)){
 8000290:	68f8      	ldr	r0, [r7, #12]
 8000292:	f7ff ff6d 	bl	8000170 <isStringAllDigits>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <call_set_led+0x60>
		return 1;
 800029c:	2301      	movs	r3, #1
 800029e:	e015      	b.n	80002cc <call_set_led+0x8c>
	}

	time_ms = atoi(arr);
 80002a0:	68f8      	ldr	r0, [r7, #12]
 80002a2:	f000 fba0 	bl	80009e6 <atoi>
 80002a6:	4603      	mov	r3, r0
 80002a8:	813b      	strh	r3, [r7, #8]

	if(time_ms < 1 || time_ms >= 5000){
 80002aa:	893b      	ldrh	r3, [r7, #8]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d004      	beq.n	80002ba <call_set_led+0x7a>
 80002b0:	893b      	ldrh	r3, [r7, #8]
 80002b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d901      	bls.n	80002be <call_set_led+0x7e>
		return 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	e006      	b.n	80002cc <call_set_led+0x8c>
	}

	led_on(led_id, time_ms);
 80002be:	893a      	ldrh	r2, [r7, #8]
 80002c0:	7afb      	ldrb	r3, [r7, #11]
 80002c2:	4611      	mov	r1, r2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f8ab 	bl	8000420 <led_on>

	return 0;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	08001b54 	.word	0x08001b54
 80002d8:	08001b58 	.word	0x08001b58
 80002dc:	08001b5c 	.word	0x08001b5c

080002e0 <write_error>:

void write_error(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	write_str("ERROR\r\n", 7);
 80002e4:	2107      	movs	r1, #7
 80002e6:	4802      	ldr	r0, [pc, #8]	; (80002f0 <write_error+0x10>)
 80002e8:	f000 fb34 	bl	8000954 <write_str>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	08001b6c 	.word	0x08001b6c

080002f4 <write_ok>:

void write_ok(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	write_str("OK\r\n", 4);
 80002f8:	2104      	movs	r1, #4
 80002fa:	4802      	ldr	r0, [pc, #8]	; (8000304 <write_ok+0x10>)
 80002fc:	f000 fb2a 	bl	8000954 <write_str>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	08001b74 	.word	0x08001b74

08000308 <parse_string>:

void parse_string(char *str, uint16_t len){
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	807b      	strh	r3, [r7, #2]
	if(!strncmp(str, "echo", 4)){
 8000314:	2204      	movs	r2, #4
 8000316:	4917      	ldr	r1, [pc, #92]	; (8000374 <parse_string+0x6c>)
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 fcfe 	bl	8000d1a <strncmp>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10d      	bne.n	8000340 <parse_string+0x38>
		if(call_echo(str, len)){
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	4619      	mov	r1, r3
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ff3d 	bl	80001a8 <call_echo>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <parse_string+0x32>
			write_error();
 8000334:	f7ff ffd4 	bl	80002e0 <write_error>
		}else{
			write_ok();
		}
		return;
 8000338:	e018      	b.n	800036c <parse_string+0x64>
			write_ok();
 800033a:	f7ff ffdb 	bl	80002f4 <write_ok>
		return;
 800033e:	e015      	b.n	800036c <parse_string+0x64>
	}

	if(!strncmp(str, "set-led", 7)){
 8000340:	2207      	movs	r2, #7
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <parse_string+0x70>)
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f000 fce8 	bl	8000d1a <strncmp>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d10b      	bne.n	8000368 <parse_string+0x60>
		if(call_set_led(str)){
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff75 	bl	8000240 <call_set_led>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d002      	beq.n	8000362 <parse_string+0x5a>
			write_error();
 800035c:	f7ff ffc0 	bl	80002e0 <write_error>
		}else{
			write_ok();
		}
		return;
 8000360:	e004      	b.n	800036c <parse_string+0x64>
			write_ok();
 8000362:	f7ff ffc7 	bl	80002f4 <write_ok>
		return;
 8000366:	e001      	b.n	800036c <parse_string+0x64>
	}

	write_error();
 8000368:	f7ff ffba 	bl	80002e0 <write_error>
}
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	08001b7c 	.word	0x08001b7c
 8000378:	08001b84 	.word	0x08001b84

0800037c <led_init>:
#include "led.h"

void led_init(void){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <led_init+0x48>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <led_init+0x48>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]

	GPIOA->CRH &=~ (3U << ((LED_PIN0-8)*4+2));
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <led_init+0x4c>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <led_init+0x4c>)
 8000392:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000396:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (2U << ((LED_PIN0-8)*4));
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <led_init+0x4c>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <led_init+0x4c>)
 800039e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003a2:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=~ (3U << ((LED_PIN1-8)*4+2));
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <led_init+0x4c>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <led_init+0x4c>)
 80003aa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80003ae:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (2U << ((LED_PIN1-8)*4));
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <led_init+0x4c>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <led_init+0x4c>)
 80003b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ba:	6053      	str	r3, [r2, #4]
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800

080003cc <led_off>:

void led_off(uint8_t led_id){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	if (led_id == 0){
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d109      	bne.n	80003f0 <led_off+0x24>
		GPIOA->ODR &=~ (0x1UL << LED_PIN0);
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <led_off+0x48>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <led_off+0x48>)
 80003e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003e6:	60d3      	str	r3, [r2, #12]
		write_str("led_off: 0\r\n", 12);
 80003e8:	210c      	movs	r1, #12
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <led_off+0x4c>)
 80003ec:	f000 fab2 	bl	8000954 <write_str>
	}

	if (led_id == 1){
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d109      	bne.n	800040a <led_off+0x3e>
		GPIOA->ODR &=~ (0x1UL << LED_PIN1);
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <led_off+0x48>)
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <led_off+0x48>)
 80003fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000400:	60d3      	str	r3, [r2, #12]
		write_str("led_off: 1\r\n", 12);
 8000402:	210c      	movs	r1, #12
 8000404:	4805      	ldr	r0, [pc, #20]	; (800041c <led_off+0x50>)
 8000406:	f000 faa5 	bl	8000954 <write_str>
	}
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010800 	.word	0x40010800
 8000418:	08001b8c 	.word	0x08001b8c
 800041c:	08001b9c 	.word	0x08001b9c

08000420 <led_on>:

void led_on(uint8_t led_id, uint16_t time_ms){
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	460a      	mov	r2, r1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	4613      	mov	r3, r2
 800042e:	80bb      	strh	r3, [r7, #4]

	if (led_id == 0){
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d109      	bne.n	800044a <led_on+0x2a>
		GPIOA->ODR |= (0x1UL << LED_PIN0);
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <led_on+0x4c>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	4a0c      	ldr	r2, [pc, #48]	; (800046c <led_on+0x4c>)
 800043c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000440:	60d3      	str	r3, [r2, #12]
		tim2_start(time_ms);
 8000442:	88bb      	ldrh	r3, [r7, #4]
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f961 	bl	800070c <tim2_start>
	}

	if (led_id == 1){
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d109      	bne.n	8000464 <led_on+0x44>
		GPIOA->ODR |= (0x1UL << LED_PIN1);
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <led_on+0x4c>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	4a05      	ldr	r2, [pc, #20]	; (800046c <led_on+0x4c>)
 8000456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045a:	60d3      	str	r3, [r2, #12]
		tim3_start(time_ms);
 800045c:	88bb      	ldrh	r3, [r7, #4]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f9aa 	bl	80007b8 <tim3_start>
	}
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010800 	.word	0x40010800

08000470 <main>:
uint16_t arr_last = 0;
uint8_t parse_str_flag = 0;



int main(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	uart2_rxtx_interrupt_init();
 8000474:	f000 fa2a 	bl	80008cc <uart2_rxtx_interrupt_init>
	led_init();
 8000478:	f7ff ff80 	bl	800037c <led_init>

	while(1){
		if(parse_str_flag != 0){
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <main+0x30>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0fb      	beq.n	800047c <main+0xc>
			parse_string(arr_rx, arr_last);
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <main+0x34>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	4807      	ldr	r0, [pc, #28]	; (80004a8 <main+0x38>)
 800048c:	f7ff ff3c 	bl	8000308 <parse_string>
			arr_last = 0;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <main+0x34>)
 8000492:	2200      	movs	r2, #0
 8000494:	801a      	strh	r2, [r3, #0]
			parse_str_flag = 0;
 8000496:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <main+0x30>)
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
		if(parse_str_flag != 0){
 800049c:	e7ee      	b.n	800047c <main+0xc>
 800049e:	bf00      	nop
 80004a0:	200001b4 	.word	0x200001b4
 80004a4:	200001b2 	.word	0x200001b2
 80004a8:	2000007c 	.word	0x2000007c

080004ac <TIM2_IRQHandler>:
		}
	}
}


void TIM2_IRQHandler(void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	TIM2->SR &=~ TIM_SR_UIF;
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b4:	691b      	ldr	r3, [r3, #16]
 80004b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	6113      	str	r3, [r2, #16]
	led_off(0);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff ff83 	bl	80003cc <led_off>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	TIM3->SR &=~ TIM_SR_UIF;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <TIM3_IRQHandler+0x1c>)
 80004d2:	691b      	ldr	r3, [r3, #16]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <TIM3_IRQHandler+0x1c>)
 80004d6:	f023 0301 	bic.w	r3, r3, #1
 80004da:	6113      	str	r3, [r2, #16]
	led_off(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff ff75 	bl	80003cc <led_off>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40000400 	.word	0x40000400

080004ec <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	if(USART2->SR & USART_SR_RXNE){
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <USART2_IRQHandler+0x54>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d01d      	beq.n	8000538 <USART2_IRQHandler+0x4c>
		key = USART2->DR;
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <USART2_IRQHandler+0x54>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <USART2_IRQHandler+0x58>)
 8000504:	701a      	strb	r2, [r3, #0]
		arr_rx[arr_last] = key;
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <USART2_IRQHandler+0x5c>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	461a      	mov	r2, r3
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <USART2_IRQHandler+0x58>)
 800050e:	7819      	ldrb	r1, [r3, #0]
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <USART2_IRQHandler+0x60>)
 8000512:	5499      	strb	r1, [r3, r2]
		arr_last++;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <USART2_IRQHandler+0x5c>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <USART2_IRQHandler+0x5c>)
 800051e:	801a      	strh	r2, [r3, #0]
		if(key=='\r'||arr_last==310){
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <USART2_IRQHandler+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b0d      	cmp	r3, #13
 8000526:	d004      	beq.n	8000532 <USART2_IRQHandler+0x46>
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <USART2_IRQHandler+0x5c>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000530:	d102      	bne.n	8000538 <USART2_IRQHandler+0x4c>
			parse_str_flag = 1;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <USART2_IRQHandler+0x64>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40004400 	.word	0x40004400
 8000544:	20000078 	.word	0x20000078
 8000548:	200001b2 	.word	0x200001b2
 800054c:	2000007c 	.word	0x2000007c
 8000550:	200001b4 	.word	0x200001b4

08000554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return 1;
 8000558:	2301      	movs	r3, #1
}
 800055a:	4618      	mov	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <_kill>:

int _kill(int pid, int sig)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800056c:	f000 fc8a 	bl	8000e84 <__errno>
 8000570:	4603      	mov	r3, r0
 8000572:	2216      	movs	r2, #22
 8000574:	601a      	str	r2, [r3, #0]
  return -1;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_exit>:

void _exit (int status)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800058a:	f04f 31ff 	mov.w	r1, #4294967295
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff ffe7 	bl	8000562 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000594:	e7fe      	b.n	8000594 <_exit+0x12>

08000596 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	e00a      	b.n	80005be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005a8:	f3af 8000 	nop.w
 80005ac:	4601      	mov	r1, r0
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	60ba      	str	r2, [r7, #8]
 80005b4:	b2ca      	uxtb	r2, r1
 80005b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbf0      	blt.n	80005a8 <_read+0x12>
  }

  return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e009      	b.n	80005f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	60ba      	str	r2, [r7, #8]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3301      	adds	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dbf1      	blt.n	80005e2 <_write+0x12>
  }
  return len;
 80005fe:	687b      	ldr	r3, [r7, #4]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <_close>:

int _close(int file)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800062e:	605a      	str	r2, [r3, #4]
  return 0;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <_isatty>:

int _isatty(int file)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000644:	2301      	movs	r3, #1
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <_sbrk+0x5c>)
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <_sbrk+0x60>)
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <_sbrk+0x64>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <_sbrk+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <_sbrk+0x64>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	429a      	cmp	r2, r3
 8000696:	d207      	bcs.n	80006a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000698:	f000 fbf4 	bl	8000e84 <__errno>
 800069c:	4603      	mov	r3, r0
 800069e:	220c      	movs	r2, #12
 80006a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	e009      	b.n	80006bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <_sbrk+0x64>)
 80006b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ba:	68fb      	ldr	r3, [r7, #12]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20005000 	.word	0x20005000
 80006c8:	00000400 	.word	0x00000400
 80006cc:	200001b8 	.word	0x200001b8
 80006d0:	20000308 	.word	0x20000308

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4906      	ldr	r1, [pc, #24]	; (8000708 <__NVIC_EnableIRQ+0x34>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100

0800070c <tim2_start>:
#include "uart.h"

void tim2_start(uint16_t time_ms){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <tim2_start+0xa8>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <tim2_start+0xa8>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	61d3      	str	r3, [r2, #28]
	TIM2->ARR = (time_ms * 10) - 1;
 8000722:	88fa      	ldrh	r2, [r7, #6]
 8000724:	4613      	mov	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 800 - 1;
 8000734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000738:	f240 321f 	movw	r2, #799	; 0x31f
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->CNT = 0;
 800073e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->DIER &=~ TIM_DIER_UIE;
 8000746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_OPM;
 8000756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= TIM_EGR_UG;
 8000766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6153      	str	r3, [r2, #20]
	TIM2->SR &=~ TIM_SR_UIF;
 8000776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6013      	str	r3, [r2, #0]
	TIM2->DIER |= TIM_DIER_UIE;
 8000796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80007a6:	201c      	movs	r0, #28
 80007a8:	f7ff ff94 	bl	80006d4 <__NVIC_EnableIRQ>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <tim3_start>:

void tim3_start(uint16_t time_ms){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <tim3_start+0x8c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <tim3_start+0x8c>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	61d3      	str	r3, [r2, #28]
	TIM3->ARR = (time_ms * 10) - 1;
 80007ce:	88fa      	ldrh	r2, [r7, #6]
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <tim3_start+0x90>)
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 800 - 1;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <tim3_start+0x90>)
 80007e0:	f240 321f 	movw	r2, #799	; 0x31f
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CNT = 0;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <tim3_start+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->DIER &=~ TIM_DIER_UIE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <tim3_start+0x90>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4a15      	ldr	r2, [pc, #84]	; (8000848 <tim3_start+0x90>)
 80007f2:	f023 0301 	bic.w	r3, r3, #1
 80007f6:	60d3      	str	r3, [r2, #12]
	TIM3->CR1 |= TIM_CR1_OPM;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <tim3_start+0x90>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a12      	ldr	r2, [pc, #72]	; (8000848 <tim3_start+0x90>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	6013      	str	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <tim3_start+0x90>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <tim3_start+0x90>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6153      	str	r3, [r2, #20]
	TIM3->SR &=~ TIM_SR_UIF;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <tim3_start+0x90>)
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <tim3_start+0x90>)
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= TIM_CR1_CEN;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <tim3_start+0x90>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a09      	ldr	r2, [pc, #36]	; (8000848 <tim3_start+0x90>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= TIM_DIER_UIE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <tim3_start+0x90>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <tim3_start+0x90>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 8000834:	201d      	movs	r0, #29
 8000836:	f7ff ff4d 	bl	80006d4 <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	40000400 	.word	0x40000400

0800084c <__NVIC_EnableIRQ>:
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db0b      	blt.n	8000876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f003 021f 	and.w	r2, r3, #31
 8000864:	4906      	ldr	r1, [pc, #24]	; (8000880 <__NVIC_EnableIRQ+0x34>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	095b      	lsrs	r3, r3, #5
 800086c:	2001      	movs	r0, #1
 800086e:	fa00 f202 	lsl.w	r2, r0, r2
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100

08000884 <compute_uart_div>:
#include "uart.h"


static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BoudRate){
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BoudRate/2U))/BoudRate);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	085a      	lsrs	r2, r3, #1
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	441a      	add	r2, r3
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	fbb2 f3f3 	udiv	r3, r2, r3
 800089c:	b29b      	uxth	r3, r3
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BoudRate){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BoudRate);
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f7ff ffe4 	bl	8000884 <compute_uart_div>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	609a      	str	r2, [r3, #8]
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <uart2_rxtx_interrupt_init>:
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);

	USART2->CR1 = USART_CR1_TE | USART_CR1_UE | USART_CR1_RE;
}

void uart2_rxtx_interrupt_init(void){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <uart2_rxtx_interrupt_init+0x4c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a10      	ldr	r2, [pc, #64]	; (8000918 <uart2_rxtx_interrupt_init+0x4c>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]

	GPIOA->CRL = (GPIOA->CRL |(1U<<9)|(1U<<8)|(1U<<11))&~(1U<<10);
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <uart2_rxtx_interrupt_init+0x50>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <uart2_rxtx_interrupt_init+0x50>)
 80008e6:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 80008ea:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <uart2_rxtx_interrupt_init+0x4c>)
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	4a09      	ldr	r2, [pc, #36]	; (8000918 <uart2_rxtx_interrupt_init+0x4c>)
 80008f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f6:	61d3      	str	r3, [r2, #28]

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80008f8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80008fc:	4908      	ldr	r1, [pc, #32]	; (8000920 <uart2_rxtx_interrupt_init+0x54>)
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <uart2_rxtx_interrupt_init+0x58>)
 8000900:	f7ff ffd2 	bl	80008a8 <uart_set_baudrate>

	NVIC_EnableIRQ(USART2_IRQn);
 8000904:	2026      	movs	r0, #38	; 0x26
 8000906:	f7ff ffa1 	bl	800084c <__NVIC_EnableIRQ>

	USART2->CR1 = USART_CR1_RXNEIE | USART_CR1_TE | USART_CR1_UE | USART_CR1_RE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <uart2_rxtx_interrupt_init+0x58>)
 800090c:	f242 022c 	movw	r2, #8236	; 0x202c
 8000910:	60da      	str	r2, [r3, #12]
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	007a1200 	.word	0x007a1200
 8000924:	40004400 	.word	0x40004400

08000928 <uart_write>:

void uart_write(USART_TypeDef *UARTx, int ch){
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	while (!(UARTx->SR & USART_SR_TXE));
 8000932:	bf00      	nop
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0f9      	beq.n	8000934 <uart_write+0xc>
	UARTx->DR = (ch & 0xFF);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	605a      	str	r2, [r3, #4]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
	...

08000954 <write_str>:
char uart_read(USART_TypeDef *UARTx){
	while(!(UARTx->SR & USART_SR_RXNE));
	return UARTx->DR;
}

void write_str(char* ch_arr, uint16_t size){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < (size); i++){
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e00a      	b.n	800097c <write_str+0x28>
		uart_write(USART2, ch_arr[i]);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <write_str+0x3c>)
 8000972:	f7ff ffd9 	bl	8000928 <uart_write>
	for (int i = 0; i < (size); i++){
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <write_str+0x12>
	}
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000998:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c2:	f000 fa65 	bl	8000e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fd53 	bl	8000470 <main>

080009ca <LoopForever>:

LoopForever:
  b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009d8:	08001d94 	.word	0x08001d94
  ldr r2, =_sbss
 80009dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009e0:	20000308 	.word	0x20000308

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>

080009e6 <atoi>:
 80009e6:	220a      	movs	r2, #10
 80009e8:	2100      	movs	r1, #0
 80009ea:	f000 b87f 	b.w	8000aec <strtol>
	...

080009f0 <_strtol_l.constprop.0>:
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f6:	4686      	mov	lr, r0
 80009f8:	4690      	mov	r8, r2
 80009fa:	d001      	beq.n	8000a00 <_strtol_l.constprop.0+0x10>
 80009fc:	2b24      	cmp	r3, #36	; 0x24
 80009fe:	d906      	bls.n	8000a0e <_strtol_l.constprop.0+0x1e>
 8000a00:	f000 fa40 	bl	8000e84 <__errno>
 8000a04:	2316      	movs	r3, #22
 8000a06:	6003      	str	r3, [r0, #0]
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0e:	460d      	mov	r5, r1
 8000a10:	4835      	ldr	r0, [pc, #212]	; (8000ae8 <_strtol_l.constprop.0+0xf8>)
 8000a12:	462a      	mov	r2, r5
 8000a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000a18:	5d06      	ldrb	r6, [r0, r4]
 8000a1a:	f016 0608 	ands.w	r6, r6, #8
 8000a1e:	d1f8      	bne.n	8000a12 <_strtol_l.constprop.0+0x22>
 8000a20:	2c2d      	cmp	r4, #45	; 0x2d
 8000a22:	d12e      	bne.n	8000a82 <_strtol_l.constprop.0+0x92>
 8000a24:	2601      	movs	r6, #1
 8000a26:	782c      	ldrb	r4, [r5, #0]
 8000a28:	1c95      	adds	r5, r2, #2
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d057      	beq.n	8000ade <_strtol_l.constprop.0+0xee>
 8000a2e:	2b10      	cmp	r3, #16
 8000a30:	d109      	bne.n	8000a46 <_strtol_l.constprop.0+0x56>
 8000a32:	2c30      	cmp	r4, #48	; 0x30
 8000a34:	d107      	bne.n	8000a46 <_strtol_l.constprop.0+0x56>
 8000a36:	782a      	ldrb	r2, [r5, #0]
 8000a38:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8000a3c:	2a58      	cmp	r2, #88	; 0x58
 8000a3e:	d149      	bne.n	8000ad4 <_strtol_l.constprop.0+0xe4>
 8000a40:	2310      	movs	r3, #16
 8000a42:	786c      	ldrb	r4, [r5, #1]
 8000a44:	3502      	adds	r5, #2
 8000a46:	2200      	movs	r2, #0
 8000a48:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8000a4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000a50:	fbbc f9f3 	udiv	r9, ip, r3
 8000a54:	4610      	mov	r0, r2
 8000a56:	fb03 ca19 	mls	sl, r3, r9, ip
 8000a5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8000a5e:	2f09      	cmp	r7, #9
 8000a60:	d814      	bhi.n	8000a8c <_strtol_l.constprop.0+0x9c>
 8000a62:	463c      	mov	r4, r7
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	dd20      	ble.n	8000aaa <_strtol_l.constprop.0+0xba>
 8000a68:	1c57      	adds	r7, r2, #1
 8000a6a:	d007      	beq.n	8000a7c <_strtol_l.constprop.0+0x8c>
 8000a6c:	4581      	cmp	r9, r0
 8000a6e:	d319      	bcc.n	8000aa4 <_strtol_l.constprop.0+0xb4>
 8000a70:	d101      	bne.n	8000a76 <_strtol_l.constprop.0+0x86>
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	db16      	blt.n	8000aa4 <_strtol_l.constprop.0+0xb4>
 8000a76:	2201      	movs	r2, #1
 8000a78:	fb00 4003 	mla	r0, r0, r3, r4
 8000a7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000a80:	e7eb      	b.n	8000a5a <_strtol_l.constprop.0+0x6a>
 8000a82:	2c2b      	cmp	r4, #43	; 0x2b
 8000a84:	bf04      	itt	eq
 8000a86:	782c      	ldrbeq	r4, [r5, #0]
 8000a88:	1c95      	addeq	r5, r2, #2
 8000a8a:	e7ce      	b.n	8000a2a <_strtol_l.constprop.0+0x3a>
 8000a8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8000a90:	2f19      	cmp	r7, #25
 8000a92:	d801      	bhi.n	8000a98 <_strtol_l.constprop.0+0xa8>
 8000a94:	3c37      	subs	r4, #55	; 0x37
 8000a96:	e7e5      	b.n	8000a64 <_strtol_l.constprop.0+0x74>
 8000a98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8000a9c:	2f19      	cmp	r7, #25
 8000a9e:	d804      	bhi.n	8000aaa <_strtol_l.constprop.0+0xba>
 8000aa0:	3c57      	subs	r4, #87	; 0x57
 8000aa2:	e7df      	b.n	8000a64 <_strtol_l.constprop.0+0x74>
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	e7e8      	b.n	8000a7c <_strtol_l.constprop.0+0x8c>
 8000aaa:	1c53      	adds	r3, r2, #1
 8000aac:	d108      	bne.n	8000ac0 <_strtol_l.constprop.0+0xd0>
 8000aae:	2322      	movs	r3, #34	; 0x22
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	f8ce 3000 	str.w	r3, [lr]
 8000ab6:	f1b8 0f00 	cmp.w	r8, #0
 8000aba:	d0a6      	beq.n	8000a0a <_strtol_l.constprop.0+0x1a>
 8000abc:	1e69      	subs	r1, r5, #1
 8000abe:	e006      	b.n	8000ace <_strtol_l.constprop.0+0xde>
 8000ac0:	b106      	cbz	r6, 8000ac4 <_strtol_l.constprop.0+0xd4>
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	f1b8 0f00 	cmp.w	r8, #0
 8000ac8:	d09f      	beq.n	8000a0a <_strtol_l.constprop.0+0x1a>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d1f6      	bne.n	8000abc <_strtol_l.constprop.0+0xcc>
 8000ace:	f8c8 1000 	str.w	r1, [r8]
 8000ad2:	e79a      	b.n	8000a0a <_strtol_l.constprop.0+0x1a>
 8000ad4:	2430      	movs	r4, #48	; 0x30
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1b5      	bne.n	8000a46 <_strtol_l.constprop.0+0x56>
 8000ada:	2308      	movs	r3, #8
 8000adc:	e7b3      	b.n	8000a46 <_strtol_l.constprop.0+0x56>
 8000ade:	2c30      	cmp	r4, #48	; 0x30
 8000ae0:	d0a9      	beq.n	8000a36 <_strtol_l.constprop.0+0x46>
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	e7af      	b.n	8000a46 <_strtol_l.constprop.0+0x56>
 8000ae6:	bf00      	nop
 8000ae8:	08001baa 	.word	0x08001baa

08000aec <strtol>:
 8000aec:	4613      	mov	r3, r2
 8000aee:	460a      	mov	r2, r1
 8000af0:	4601      	mov	r1, r0
 8000af2:	4802      	ldr	r0, [pc, #8]	; (8000afc <strtol+0x10>)
 8000af4:	6800      	ldr	r0, [r0, #0]
 8000af6:	f7ff bf7b 	b.w	80009f0 <_strtol_l.constprop.0>
 8000afa:	bf00      	nop
 8000afc:	20000058 	.word	0x20000058

08000b00 <std>:
 8000b00:	2300      	movs	r3, #0
 8000b02:	b510      	push	{r4, lr}
 8000b04:	4604      	mov	r4, r0
 8000b06:	e9c0 3300 	strd	r3, r3, [r0]
 8000b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b0e:	6083      	str	r3, [r0, #8]
 8000b10:	8181      	strh	r1, [r0, #12]
 8000b12:	6643      	str	r3, [r0, #100]	; 0x64
 8000b14:	81c2      	strh	r2, [r0, #14]
 8000b16:	6183      	str	r3, [r0, #24]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	305c      	adds	r0, #92	; 0x5c
 8000b1e:	f000 f8f4 	bl	8000d0a <memset>
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <std+0x58>)
 8000b24:	6224      	str	r4, [r4, #32]
 8000b26:	6263      	str	r3, [r4, #36]	; 0x24
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <std+0x5c>)
 8000b2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <std+0x60>)
 8000b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <std+0x64>)
 8000b32:	6323      	str	r3, [r4, #48]	; 0x30
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <std+0x68>)
 8000b36:	429c      	cmp	r4, r3
 8000b38:	d006      	beq.n	8000b48 <std+0x48>
 8000b3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b3e:	4294      	cmp	r4, r2
 8000b40:	d002      	beq.n	8000b48 <std+0x48>
 8000b42:	33d0      	adds	r3, #208	; 0xd0
 8000b44:	429c      	cmp	r4, r3
 8000b46:	d105      	bne.n	8000b54 <std+0x54>
 8000b48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b50:	f000 b9c2 	b.w	8000ed8 <__retarget_lock_init_recursive>
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	bf00      	nop
 8000b58:	08000c85 	.word	0x08000c85
 8000b5c:	08000ca7 	.word	0x08000ca7
 8000b60:	08000cdf 	.word	0x08000cdf
 8000b64:	08000d03 	.word	0x08000d03
 8000b68:	200001bc 	.word	0x200001bc

08000b6c <stdio_exit_handler>:
 8000b6c:	4a02      	ldr	r2, [pc, #8]	; (8000b78 <stdio_exit_handler+0xc>)
 8000b6e:	4903      	ldr	r1, [pc, #12]	; (8000b7c <stdio_exit_handler+0x10>)
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <stdio_exit_handler+0x14>)
 8000b72:	f000 b869 	b.w	8000c48 <_fwalk_sglue>
 8000b76:	bf00      	nop
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	08001219 	.word	0x08001219
 8000b80:	2000000c 	.word	0x2000000c

08000b84 <cleanup_stdio>:
 8000b84:	6841      	ldr	r1, [r0, #4]
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <cleanup_stdio+0x34>)
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	d001      	beq.n	8000b94 <cleanup_stdio+0x10>
 8000b90:	f000 fb42 	bl	8001218 <_fflush_r>
 8000b94:	68a1      	ldr	r1, [r4, #8]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <cleanup_stdio+0x38>)
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	d002      	beq.n	8000ba2 <cleanup_stdio+0x1e>
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f000 fb3b 	bl	8001218 <_fflush_r>
 8000ba2:	68e1      	ldr	r1, [r4, #12]
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <cleanup_stdio+0x3c>)
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d004      	beq.n	8000bb4 <cleanup_stdio+0x30>
 8000baa:	4620      	mov	r0, r4
 8000bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bb0:	f000 bb32 	b.w	8001218 <_fflush_r>
 8000bb4:	bd10      	pop	{r4, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001bc 	.word	0x200001bc
 8000bbc:	20000224 	.word	0x20000224
 8000bc0:	2000028c 	.word	0x2000028c

08000bc4 <global_stdio_init.part.0>:
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <global_stdio_init.part.0+0x30>)
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <global_stdio_init.part.0+0x34>)
 8000bca:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <global_stdio_init.part.0+0x38>)
 8000bcc:	4620      	mov	r0, r4
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f7ff ff94 	bl	8000b00 <std>
 8000bd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2109      	movs	r1, #9
 8000be0:	f7ff ff8e 	bl	8000b00 <std>
 8000be4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000be8:	2202      	movs	r2, #2
 8000bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bee:	2112      	movs	r1, #18
 8000bf0:	f7ff bf86 	b.w	8000b00 <std>
 8000bf4:	200002f4 	.word	0x200002f4
 8000bf8:	200001bc 	.word	0x200001bc
 8000bfc:	08000b6d 	.word	0x08000b6d

08000c00 <__sfp_lock_acquire>:
 8000c00:	4801      	ldr	r0, [pc, #4]	; (8000c08 <__sfp_lock_acquire+0x8>)
 8000c02:	f000 b96a 	b.w	8000eda <__retarget_lock_acquire_recursive>
 8000c06:	bf00      	nop
 8000c08:	200002fd 	.word	0x200002fd

08000c0c <__sfp_lock_release>:
 8000c0c:	4801      	ldr	r0, [pc, #4]	; (8000c14 <__sfp_lock_release+0x8>)
 8000c0e:	f000 b965 	b.w	8000edc <__retarget_lock_release_recursive>
 8000c12:	bf00      	nop
 8000c14:	200002fd 	.word	0x200002fd

08000c18 <__sinit>:
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	f7ff fff0 	bl	8000c00 <__sfp_lock_acquire>
 8000c20:	6a23      	ldr	r3, [r4, #32]
 8000c22:	b11b      	cbz	r3, 8000c2c <__sinit+0x14>
 8000c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c28:	f7ff bff0 	b.w	8000c0c <__sfp_lock_release>
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__sinit+0x28>)
 8000c2e:	6223      	str	r3, [r4, #32]
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__sinit+0x2c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f5      	bne.n	8000c24 <__sinit+0xc>
 8000c38:	f7ff ffc4 	bl	8000bc4 <global_stdio_init.part.0>
 8000c3c:	e7f2      	b.n	8000c24 <__sinit+0xc>
 8000c3e:	bf00      	nop
 8000c40:	08000b85 	.word	0x08000b85
 8000c44:	200002f4 	.word	0x200002f4

08000c48 <_fwalk_sglue>:
 8000c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c4c:	4607      	mov	r7, r0
 8000c4e:	4688      	mov	r8, r1
 8000c50:	4614      	mov	r4, r2
 8000c52:	2600      	movs	r6, #0
 8000c54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c58:	f1b9 0901 	subs.w	r9, r9, #1
 8000c5c:	d505      	bpl.n	8000c6a <_fwalk_sglue+0x22>
 8000c5e:	6824      	ldr	r4, [r4, #0]
 8000c60:	2c00      	cmp	r4, #0
 8000c62:	d1f7      	bne.n	8000c54 <_fwalk_sglue+0xc>
 8000c64:	4630      	mov	r0, r6
 8000c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c6a:	89ab      	ldrh	r3, [r5, #12]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d907      	bls.n	8000c80 <_fwalk_sglue+0x38>
 8000c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c74:	3301      	adds	r3, #1
 8000c76:	d003      	beq.n	8000c80 <_fwalk_sglue+0x38>
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4638      	mov	r0, r7
 8000c7c:	47c0      	blx	r8
 8000c7e:	4306      	orrs	r6, r0
 8000c80:	3568      	adds	r5, #104	; 0x68
 8000c82:	e7e9      	b.n	8000c58 <_fwalk_sglue+0x10>

08000c84 <__sread>:
 8000c84:	b510      	push	{r4, lr}
 8000c86:	460c      	mov	r4, r1
 8000c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c8c:	f000 f8d6 	bl	8000e3c <_read_r>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	bfab      	itete	ge
 8000c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c96:	89a3      	ldrhlt	r3, [r4, #12]
 8000c98:	181b      	addge	r3, r3, r0
 8000c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c9e:	bfac      	ite	ge
 8000ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ca2:	81a3      	strhlt	r3, [r4, #12]
 8000ca4:	bd10      	pop	{r4, pc}

08000ca6 <__swrite>:
 8000ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000caa:	461f      	mov	r7, r3
 8000cac:	898b      	ldrh	r3, [r1, #12]
 8000cae:	4605      	mov	r5, r0
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	4616      	mov	r6, r2
 8000cb6:	d505      	bpl.n	8000cc4 <__swrite+0x1e>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cc0:	f000 f8aa 	bl	8000e18 <_lseek_r>
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	4632      	mov	r2, r6
 8000cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ccc:	81a3      	strh	r3, [r4, #12]
 8000cce:	4628      	mov	r0, r5
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000cda:	f000 b8c1 	b.w	8000e60 <_write_r>

08000cde <__sseek>:
 8000cde:	b510      	push	{r4, lr}
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ce6:	f000 f897 	bl	8000e18 <_lseek_r>
 8000cea:	1c43      	adds	r3, r0, #1
 8000cec:	89a3      	ldrh	r3, [r4, #12]
 8000cee:	bf15      	itete	ne
 8000cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8000cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000cfa:	81a3      	strheq	r3, [r4, #12]
 8000cfc:	bf18      	it	ne
 8000cfe:	81a3      	strhne	r3, [r4, #12]
 8000d00:	bd10      	pop	{r4, pc}

08000d02 <__sclose>:
 8000d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d06:	f000 b877 	b.w	8000df8 <_close_r>

08000d0a <memset>:
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4402      	add	r2, r0
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d100      	bne.n	8000d14 <memset+0xa>
 8000d12:	4770      	bx	lr
 8000d14:	f803 1b01 	strb.w	r1, [r3], #1
 8000d18:	e7f9      	b.n	8000d0e <memset+0x4>

08000d1a <strncmp>:
 8000d1a:	b510      	push	{r4, lr}
 8000d1c:	b16a      	cbz	r2, 8000d3a <strncmp+0x20>
 8000d1e:	3901      	subs	r1, #1
 8000d20:	1884      	adds	r4, r0, r2
 8000d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d103      	bne.n	8000d36 <strncmp+0x1c>
 8000d2e:	42a0      	cmp	r0, r4
 8000d30:	d001      	beq.n	8000d36 <strncmp+0x1c>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d1f5      	bne.n	8000d22 <strncmp+0x8>
 8000d36:	1ad0      	subs	r0, r2, r3
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	e7fc      	b.n	8000d38 <strncmp+0x1e>
	...

08000d40 <strtok>:
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <strtok+0x5c>)
 8000d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d46:	681f      	ldr	r7, [r3, #0]
 8000d48:	4605      	mov	r5, r0
 8000d4a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000d4c:	460e      	mov	r6, r1
 8000d4e:	b9ec      	cbnz	r4, 8000d8c <strtok+0x4c>
 8000d50:	2050      	movs	r0, #80	; 0x50
 8000d52:	f000 f92b 	bl	8000fac <malloc>
 8000d56:	4602      	mov	r2, r0
 8000d58:	6478      	str	r0, [r7, #68]	; 0x44
 8000d5a:	b920      	cbnz	r0, 8000d66 <strtok+0x26>
 8000d5c:	215b      	movs	r1, #91	; 0x5b
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <strtok+0x60>)
 8000d60:	4810      	ldr	r0, [pc, #64]	; (8000da4 <strtok+0x64>)
 8000d62:	f000 f8bd 	bl	8000ee0 <__assert_func>
 8000d66:	e9c0 4400 	strd	r4, r4, [r0]
 8000d6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000d6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000d72:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000d76:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000d7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000d7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000d82:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000d86:	6184      	str	r4, [r0, #24]
 8000d88:	7704      	strb	r4, [r0, #28]
 8000d8a:	6244      	str	r4, [r0, #36]	; 0x24
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	4628      	mov	r0, r5
 8000d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d92:	2301      	movs	r3, #1
 8000d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d98:	f000 b806 	b.w	8000da8 <__strtok_r>
 8000d9c:	20000058 	.word	0x20000058
 8000da0:	08001caa 	.word	0x08001caa
 8000da4:	08001cc1 	.word	0x08001cc1

08000da8 <__strtok_r>:
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b908      	cbnz	r0, 8000db0 <__strtok_r+0x8>
 8000dac:	6810      	ldr	r0, [r2, #0]
 8000dae:	b188      	cbz	r0, 8000dd4 <__strtok_r+0x2c>
 8000db0:	4604      	mov	r4, r0
 8000db2:	460f      	mov	r7, r1
 8000db4:	4620      	mov	r0, r4
 8000db6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000dba:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000dbe:	b91e      	cbnz	r6, 8000dc8 <__strtok_r+0x20>
 8000dc0:	b965      	cbnz	r5, 8000ddc <__strtok_r+0x34>
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	6015      	str	r5, [r2, #0]
 8000dc6:	e005      	b.n	8000dd4 <__strtok_r+0x2c>
 8000dc8:	42b5      	cmp	r5, r6
 8000dca:	d1f6      	bne.n	8000dba <__strtok_r+0x12>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f0      	bne.n	8000db2 <__strtok_r+0xa>
 8000dd0:	6014      	str	r4, [r2, #0]
 8000dd2:	7003      	strb	r3, [r0, #0]
 8000dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd6:	461c      	mov	r4, r3
 8000dd8:	e00c      	b.n	8000df4 <__strtok_r+0x4c>
 8000dda:	b915      	cbnz	r5, 8000de2 <__strtok_r+0x3a>
 8000ddc:	460e      	mov	r6, r1
 8000dde:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000de2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000de6:	42ab      	cmp	r3, r5
 8000de8:	d1f7      	bne.n	8000dda <__strtok_r+0x32>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f3      	beq.n	8000dd6 <__strtok_r+0x2e>
 8000dee:	2300      	movs	r3, #0
 8000df0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000df4:	6014      	str	r4, [r2, #0]
 8000df6:	e7ed      	b.n	8000dd4 <__strtok_r+0x2c>

08000df8 <_close_r>:
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	4d05      	ldr	r5, [pc, #20]	; (8000e14 <_close_r+0x1c>)
 8000dfe:	4604      	mov	r4, r0
 8000e00:	4608      	mov	r0, r1
 8000e02:	602b      	str	r3, [r5, #0]
 8000e04:	f7ff fc00 	bl	8000608 <_close>
 8000e08:	1c43      	adds	r3, r0, #1
 8000e0a:	d102      	bne.n	8000e12 <_close_r+0x1a>
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	b103      	cbz	r3, 8000e12 <_close_r+0x1a>
 8000e10:	6023      	str	r3, [r4, #0]
 8000e12:	bd38      	pop	{r3, r4, r5, pc}
 8000e14:	200002f8 	.word	0x200002f8

08000e18 <_lseek_r>:
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	4611      	mov	r1, r2
 8000e20:	2200      	movs	r2, #0
 8000e22:	4d05      	ldr	r5, [pc, #20]	; (8000e38 <_lseek_r+0x20>)
 8000e24:	602a      	str	r2, [r5, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	f7ff fc12 	bl	8000650 <_lseek>
 8000e2c:	1c43      	adds	r3, r0, #1
 8000e2e:	d102      	bne.n	8000e36 <_lseek_r+0x1e>
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	b103      	cbz	r3, 8000e36 <_lseek_r+0x1e>
 8000e34:	6023      	str	r3, [r4, #0]
 8000e36:	bd38      	pop	{r3, r4, r5, pc}
 8000e38:	200002f8 	.word	0x200002f8

08000e3c <_read_r>:
 8000e3c:	b538      	push	{r3, r4, r5, lr}
 8000e3e:	4604      	mov	r4, r0
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	4d05      	ldr	r5, [pc, #20]	; (8000e5c <_read_r+0x20>)
 8000e48:	602a      	str	r2, [r5, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f7ff fba3 	bl	8000596 <_read>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	d102      	bne.n	8000e5a <_read_r+0x1e>
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	b103      	cbz	r3, 8000e5a <_read_r+0x1e>
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	200002f8 	.word	0x200002f8

08000e60 <_write_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4604      	mov	r4, r0
 8000e64:	4608      	mov	r0, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4d05      	ldr	r5, [pc, #20]	; (8000e80 <_write_r+0x20>)
 8000e6c:	602a      	str	r2, [r5, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f7ff fbae 	bl	80005d0 <_write>
 8000e74:	1c43      	adds	r3, r0, #1
 8000e76:	d102      	bne.n	8000e7e <_write_r+0x1e>
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	b103      	cbz	r3, 8000e7e <_write_r+0x1e>
 8000e7c:	6023      	str	r3, [r4, #0]
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
 8000e80:	200002f8 	.word	0x200002f8

08000e84 <__errno>:
 8000e84:	4b01      	ldr	r3, [pc, #4]	; (8000e8c <__errno+0x8>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000058 	.word	0x20000058

08000e90 <__libc_init_array>:
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	2600      	movs	r6, #0
 8000e94:	4d0c      	ldr	r5, [pc, #48]	; (8000ec8 <__libc_init_array+0x38>)
 8000e96:	4c0d      	ldr	r4, [pc, #52]	; (8000ecc <__libc_init_array+0x3c>)
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	10a4      	asrs	r4, r4, #2
 8000e9c:	42a6      	cmp	r6, r4
 8000e9e:	d109      	bne.n	8000eb4 <__libc_init_array+0x24>
 8000ea0:	f000 fe4c 	bl	8001b3c <_init>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	4d0a      	ldr	r5, [pc, #40]	; (8000ed0 <__libc_init_array+0x40>)
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <__libc_init_array+0x44>)
 8000eaa:	1b64      	subs	r4, r4, r5
 8000eac:	10a4      	asrs	r4, r4, #2
 8000eae:	42a6      	cmp	r6, r4
 8000eb0:	d105      	bne.n	8000ebe <__libc_init_array+0x2e>
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb8:	4798      	blx	r3
 8000eba:	3601      	adds	r6, #1
 8000ebc:	e7ee      	b.n	8000e9c <__libc_init_array+0xc>
 8000ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ec2:	4798      	blx	r3
 8000ec4:	3601      	adds	r6, #1
 8000ec6:	e7f2      	b.n	8000eae <__libc_init_array+0x1e>
 8000ec8:	08001d8c 	.word	0x08001d8c
 8000ecc:	08001d8c 	.word	0x08001d8c
 8000ed0:	08001d8c 	.word	0x08001d8c
 8000ed4:	08001d90 	.word	0x08001d90

08000ed8 <__retarget_lock_init_recursive>:
 8000ed8:	4770      	bx	lr

08000eda <__retarget_lock_acquire_recursive>:
 8000eda:	4770      	bx	lr

08000edc <__retarget_lock_release_recursive>:
 8000edc:	4770      	bx	lr
	...

08000ee0 <__assert_func>:
 8000ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ee2:	4614      	mov	r4, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <__assert_func+0x2c>)
 8000ee8:	4605      	mov	r5, r0
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68d8      	ldr	r0, [r3, #12]
 8000eee:	b14c      	cbz	r4, 8000f04 <__assert_func+0x24>
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <__assert_func+0x30>)
 8000ef2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000ef6:	9100      	str	r1, [sp, #0]
 8000ef8:	462b      	mov	r3, r5
 8000efa:	4906      	ldr	r1, [pc, #24]	; (8000f14 <__assert_func+0x34>)
 8000efc:	f000 f9b4 	bl	8001268 <fiprintf>
 8000f00:	f000 f9d4 	bl	80012ac <abort>
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__assert_func+0x38>)
 8000f06:	461c      	mov	r4, r3
 8000f08:	e7f3      	b.n	8000ef2 <__assert_func+0x12>
 8000f0a:	bf00      	nop
 8000f0c:	20000058 	.word	0x20000058
 8000f10:	08001d1b 	.word	0x08001d1b
 8000f14:	08001d28 	.word	0x08001d28
 8000f18:	08001d56 	.word	0x08001d56

08000f1c <_free_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4605      	mov	r5, r0
 8000f20:	2900      	cmp	r1, #0
 8000f22:	d040      	beq.n	8000fa6 <_free_r+0x8a>
 8000f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f28:	1f0c      	subs	r4, r1, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bfb8      	it	lt
 8000f2e:	18e4      	addlt	r4, r4, r3
 8000f30:	f000 f8e4 	bl	80010fc <__malloc_lock>
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <_free_r+0x8c>)
 8000f36:	6813      	ldr	r3, [r2, #0]
 8000f38:	b933      	cbnz	r3, 8000f48 <_free_r+0x2c>
 8000f3a:	6063      	str	r3, [r4, #4]
 8000f3c:	6014      	str	r4, [r2, #0]
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f44:	f000 b8e0 	b.w	8001108 <__malloc_unlock>
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <_free_r+0x42>
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	1821      	adds	r1, r4, r0
 8000f50:	428b      	cmp	r3, r1
 8000f52:	bf01      	itttt	eq
 8000f54:	6819      	ldreq	r1, [r3, #0]
 8000f56:	685b      	ldreq	r3, [r3, #4]
 8000f58:	1809      	addeq	r1, r1, r0
 8000f5a:	6021      	streq	r1, [r4, #0]
 8000f5c:	e7ed      	b.n	8000f3a <_free_r+0x1e>
 8000f5e:	461a      	mov	r2, r3
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	b10b      	cbz	r3, 8000f68 <_free_r+0x4c>
 8000f64:	42a3      	cmp	r3, r4
 8000f66:	d9fa      	bls.n	8000f5e <_free_r+0x42>
 8000f68:	6811      	ldr	r1, [r2, #0]
 8000f6a:	1850      	adds	r0, r2, r1
 8000f6c:	42a0      	cmp	r0, r4
 8000f6e:	d10b      	bne.n	8000f88 <_free_r+0x6c>
 8000f70:	6820      	ldr	r0, [r4, #0]
 8000f72:	4401      	add	r1, r0
 8000f74:	1850      	adds	r0, r2, r1
 8000f76:	4283      	cmp	r3, r0
 8000f78:	6011      	str	r1, [r2, #0]
 8000f7a:	d1e0      	bne.n	8000f3e <_free_r+0x22>
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4408      	add	r0, r1
 8000f82:	6010      	str	r0, [r2, #0]
 8000f84:	6053      	str	r3, [r2, #4]
 8000f86:	e7da      	b.n	8000f3e <_free_r+0x22>
 8000f88:	d902      	bls.n	8000f90 <_free_r+0x74>
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	602b      	str	r3, [r5, #0]
 8000f8e:	e7d6      	b.n	8000f3e <_free_r+0x22>
 8000f90:	6820      	ldr	r0, [r4, #0]
 8000f92:	1821      	adds	r1, r4, r0
 8000f94:	428b      	cmp	r3, r1
 8000f96:	bf01      	itttt	eq
 8000f98:	6819      	ldreq	r1, [r3, #0]
 8000f9a:	685b      	ldreq	r3, [r3, #4]
 8000f9c:	1809      	addeq	r1, r1, r0
 8000f9e:	6021      	streq	r1, [r4, #0]
 8000fa0:	6063      	str	r3, [r4, #4]
 8000fa2:	6054      	str	r4, [r2, #4]
 8000fa4:	e7cb      	b.n	8000f3e <_free_r+0x22>
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	20000300 	.word	0x20000300

08000fac <malloc>:
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <malloc+0xc>)
 8000fae:	4601      	mov	r1, r0
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f000 b823 	b.w	8000ffc <_malloc_r>
 8000fb6:	bf00      	nop
 8000fb8:	20000058 	.word	0x20000058

08000fbc <sbrk_aligned>:
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	4e0e      	ldr	r6, [pc, #56]	; (8000ff8 <sbrk_aligned+0x3c>)
 8000fc0:	460c      	mov	r4, r1
 8000fc2:	6831      	ldr	r1, [r6, #0]
 8000fc4:	4605      	mov	r5, r0
 8000fc6:	b911      	cbnz	r1, 8000fce <sbrk_aligned+0x12>
 8000fc8:	f000 f960 	bl	800128c <_sbrk_r>
 8000fcc:	6030      	str	r0, [r6, #0]
 8000fce:	4621      	mov	r1, r4
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f000 f95b 	bl	800128c <_sbrk_r>
 8000fd6:	1c43      	adds	r3, r0, #1
 8000fd8:	d00a      	beq.n	8000ff0 <sbrk_aligned+0x34>
 8000fda:	1cc4      	adds	r4, r0, #3
 8000fdc:	f024 0403 	bic.w	r4, r4, #3
 8000fe0:	42a0      	cmp	r0, r4
 8000fe2:	d007      	beq.n	8000ff4 <sbrk_aligned+0x38>
 8000fe4:	1a21      	subs	r1, r4, r0
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f000 f950 	bl	800128c <_sbrk_r>
 8000fec:	3001      	adds	r0, #1
 8000fee:	d101      	bne.n	8000ff4 <sbrk_aligned+0x38>
 8000ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
 8000ff8:	20000304 	.word	0x20000304

08000ffc <_malloc_r>:
 8000ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001000:	1ccd      	adds	r5, r1, #3
 8001002:	f025 0503 	bic.w	r5, r5, #3
 8001006:	3508      	adds	r5, #8
 8001008:	2d0c      	cmp	r5, #12
 800100a:	bf38      	it	cc
 800100c:	250c      	movcc	r5, #12
 800100e:	2d00      	cmp	r5, #0
 8001010:	4607      	mov	r7, r0
 8001012:	db01      	blt.n	8001018 <_malloc_r+0x1c>
 8001014:	42a9      	cmp	r1, r5
 8001016:	d905      	bls.n	8001024 <_malloc_r+0x28>
 8001018:	230c      	movs	r3, #12
 800101a:	2600      	movs	r6, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4630      	mov	r0, r6
 8001020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001024:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80010f8 <_malloc_r+0xfc>
 8001028:	f000 f868 	bl	80010fc <__malloc_lock>
 800102c:	f8d8 3000 	ldr.w	r3, [r8]
 8001030:	461c      	mov	r4, r3
 8001032:	bb5c      	cbnz	r4, 800108c <_malloc_r+0x90>
 8001034:	4629      	mov	r1, r5
 8001036:	4638      	mov	r0, r7
 8001038:	f7ff ffc0 	bl	8000fbc <sbrk_aligned>
 800103c:	1c43      	adds	r3, r0, #1
 800103e:	4604      	mov	r4, r0
 8001040:	d155      	bne.n	80010ee <_malloc_r+0xf2>
 8001042:	f8d8 4000 	ldr.w	r4, [r8]
 8001046:	4626      	mov	r6, r4
 8001048:	2e00      	cmp	r6, #0
 800104a:	d145      	bne.n	80010d8 <_malloc_r+0xdc>
 800104c:	2c00      	cmp	r4, #0
 800104e:	d048      	beq.n	80010e2 <_malloc_r+0xe6>
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	4631      	mov	r1, r6
 8001054:	4638      	mov	r0, r7
 8001056:	eb04 0903 	add.w	r9, r4, r3
 800105a:	f000 f917 	bl	800128c <_sbrk_r>
 800105e:	4581      	cmp	r9, r0
 8001060:	d13f      	bne.n	80010e2 <_malloc_r+0xe6>
 8001062:	6821      	ldr	r1, [r4, #0]
 8001064:	4638      	mov	r0, r7
 8001066:	1a6d      	subs	r5, r5, r1
 8001068:	4629      	mov	r1, r5
 800106a:	f7ff ffa7 	bl	8000fbc <sbrk_aligned>
 800106e:	3001      	adds	r0, #1
 8001070:	d037      	beq.n	80010e2 <_malloc_r+0xe6>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	442b      	add	r3, r5
 8001076:	6023      	str	r3, [r4, #0]
 8001078:	f8d8 3000 	ldr.w	r3, [r8]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d038      	beq.n	80010f2 <_malloc_r+0xf6>
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	42a2      	cmp	r2, r4
 8001084:	d12b      	bne.n	80010de <_malloc_r+0xe2>
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	e00f      	b.n	80010ac <_malloc_r+0xb0>
 800108c:	6822      	ldr	r2, [r4, #0]
 800108e:	1b52      	subs	r2, r2, r5
 8001090:	d41f      	bmi.n	80010d2 <_malloc_r+0xd6>
 8001092:	2a0b      	cmp	r2, #11
 8001094:	d917      	bls.n	80010c6 <_malloc_r+0xca>
 8001096:	1961      	adds	r1, r4, r5
 8001098:	42a3      	cmp	r3, r4
 800109a:	6025      	str	r5, [r4, #0]
 800109c:	bf18      	it	ne
 800109e:	6059      	strne	r1, [r3, #4]
 80010a0:	6863      	ldr	r3, [r4, #4]
 80010a2:	bf08      	it	eq
 80010a4:	f8c8 1000 	streq.w	r1, [r8]
 80010a8:	5162      	str	r2, [r4, r5]
 80010aa:	604b      	str	r3, [r1, #4]
 80010ac:	4638      	mov	r0, r7
 80010ae:	f104 060b 	add.w	r6, r4, #11
 80010b2:	f000 f829 	bl	8001108 <__malloc_unlock>
 80010b6:	f026 0607 	bic.w	r6, r6, #7
 80010ba:	1d23      	adds	r3, r4, #4
 80010bc:	1af2      	subs	r2, r6, r3
 80010be:	d0ae      	beq.n	800101e <_malloc_r+0x22>
 80010c0:	1b9b      	subs	r3, r3, r6
 80010c2:	50a3      	str	r3, [r4, r2]
 80010c4:	e7ab      	b.n	800101e <_malloc_r+0x22>
 80010c6:	42a3      	cmp	r3, r4
 80010c8:	6862      	ldr	r2, [r4, #4]
 80010ca:	d1dd      	bne.n	8001088 <_malloc_r+0x8c>
 80010cc:	f8c8 2000 	str.w	r2, [r8]
 80010d0:	e7ec      	b.n	80010ac <_malloc_r+0xb0>
 80010d2:	4623      	mov	r3, r4
 80010d4:	6864      	ldr	r4, [r4, #4]
 80010d6:	e7ac      	b.n	8001032 <_malloc_r+0x36>
 80010d8:	4634      	mov	r4, r6
 80010da:	6876      	ldr	r6, [r6, #4]
 80010dc:	e7b4      	b.n	8001048 <_malloc_r+0x4c>
 80010de:	4613      	mov	r3, r2
 80010e0:	e7cc      	b.n	800107c <_malloc_r+0x80>
 80010e2:	230c      	movs	r3, #12
 80010e4:	4638      	mov	r0, r7
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	f000 f80e 	bl	8001108 <__malloc_unlock>
 80010ec:	e797      	b.n	800101e <_malloc_r+0x22>
 80010ee:	6025      	str	r5, [r4, #0]
 80010f0:	e7dc      	b.n	80010ac <_malloc_r+0xb0>
 80010f2:	605b      	str	r3, [r3, #4]
 80010f4:	deff      	udf	#255	; 0xff
 80010f6:	bf00      	nop
 80010f8:	20000300 	.word	0x20000300

080010fc <__malloc_lock>:
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <__malloc_lock+0x8>)
 80010fe:	f7ff beec 	b.w	8000eda <__retarget_lock_acquire_recursive>
 8001102:	bf00      	nop
 8001104:	200002fc 	.word	0x200002fc

08001108 <__malloc_unlock>:
 8001108:	4801      	ldr	r0, [pc, #4]	; (8001110 <__malloc_unlock+0x8>)
 800110a:	f7ff bee7 	b.w	8000edc <__retarget_lock_release_recursive>
 800110e:	bf00      	nop
 8001110:	200002fc 	.word	0x200002fc

08001114 <__sflush_r>:
 8001114:	898a      	ldrh	r2, [r1, #12]
 8001116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001118:	4605      	mov	r5, r0
 800111a:	0710      	lsls	r0, r2, #28
 800111c:	460c      	mov	r4, r1
 800111e:	d457      	bmi.n	80011d0 <__sflush_r+0xbc>
 8001120:	684b      	ldr	r3, [r1, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dc04      	bgt.n	8001130 <__sflush_r+0x1c>
 8001126:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001128:	2b00      	cmp	r3, #0
 800112a:	dc01      	bgt.n	8001130 <__sflush_r+0x1c>
 800112c:	2000      	movs	r0, #0
 800112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001132:	2e00      	cmp	r6, #0
 8001134:	d0fa      	beq.n	800112c <__sflush_r+0x18>
 8001136:	2300      	movs	r3, #0
 8001138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800113c:	682f      	ldr	r7, [r5, #0]
 800113e:	6a21      	ldr	r1, [r4, #32]
 8001140:	602b      	str	r3, [r5, #0]
 8001142:	d032      	beq.n	80011aa <__sflush_r+0x96>
 8001144:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001146:	89a3      	ldrh	r3, [r4, #12]
 8001148:	075a      	lsls	r2, r3, #29
 800114a:	d505      	bpl.n	8001158 <__sflush_r+0x44>
 800114c:	6863      	ldr	r3, [r4, #4]
 800114e:	1ac0      	subs	r0, r0, r3
 8001150:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001152:	b10b      	cbz	r3, 8001158 <__sflush_r+0x44>
 8001154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001156:	1ac0      	subs	r0, r0, r3
 8001158:	2300      	movs	r3, #0
 800115a:	4602      	mov	r2, r0
 800115c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800115e:	4628      	mov	r0, r5
 8001160:	6a21      	ldr	r1, [r4, #32]
 8001162:	47b0      	blx	r6
 8001164:	1c43      	adds	r3, r0, #1
 8001166:	89a3      	ldrh	r3, [r4, #12]
 8001168:	d106      	bne.n	8001178 <__sflush_r+0x64>
 800116a:	6829      	ldr	r1, [r5, #0]
 800116c:	291d      	cmp	r1, #29
 800116e:	d82b      	bhi.n	80011c8 <__sflush_r+0xb4>
 8001170:	4a28      	ldr	r2, [pc, #160]	; (8001214 <__sflush_r+0x100>)
 8001172:	410a      	asrs	r2, r1
 8001174:	07d6      	lsls	r6, r2, #31
 8001176:	d427      	bmi.n	80011c8 <__sflush_r+0xb4>
 8001178:	2200      	movs	r2, #0
 800117a:	6062      	str	r2, [r4, #4]
 800117c:	6922      	ldr	r2, [r4, #16]
 800117e:	04d9      	lsls	r1, r3, #19
 8001180:	6022      	str	r2, [r4, #0]
 8001182:	d504      	bpl.n	800118e <__sflush_r+0x7a>
 8001184:	1c42      	adds	r2, r0, #1
 8001186:	d101      	bne.n	800118c <__sflush_r+0x78>
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	b903      	cbnz	r3, 800118e <__sflush_r+0x7a>
 800118c:	6560      	str	r0, [r4, #84]	; 0x54
 800118e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001190:	602f      	str	r7, [r5, #0]
 8001192:	2900      	cmp	r1, #0
 8001194:	d0ca      	beq.n	800112c <__sflush_r+0x18>
 8001196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800119a:	4299      	cmp	r1, r3
 800119c:	d002      	beq.n	80011a4 <__sflush_r+0x90>
 800119e:	4628      	mov	r0, r5
 80011a0:	f7ff febc 	bl	8000f1c <_free_r>
 80011a4:	2000      	movs	r0, #0
 80011a6:	6360      	str	r0, [r4, #52]	; 0x34
 80011a8:	e7c1      	b.n	800112e <__sflush_r+0x1a>
 80011aa:	2301      	movs	r3, #1
 80011ac:	4628      	mov	r0, r5
 80011ae:	47b0      	blx	r6
 80011b0:	1c41      	adds	r1, r0, #1
 80011b2:	d1c8      	bne.n	8001146 <__sflush_r+0x32>
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0c5      	beq.n	8001146 <__sflush_r+0x32>
 80011ba:	2b1d      	cmp	r3, #29
 80011bc:	d001      	beq.n	80011c2 <__sflush_r+0xae>
 80011be:	2b16      	cmp	r3, #22
 80011c0:	d101      	bne.n	80011c6 <__sflush_r+0xb2>
 80011c2:	602f      	str	r7, [r5, #0]
 80011c4:	e7b2      	b.n	800112c <__sflush_r+0x18>
 80011c6:	89a3      	ldrh	r3, [r4, #12]
 80011c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011cc:	81a3      	strh	r3, [r4, #12]
 80011ce:	e7ae      	b.n	800112e <__sflush_r+0x1a>
 80011d0:	690f      	ldr	r7, [r1, #16]
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	d0aa      	beq.n	800112c <__sflush_r+0x18>
 80011d6:	0793      	lsls	r3, r2, #30
 80011d8:	bf18      	it	ne
 80011da:	2300      	movne	r3, #0
 80011dc:	680e      	ldr	r6, [r1, #0]
 80011de:	bf08      	it	eq
 80011e0:	694b      	ldreq	r3, [r1, #20]
 80011e2:	1bf6      	subs	r6, r6, r7
 80011e4:	600f      	str	r7, [r1, #0]
 80011e6:	608b      	str	r3, [r1, #8]
 80011e8:	2e00      	cmp	r6, #0
 80011ea:	dd9f      	ble.n	800112c <__sflush_r+0x18>
 80011ec:	4633      	mov	r3, r6
 80011ee:	463a      	mov	r2, r7
 80011f0:	4628      	mov	r0, r5
 80011f2:	6a21      	ldr	r1, [r4, #32]
 80011f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80011f8:	47e0      	blx	ip
 80011fa:	2800      	cmp	r0, #0
 80011fc:	dc06      	bgt.n	800120c <__sflush_r+0xf8>
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	81a3      	strh	r3, [r4, #12]
 800120a:	e790      	b.n	800112e <__sflush_r+0x1a>
 800120c:	4407      	add	r7, r0
 800120e:	1a36      	subs	r6, r6, r0
 8001210:	e7ea      	b.n	80011e8 <__sflush_r+0xd4>
 8001212:	bf00      	nop
 8001214:	dfbffffe 	.word	0xdfbffffe

08001218 <_fflush_r>:
 8001218:	b538      	push	{r3, r4, r5, lr}
 800121a:	690b      	ldr	r3, [r1, #16]
 800121c:	4605      	mov	r5, r0
 800121e:	460c      	mov	r4, r1
 8001220:	b913      	cbnz	r3, 8001228 <_fflush_r+0x10>
 8001222:	2500      	movs	r5, #0
 8001224:	4628      	mov	r0, r5
 8001226:	bd38      	pop	{r3, r4, r5, pc}
 8001228:	b118      	cbz	r0, 8001232 <_fflush_r+0x1a>
 800122a:	6a03      	ldr	r3, [r0, #32]
 800122c:	b90b      	cbnz	r3, 8001232 <_fflush_r+0x1a>
 800122e:	f7ff fcf3 	bl	8000c18 <__sinit>
 8001232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f3      	beq.n	8001222 <_fflush_r+0xa>
 800123a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800123c:	07d0      	lsls	r0, r2, #31
 800123e:	d404      	bmi.n	800124a <_fflush_r+0x32>
 8001240:	0599      	lsls	r1, r3, #22
 8001242:	d402      	bmi.n	800124a <_fflush_r+0x32>
 8001244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001246:	f7ff fe48 	bl	8000eda <__retarget_lock_acquire_recursive>
 800124a:	4628      	mov	r0, r5
 800124c:	4621      	mov	r1, r4
 800124e:	f7ff ff61 	bl	8001114 <__sflush_r>
 8001252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001254:	4605      	mov	r5, r0
 8001256:	07da      	lsls	r2, r3, #31
 8001258:	d4e4      	bmi.n	8001224 <_fflush_r+0xc>
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	059b      	lsls	r3, r3, #22
 800125e:	d4e1      	bmi.n	8001224 <_fflush_r+0xc>
 8001260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001262:	f7ff fe3b 	bl	8000edc <__retarget_lock_release_recursive>
 8001266:	e7dd      	b.n	8001224 <_fflush_r+0xc>

08001268 <fiprintf>:
 8001268:	b40e      	push	{r1, r2, r3}
 800126a:	b503      	push	{r0, r1, lr}
 800126c:	4601      	mov	r1, r0
 800126e:	ab03      	add	r3, sp, #12
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <fiprintf+0x20>)
 8001272:	f853 2b04 	ldr.w	r2, [r3], #4
 8001276:	6800      	ldr	r0, [r0, #0]
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f000 f845 	bl	8001308 <_vfiprintf_r>
 800127e:	b002      	add	sp, #8
 8001280:	f85d eb04 	ldr.w	lr, [sp], #4
 8001284:	b003      	add	sp, #12
 8001286:	4770      	bx	lr
 8001288:	20000058 	.word	0x20000058

0800128c <_sbrk_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	2300      	movs	r3, #0
 8001290:	4d05      	ldr	r5, [pc, #20]	; (80012a8 <_sbrk_r+0x1c>)
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	602b      	str	r3, [r5, #0]
 8001298:	f7ff f9e6 	bl	8000668 <_sbrk>
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	d102      	bne.n	80012a6 <_sbrk_r+0x1a>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	b103      	cbz	r3, 80012a6 <_sbrk_r+0x1a>
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
 80012a8:	200002f8 	.word	0x200002f8

080012ac <abort>:
 80012ac:	2006      	movs	r0, #6
 80012ae:	b508      	push	{r3, lr}
 80012b0:	f000 fb96 	bl	80019e0 <raise>
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff f964 	bl	8000582 <_exit>

080012ba <__sfputc_r>:
 80012ba:	6893      	ldr	r3, [r2, #8]
 80012bc:	b410      	push	{r4}
 80012be:	3b01      	subs	r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	6093      	str	r3, [r2, #8]
 80012c4:	da07      	bge.n	80012d6 <__sfputc_r+0x1c>
 80012c6:	6994      	ldr	r4, [r2, #24]
 80012c8:	42a3      	cmp	r3, r4
 80012ca:	db01      	blt.n	80012d0 <__sfputc_r+0x16>
 80012cc:	290a      	cmp	r1, #10
 80012ce:	d102      	bne.n	80012d6 <__sfputc_r+0x1c>
 80012d0:	bc10      	pop	{r4}
 80012d2:	f000 bac7 	b.w	8001864 <__swbuf_r>
 80012d6:	6813      	ldr	r3, [r2, #0]
 80012d8:	1c58      	adds	r0, r3, #1
 80012da:	6010      	str	r0, [r2, #0]
 80012dc:	7019      	strb	r1, [r3, #0]
 80012de:	4608      	mov	r0, r1
 80012e0:	bc10      	pop	{r4}
 80012e2:	4770      	bx	lr

080012e4 <__sfputs_r>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	4606      	mov	r6, r0
 80012e8:	460f      	mov	r7, r1
 80012ea:	4614      	mov	r4, r2
 80012ec:	18d5      	adds	r5, r2, r3
 80012ee:	42ac      	cmp	r4, r5
 80012f0:	d101      	bne.n	80012f6 <__sfputs_r+0x12>
 80012f2:	2000      	movs	r0, #0
 80012f4:	e007      	b.n	8001306 <__sfputs_r+0x22>
 80012f6:	463a      	mov	r2, r7
 80012f8:	4630      	mov	r0, r6
 80012fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012fe:	f7ff ffdc 	bl	80012ba <__sfputc_r>
 8001302:	1c43      	adds	r3, r0, #1
 8001304:	d1f3      	bne.n	80012ee <__sfputs_r+0xa>
 8001306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001308 <_vfiprintf_r>:
 8001308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800130c:	460d      	mov	r5, r1
 800130e:	4614      	mov	r4, r2
 8001310:	4698      	mov	r8, r3
 8001312:	4606      	mov	r6, r0
 8001314:	b09d      	sub	sp, #116	; 0x74
 8001316:	b118      	cbz	r0, 8001320 <_vfiprintf_r+0x18>
 8001318:	6a03      	ldr	r3, [r0, #32]
 800131a:	b90b      	cbnz	r3, 8001320 <_vfiprintf_r+0x18>
 800131c:	f7ff fc7c 	bl	8000c18 <__sinit>
 8001320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001322:	07d9      	lsls	r1, r3, #31
 8001324:	d405      	bmi.n	8001332 <_vfiprintf_r+0x2a>
 8001326:	89ab      	ldrh	r3, [r5, #12]
 8001328:	059a      	lsls	r2, r3, #22
 800132a:	d402      	bmi.n	8001332 <_vfiprintf_r+0x2a>
 800132c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800132e:	f7ff fdd4 	bl	8000eda <__retarget_lock_acquire_recursive>
 8001332:	89ab      	ldrh	r3, [r5, #12]
 8001334:	071b      	lsls	r3, r3, #28
 8001336:	d501      	bpl.n	800133c <_vfiprintf_r+0x34>
 8001338:	692b      	ldr	r3, [r5, #16]
 800133a:	b99b      	cbnz	r3, 8001364 <_vfiprintf_r+0x5c>
 800133c:	4629      	mov	r1, r5
 800133e:	4630      	mov	r0, r6
 8001340:	f000 face 	bl	80018e0 <__swsetup_r>
 8001344:	b170      	cbz	r0, 8001364 <_vfiprintf_r+0x5c>
 8001346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001348:	07dc      	lsls	r4, r3, #31
 800134a:	d504      	bpl.n	8001356 <_vfiprintf_r+0x4e>
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	b01d      	add	sp, #116	; 0x74
 8001352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001356:	89ab      	ldrh	r3, [r5, #12]
 8001358:	0598      	lsls	r0, r3, #22
 800135a:	d4f7      	bmi.n	800134c <_vfiprintf_r+0x44>
 800135c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800135e:	f7ff fdbd 	bl	8000edc <__retarget_lock_release_recursive>
 8001362:	e7f3      	b.n	800134c <_vfiprintf_r+0x44>
 8001364:	2300      	movs	r3, #0
 8001366:	9309      	str	r3, [sp, #36]	; 0x24
 8001368:	2320      	movs	r3, #32
 800136a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800136e:	2330      	movs	r3, #48	; 0x30
 8001370:	f04f 0901 	mov.w	r9, #1
 8001374:	f8cd 800c 	str.w	r8, [sp, #12]
 8001378:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001528 <_vfiprintf_r+0x220>
 800137c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001380:	4623      	mov	r3, r4
 8001382:	469a      	mov	sl, r3
 8001384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001388:	b10a      	cbz	r2, 800138e <_vfiprintf_r+0x86>
 800138a:	2a25      	cmp	r2, #37	; 0x25
 800138c:	d1f9      	bne.n	8001382 <_vfiprintf_r+0x7a>
 800138e:	ebba 0b04 	subs.w	fp, sl, r4
 8001392:	d00b      	beq.n	80013ac <_vfiprintf_r+0xa4>
 8001394:	465b      	mov	r3, fp
 8001396:	4622      	mov	r2, r4
 8001398:	4629      	mov	r1, r5
 800139a:	4630      	mov	r0, r6
 800139c:	f7ff ffa2 	bl	80012e4 <__sfputs_r>
 80013a0:	3001      	adds	r0, #1
 80013a2:	f000 80a9 	beq.w	80014f8 <_vfiprintf_r+0x1f0>
 80013a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013a8:	445a      	add	r2, fp
 80013aa:	9209      	str	r2, [sp, #36]	; 0x24
 80013ac:	f89a 3000 	ldrb.w	r3, [sl]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a1 	beq.w	80014f8 <_vfiprintf_r+0x1f0>
 80013b6:	2300      	movs	r3, #0
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013c0:	f10a 0a01 	add.w	sl, sl, #1
 80013c4:	9304      	str	r3, [sp, #16]
 80013c6:	9307      	str	r3, [sp, #28]
 80013c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80013cc:	931a      	str	r3, [sp, #104]	; 0x68
 80013ce:	4654      	mov	r4, sl
 80013d0:	2205      	movs	r2, #5
 80013d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d6:	4854      	ldr	r0, [pc, #336]	; (8001528 <_vfiprintf_r+0x220>)
 80013d8:	f000 fb1e 	bl	8001a18 <memchr>
 80013dc:	9a04      	ldr	r2, [sp, #16]
 80013de:	b9d8      	cbnz	r0, 8001418 <_vfiprintf_r+0x110>
 80013e0:	06d1      	lsls	r1, r2, #27
 80013e2:	bf44      	itt	mi
 80013e4:	2320      	movmi	r3, #32
 80013e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80013ea:	0713      	lsls	r3, r2, #28
 80013ec:	bf44      	itt	mi
 80013ee:	232b      	movmi	r3, #43	; 0x2b
 80013f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80013f4:	f89a 3000 	ldrb.w	r3, [sl]
 80013f8:	2b2a      	cmp	r3, #42	; 0x2a
 80013fa:	d015      	beq.n	8001428 <_vfiprintf_r+0x120>
 80013fc:	4654      	mov	r4, sl
 80013fe:	2000      	movs	r0, #0
 8001400:	f04f 0c0a 	mov.w	ip, #10
 8001404:	9a07      	ldr	r2, [sp, #28]
 8001406:	4621      	mov	r1, r4
 8001408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800140c:	3b30      	subs	r3, #48	; 0x30
 800140e:	2b09      	cmp	r3, #9
 8001410:	d94d      	bls.n	80014ae <_vfiprintf_r+0x1a6>
 8001412:	b1b0      	cbz	r0, 8001442 <_vfiprintf_r+0x13a>
 8001414:	9207      	str	r2, [sp, #28]
 8001416:	e014      	b.n	8001442 <_vfiprintf_r+0x13a>
 8001418:	eba0 0308 	sub.w	r3, r0, r8
 800141c:	fa09 f303 	lsl.w	r3, r9, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	46a2      	mov	sl, r4
 8001424:	9304      	str	r3, [sp, #16]
 8001426:	e7d2      	b.n	80013ce <_vfiprintf_r+0xc6>
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	1d19      	adds	r1, r3, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	9103      	str	r1, [sp, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	bfbb      	ittet	lt
 8001434:	425b      	neglt	r3, r3
 8001436:	f042 0202 	orrlt.w	r2, r2, #2
 800143a:	9307      	strge	r3, [sp, #28]
 800143c:	9307      	strlt	r3, [sp, #28]
 800143e:	bfb8      	it	lt
 8001440:	9204      	strlt	r2, [sp, #16]
 8001442:	7823      	ldrb	r3, [r4, #0]
 8001444:	2b2e      	cmp	r3, #46	; 0x2e
 8001446:	d10c      	bne.n	8001462 <_vfiprintf_r+0x15a>
 8001448:	7863      	ldrb	r3, [r4, #1]
 800144a:	2b2a      	cmp	r3, #42	; 0x2a
 800144c:	d134      	bne.n	80014b8 <_vfiprintf_r+0x1b0>
 800144e:	9b03      	ldr	r3, [sp, #12]
 8001450:	3402      	adds	r4, #2
 8001452:	1d1a      	adds	r2, r3, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	9203      	str	r2, [sp, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	bfb8      	it	lt
 800145c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001460:	9305      	str	r3, [sp, #20]
 8001462:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800152c <_vfiprintf_r+0x224>
 8001466:	2203      	movs	r2, #3
 8001468:	4650      	mov	r0, sl
 800146a:	7821      	ldrb	r1, [r4, #0]
 800146c:	f000 fad4 	bl	8001a18 <memchr>
 8001470:	b138      	cbz	r0, 8001482 <_vfiprintf_r+0x17a>
 8001472:	2240      	movs	r2, #64	; 0x40
 8001474:	9b04      	ldr	r3, [sp, #16]
 8001476:	eba0 000a 	sub.w	r0, r0, sl
 800147a:	4082      	lsls	r2, r0
 800147c:	4313      	orrs	r3, r2
 800147e:	3401      	adds	r4, #1
 8001480:	9304      	str	r3, [sp, #16]
 8001482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001486:	2206      	movs	r2, #6
 8001488:	4829      	ldr	r0, [pc, #164]	; (8001530 <_vfiprintf_r+0x228>)
 800148a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800148e:	f000 fac3 	bl	8001a18 <memchr>
 8001492:	2800      	cmp	r0, #0
 8001494:	d03f      	beq.n	8001516 <_vfiprintf_r+0x20e>
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <_vfiprintf_r+0x22c>)
 8001498:	bb1b      	cbnz	r3, 80014e2 <_vfiprintf_r+0x1da>
 800149a:	9b03      	ldr	r3, [sp, #12]
 800149c:	3307      	adds	r3, #7
 800149e:	f023 0307 	bic.w	r3, r3, #7
 80014a2:	3308      	adds	r3, #8
 80014a4:	9303      	str	r3, [sp, #12]
 80014a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014a8:	443b      	add	r3, r7
 80014aa:	9309      	str	r3, [sp, #36]	; 0x24
 80014ac:	e768      	b.n	8001380 <_vfiprintf_r+0x78>
 80014ae:	460c      	mov	r4, r1
 80014b0:	2001      	movs	r0, #1
 80014b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80014b6:	e7a6      	b.n	8001406 <_vfiprintf_r+0xfe>
 80014b8:	2300      	movs	r3, #0
 80014ba:	f04f 0c0a 	mov.w	ip, #10
 80014be:	4619      	mov	r1, r3
 80014c0:	3401      	adds	r4, #1
 80014c2:	9305      	str	r3, [sp, #20]
 80014c4:	4620      	mov	r0, r4
 80014c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014ca:	3a30      	subs	r2, #48	; 0x30
 80014cc:	2a09      	cmp	r2, #9
 80014ce:	d903      	bls.n	80014d8 <_vfiprintf_r+0x1d0>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0c6      	beq.n	8001462 <_vfiprintf_r+0x15a>
 80014d4:	9105      	str	r1, [sp, #20]
 80014d6:	e7c4      	b.n	8001462 <_vfiprintf_r+0x15a>
 80014d8:	4604      	mov	r4, r0
 80014da:	2301      	movs	r3, #1
 80014dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80014e0:	e7f0      	b.n	80014c4 <_vfiprintf_r+0x1bc>
 80014e2:	ab03      	add	r3, sp, #12
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	462a      	mov	r2, r5
 80014e8:	4630      	mov	r0, r6
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_vfiprintf_r+0x230>)
 80014ec:	a904      	add	r1, sp, #16
 80014ee:	f3af 8000 	nop.w
 80014f2:	4607      	mov	r7, r0
 80014f4:	1c78      	adds	r0, r7, #1
 80014f6:	d1d6      	bne.n	80014a6 <_vfiprintf_r+0x19e>
 80014f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014fa:	07d9      	lsls	r1, r3, #31
 80014fc:	d405      	bmi.n	800150a <_vfiprintf_r+0x202>
 80014fe:	89ab      	ldrh	r3, [r5, #12]
 8001500:	059a      	lsls	r2, r3, #22
 8001502:	d402      	bmi.n	800150a <_vfiprintf_r+0x202>
 8001504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001506:	f7ff fce9 	bl	8000edc <__retarget_lock_release_recursive>
 800150a:	89ab      	ldrh	r3, [r5, #12]
 800150c:	065b      	lsls	r3, r3, #25
 800150e:	f53f af1d 	bmi.w	800134c <_vfiprintf_r+0x44>
 8001512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001514:	e71c      	b.n	8001350 <_vfiprintf_r+0x48>
 8001516:	ab03      	add	r3, sp, #12
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	462a      	mov	r2, r5
 800151c:	4630      	mov	r0, r6
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <_vfiprintf_r+0x230>)
 8001520:	a904      	add	r1, sp, #16
 8001522:	f000 f87d 	bl	8001620 <_printf_i>
 8001526:	e7e4      	b.n	80014f2 <_vfiprintf_r+0x1ea>
 8001528:	08001d57 	.word	0x08001d57
 800152c:	08001d5d 	.word	0x08001d5d
 8001530:	08001d61 	.word	0x08001d61
 8001534:	00000000 	.word	0x00000000
 8001538:	080012e5 	.word	0x080012e5

0800153c <_printf_common>:
 800153c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001540:	4616      	mov	r6, r2
 8001542:	4699      	mov	r9, r3
 8001544:	688a      	ldr	r2, [r1, #8]
 8001546:	690b      	ldr	r3, [r1, #16]
 8001548:	4607      	mov	r7, r0
 800154a:	4293      	cmp	r3, r2
 800154c:	bfb8      	it	lt
 800154e:	4613      	movlt	r3, r2
 8001550:	6033      	str	r3, [r6, #0]
 8001552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001556:	460c      	mov	r4, r1
 8001558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800155c:	b10a      	cbz	r2, 8001562 <_printf_common+0x26>
 800155e:	3301      	adds	r3, #1
 8001560:	6033      	str	r3, [r6, #0]
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	0699      	lsls	r1, r3, #26
 8001566:	bf42      	ittt	mi
 8001568:	6833      	ldrmi	r3, [r6, #0]
 800156a:	3302      	addmi	r3, #2
 800156c:	6033      	strmi	r3, [r6, #0]
 800156e:	6825      	ldr	r5, [r4, #0]
 8001570:	f015 0506 	ands.w	r5, r5, #6
 8001574:	d106      	bne.n	8001584 <_printf_common+0x48>
 8001576:	f104 0a19 	add.w	sl, r4, #25
 800157a:	68e3      	ldr	r3, [r4, #12]
 800157c:	6832      	ldr	r2, [r6, #0]
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	42ab      	cmp	r3, r5
 8001582:	dc2b      	bgt.n	80015dc <_printf_common+0xa0>
 8001584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001588:	1e13      	subs	r3, r2, #0
 800158a:	6822      	ldr	r2, [r4, #0]
 800158c:	bf18      	it	ne
 800158e:	2301      	movne	r3, #1
 8001590:	0692      	lsls	r2, r2, #26
 8001592:	d430      	bmi.n	80015f6 <_printf_common+0xba>
 8001594:	4649      	mov	r1, r9
 8001596:	4638      	mov	r0, r7
 8001598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800159c:	47c0      	blx	r8
 800159e:	3001      	adds	r0, #1
 80015a0:	d023      	beq.n	80015ea <_printf_common+0xae>
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	6922      	ldr	r2, [r4, #16]
 80015a6:	f003 0306 	and.w	r3, r3, #6
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf14      	ite	ne
 80015ae:	2500      	movne	r5, #0
 80015b0:	6833      	ldreq	r3, [r6, #0]
 80015b2:	f04f 0600 	mov.w	r6, #0
 80015b6:	bf08      	it	eq
 80015b8:	68e5      	ldreq	r5, [r4, #12]
 80015ba:	f104 041a 	add.w	r4, r4, #26
 80015be:	bf08      	it	eq
 80015c0:	1aed      	subeq	r5, r5, r3
 80015c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80015c6:	bf08      	it	eq
 80015c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bfc4      	itt	gt
 80015d0:	1a9b      	subgt	r3, r3, r2
 80015d2:	18ed      	addgt	r5, r5, r3
 80015d4:	42b5      	cmp	r5, r6
 80015d6:	d11a      	bne.n	800160e <_printf_common+0xd2>
 80015d8:	2000      	movs	r0, #0
 80015da:	e008      	b.n	80015ee <_printf_common+0xb2>
 80015dc:	2301      	movs	r3, #1
 80015de:	4652      	mov	r2, sl
 80015e0:	4649      	mov	r1, r9
 80015e2:	4638      	mov	r0, r7
 80015e4:	47c0      	blx	r8
 80015e6:	3001      	adds	r0, #1
 80015e8:	d103      	bne.n	80015f2 <_printf_common+0xb6>
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295
 80015ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015f2:	3501      	adds	r5, #1
 80015f4:	e7c1      	b.n	800157a <_printf_common+0x3e>
 80015f6:	2030      	movs	r0, #48	; 0x30
 80015f8:	18e1      	adds	r1, r4, r3
 80015fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001604:	4422      	add	r2, r4
 8001606:	3302      	adds	r3, #2
 8001608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800160c:	e7c2      	b.n	8001594 <_printf_common+0x58>
 800160e:	2301      	movs	r3, #1
 8001610:	4622      	mov	r2, r4
 8001612:	4649      	mov	r1, r9
 8001614:	4638      	mov	r0, r7
 8001616:	47c0      	blx	r8
 8001618:	3001      	adds	r0, #1
 800161a:	d0e6      	beq.n	80015ea <_printf_common+0xae>
 800161c:	3601      	adds	r6, #1
 800161e:	e7d9      	b.n	80015d4 <_printf_common+0x98>

08001620 <_printf_i>:
 8001620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001624:	7e0f      	ldrb	r7, [r1, #24]
 8001626:	4691      	mov	r9, r2
 8001628:	2f78      	cmp	r7, #120	; 0x78
 800162a:	4680      	mov	r8, r0
 800162c:	460c      	mov	r4, r1
 800162e:	469a      	mov	sl, r3
 8001630:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001636:	d807      	bhi.n	8001648 <_printf_i+0x28>
 8001638:	2f62      	cmp	r7, #98	; 0x62
 800163a:	d80a      	bhi.n	8001652 <_printf_i+0x32>
 800163c:	2f00      	cmp	r7, #0
 800163e:	f000 80d5 	beq.w	80017ec <_printf_i+0x1cc>
 8001642:	2f58      	cmp	r7, #88	; 0x58
 8001644:	f000 80c1 	beq.w	80017ca <_printf_i+0x1aa>
 8001648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800164c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001650:	e03a      	b.n	80016c8 <_printf_i+0xa8>
 8001652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001656:	2b15      	cmp	r3, #21
 8001658:	d8f6      	bhi.n	8001648 <_printf_i+0x28>
 800165a:	a101      	add	r1, pc, #4	; (adr r1, 8001660 <_printf_i+0x40>)
 800165c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001660:	080016b9 	.word	0x080016b9
 8001664:	080016cd 	.word	0x080016cd
 8001668:	08001649 	.word	0x08001649
 800166c:	08001649 	.word	0x08001649
 8001670:	08001649 	.word	0x08001649
 8001674:	08001649 	.word	0x08001649
 8001678:	080016cd 	.word	0x080016cd
 800167c:	08001649 	.word	0x08001649
 8001680:	08001649 	.word	0x08001649
 8001684:	08001649 	.word	0x08001649
 8001688:	08001649 	.word	0x08001649
 800168c:	080017d3 	.word	0x080017d3
 8001690:	080016f9 	.word	0x080016f9
 8001694:	0800178d 	.word	0x0800178d
 8001698:	08001649 	.word	0x08001649
 800169c:	08001649 	.word	0x08001649
 80016a0:	080017f5 	.word	0x080017f5
 80016a4:	08001649 	.word	0x08001649
 80016a8:	080016f9 	.word	0x080016f9
 80016ac:	08001649 	.word	0x08001649
 80016b0:	08001649 	.word	0x08001649
 80016b4:	08001795 	.word	0x08001795
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	1d1a      	adds	r2, r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	602a      	str	r2, [r5, #0]
 80016c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0a0      	b.n	800180e <_printf_i+0x1ee>
 80016cc:	6820      	ldr	r0, [r4, #0]
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	0607      	lsls	r7, r0, #24
 80016d2:	f103 0104 	add.w	r1, r3, #4
 80016d6:	6029      	str	r1, [r5, #0]
 80016d8:	d501      	bpl.n	80016de <_printf_i+0xbe>
 80016da:	681e      	ldr	r6, [r3, #0]
 80016dc:	e003      	b.n	80016e6 <_printf_i+0xc6>
 80016de:	0646      	lsls	r6, r0, #25
 80016e0:	d5fb      	bpl.n	80016da <_printf_i+0xba>
 80016e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80016e6:	2e00      	cmp	r6, #0
 80016e8:	da03      	bge.n	80016f2 <_printf_i+0xd2>
 80016ea:	232d      	movs	r3, #45	; 0x2d
 80016ec:	4276      	negs	r6, r6
 80016ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016f2:	230a      	movs	r3, #10
 80016f4:	4859      	ldr	r0, [pc, #356]	; (800185c <_printf_i+0x23c>)
 80016f6:	e012      	b.n	800171e <_printf_i+0xfe>
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	6820      	ldr	r0, [r4, #0]
 80016fc:	1d19      	adds	r1, r3, #4
 80016fe:	6029      	str	r1, [r5, #0]
 8001700:	0605      	lsls	r5, r0, #24
 8001702:	d501      	bpl.n	8001708 <_printf_i+0xe8>
 8001704:	681e      	ldr	r6, [r3, #0]
 8001706:	e002      	b.n	800170e <_printf_i+0xee>
 8001708:	0641      	lsls	r1, r0, #25
 800170a:	d5fb      	bpl.n	8001704 <_printf_i+0xe4>
 800170c:	881e      	ldrh	r6, [r3, #0]
 800170e:	2f6f      	cmp	r7, #111	; 0x6f
 8001710:	bf0c      	ite	eq
 8001712:	2308      	moveq	r3, #8
 8001714:	230a      	movne	r3, #10
 8001716:	4851      	ldr	r0, [pc, #324]	; (800185c <_printf_i+0x23c>)
 8001718:	2100      	movs	r1, #0
 800171a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800171e:	6865      	ldr	r5, [r4, #4]
 8001720:	2d00      	cmp	r5, #0
 8001722:	bfa8      	it	ge
 8001724:	6821      	ldrge	r1, [r4, #0]
 8001726:	60a5      	str	r5, [r4, #8]
 8001728:	bfa4      	itt	ge
 800172a:	f021 0104 	bicge.w	r1, r1, #4
 800172e:	6021      	strge	r1, [r4, #0]
 8001730:	b90e      	cbnz	r6, 8001736 <_printf_i+0x116>
 8001732:	2d00      	cmp	r5, #0
 8001734:	d04b      	beq.n	80017ce <_printf_i+0x1ae>
 8001736:	4615      	mov	r5, r2
 8001738:	fbb6 f1f3 	udiv	r1, r6, r3
 800173c:	fb03 6711 	mls	r7, r3, r1, r6
 8001740:	5dc7      	ldrb	r7, [r0, r7]
 8001742:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001746:	4637      	mov	r7, r6
 8001748:	42bb      	cmp	r3, r7
 800174a:	460e      	mov	r6, r1
 800174c:	d9f4      	bls.n	8001738 <_printf_i+0x118>
 800174e:	2b08      	cmp	r3, #8
 8001750:	d10b      	bne.n	800176a <_printf_i+0x14a>
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	07de      	lsls	r6, r3, #31
 8001756:	d508      	bpl.n	800176a <_printf_i+0x14a>
 8001758:	6923      	ldr	r3, [r4, #16]
 800175a:	6861      	ldr	r1, [r4, #4]
 800175c:	4299      	cmp	r1, r3
 800175e:	bfde      	ittt	le
 8001760:	2330      	movle	r3, #48	; 0x30
 8001762:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001766:	f105 35ff 	addle.w	r5, r5, #4294967295
 800176a:	1b52      	subs	r2, r2, r5
 800176c:	6122      	str	r2, [r4, #16]
 800176e:	464b      	mov	r3, r9
 8001770:	4621      	mov	r1, r4
 8001772:	4640      	mov	r0, r8
 8001774:	f8cd a000 	str.w	sl, [sp]
 8001778:	aa03      	add	r2, sp, #12
 800177a:	f7ff fedf 	bl	800153c <_printf_common>
 800177e:	3001      	adds	r0, #1
 8001780:	d14a      	bne.n	8001818 <_printf_i+0x1f8>
 8001782:	f04f 30ff 	mov.w	r0, #4294967295
 8001786:	b004      	add	sp, #16
 8001788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	6023      	str	r3, [r4, #0]
 8001794:	2778      	movs	r7, #120	; 0x78
 8001796:	4832      	ldr	r0, [pc, #200]	; (8001860 <_printf_i+0x240>)
 8001798:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	6829      	ldr	r1, [r5, #0]
 80017a0:	061f      	lsls	r7, r3, #24
 80017a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80017a6:	d402      	bmi.n	80017ae <_printf_i+0x18e>
 80017a8:	065f      	lsls	r7, r3, #25
 80017aa:	bf48      	it	mi
 80017ac:	b2b6      	uxthmi	r6, r6
 80017ae:	07df      	lsls	r7, r3, #31
 80017b0:	bf48      	it	mi
 80017b2:	f043 0320 	orrmi.w	r3, r3, #32
 80017b6:	6029      	str	r1, [r5, #0]
 80017b8:	bf48      	it	mi
 80017ba:	6023      	strmi	r3, [r4, #0]
 80017bc:	b91e      	cbnz	r6, 80017c6 <_printf_i+0x1a6>
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	f023 0320 	bic.w	r3, r3, #32
 80017c4:	6023      	str	r3, [r4, #0]
 80017c6:	2310      	movs	r3, #16
 80017c8:	e7a6      	b.n	8001718 <_printf_i+0xf8>
 80017ca:	4824      	ldr	r0, [pc, #144]	; (800185c <_printf_i+0x23c>)
 80017cc:	e7e4      	b.n	8001798 <_printf_i+0x178>
 80017ce:	4615      	mov	r5, r2
 80017d0:	e7bd      	b.n	800174e <_printf_i+0x12e>
 80017d2:	682b      	ldr	r3, [r5, #0]
 80017d4:	6826      	ldr	r6, [r4, #0]
 80017d6:	1d18      	adds	r0, r3, #4
 80017d8:	6961      	ldr	r1, [r4, #20]
 80017da:	6028      	str	r0, [r5, #0]
 80017dc:	0635      	lsls	r5, r6, #24
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	d501      	bpl.n	80017e6 <_printf_i+0x1c6>
 80017e2:	6019      	str	r1, [r3, #0]
 80017e4:	e002      	b.n	80017ec <_printf_i+0x1cc>
 80017e6:	0670      	lsls	r0, r6, #25
 80017e8:	d5fb      	bpl.n	80017e2 <_printf_i+0x1c2>
 80017ea:	8019      	strh	r1, [r3, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	4615      	mov	r5, r2
 80017f0:	6123      	str	r3, [r4, #16]
 80017f2:	e7bc      	b.n	800176e <_printf_i+0x14e>
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	2100      	movs	r1, #0
 80017f8:	1d1a      	adds	r2, r3, #4
 80017fa:	602a      	str	r2, [r5, #0]
 80017fc:	681d      	ldr	r5, [r3, #0]
 80017fe:	6862      	ldr	r2, [r4, #4]
 8001800:	4628      	mov	r0, r5
 8001802:	f000 f909 	bl	8001a18 <memchr>
 8001806:	b108      	cbz	r0, 800180c <_printf_i+0x1ec>
 8001808:	1b40      	subs	r0, r0, r5
 800180a:	6060      	str	r0, [r4, #4]
 800180c:	6863      	ldr	r3, [r4, #4]
 800180e:	6123      	str	r3, [r4, #16]
 8001810:	2300      	movs	r3, #0
 8001812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001816:	e7aa      	b.n	800176e <_printf_i+0x14e>
 8001818:	462a      	mov	r2, r5
 800181a:	4649      	mov	r1, r9
 800181c:	4640      	mov	r0, r8
 800181e:	6923      	ldr	r3, [r4, #16]
 8001820:	47d0      	blx	sl
 8001822:	3001      	adds	r0, #1
 8001824:	d0ad      	beq.n	8001782 <_printf_i+0x162>
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	079b      	lsls	r3, r3, #30
 800182a:	d413      	bmi.n	8001854 <_printf_i+0x234>
 800182c:	68e0      	ldr	r0, [r4, #12]
 800182e:	9b03      	ldr	r3, [sp, #12]
 8001830:	4298      	cmp	r0, r3
 8001832:	bfb8      	it	lt
 8001834:	4618      	movlt	r0, r3
 8001836:	e7a6      	b.n	8001786 <_printf_i+0x166>
 8001838:	2301      	movs	r3, #1
 800183a:	4632      	mov	r2, r6
 800183c:	4649      	mov	r1, r9
 800183e:	4640      	mov	r0, r8
 8001840:	47d0      	blx	sl
 8001842:	3001      	adds	r0, #1
 8001844:	d09d      	beq.n	8001782 <_printf_i+0x162>
 8001846:	3501      	adds	r5, #1
 8001848:	68e3      	ldr	r3, [r4, #12]
 800184a:	9903      	ldr	r1, [sp, #12]
 800184c:	1a5b      	subs	r3, r3, r1
 800184e:	42ab      	cmp	r3, r5
 8001850:	dcf2      	bgt.n	8001838 <_printf_i+0x218>
 8001852:	e7eb      	b.n	800182c <_printf_i+0x20c>
 8001854:	2500      	movs	r5, #0
 8001856:	f104 0619 	add.w	r6, r4, #25
 800185a:	e7f5      	b.n	8001848 <_printf_i+0x228>
 800185c:	08001d68 	.word	0x08001d68
 8001860:	08001d79 	.word	0x08001d79

08001864 <__swbuf_r>:
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	460e      	mov	r6, r1
 8001868:	4614      	mov	r4, r2
 800186a:	4605      	mov	r5, r0
 800186c:	b118      	cbz	r0, 8001876 <__swbuf_r+0x12>
 800186e:	6a03      	ldr	r3, [r0, #32]
 8001870:	b90b      	cbnz	r3, 8001876 <__swbuf_r+0x12>
 8001872:	f7ff f9d1 	bl	8000c18 <__sinit>
 8001876:	69a3      	ldr	r3, [r4, #24]
 8001878:	60a3      	str	r3, [r4, #8]
 800187a:	89a3      	ldrh	r3, [r4, #12]
 800187c:	071a      	lsls	r2, r3, #28
 800187e:	d525      	bpl.n	80018cc <__swbuf_r+0x68>
 8001880:	6923      	ldr	r3, [r4, #16]
 8001882:	b31b      	cbz	r3, 80018cc <__swbuf_r+0x68>
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	6922      	ldr	r2, [r4, #16]
 8001888:	b2f6      	uxtb	r6, r6
 800188a:	1a98      	subs	r0, r3, r2
 800188c:	6963      	ldr	r3, [r4, #20]
 800188e:	4637      	mov	r7, r6
 8001890:	4283      	cmp	r3, r0
 8001892:	dc04      	bgt.n	800189e <__swbuf_r+0x3a>
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f7ff fcbe 	bl	8001218 <_fflush_r>
 800189c:	b9e0      	cbnz	r0, 80018d8 <__swbuf_r+0x74>
 800189e:	68a3      	ldr	r3, [r4, #8]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60a3      	str	r3, [r4, #8]
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	6022      	str	r2, [r4, #0]
 80018aa:	701e      	strb	r6, [r3, #0]
 80018ac:	6962      	ldr	r2, [r4, #20]
 80018ae:	1c43      	adds	r3, r0, #1
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d004      	beq.n	80018be <__swbuf_r+0x5a>
 80018b4:	89a3      	ldrh	r3, [r4, #12]
 80018b6:	07db      	lsls	r3, r3, #31
 80018b8:	d506      	bpl.n	80018c8 <__swbuf_r+0x64>
 80018ba:	2e0a      	cmp	r6, #10
 80018bc:	d104      	bne.n	80018c8 <__swbuf_r+0x64>
 80018be:	4621      	mov	r1, r4
 80018c0:	4628      	mov	r0, r5
 80018c2:	f7ff fca9 	bl	8001218 <_fflush_r>
 80018c6:	b938      	cbnz	r0, 80018d8 <__swbuf_r+0x74>
 80018c8:	4638      	mov	r0, r7
 80018ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018cc:	4621      	mov	r1, r4
 80018ce:	4628      	mov	r0, r5
 80018d0:	f000 f806 	bl	80018e0 <__swsetup_r>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d0d5      	beq.n	8001884 <__swbuf_r+0x20>
 80018d8:	f04f 37ff 	mov.w	r7, #4294967295
 80018dc:	e7f4      	b.n	80018c8 <__swbuf_r+0x64>
	...

080018e0 <__swsetup_r>:
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <__swsetup_r+0xac>)
 80018e4:	4605      	mov	r5, r0
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	460c      	mov	r4, r1
 80018ea:	b118      	cbz	r0, 80018f4 <__swsetup_r+0x14>
 80018ec:	6a03      	ldr	r3, [r0, #32]
 80018ee:	b90b      	cbnz	r3, 80018f4 <__swsetup_r+0x14>
 80018f0:	f7ff f992 	bl	8000c18 <__sinit>
 80018f4:	89a3      	ldrh	r3, [r4, #12]
 80018f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018fa:	0718      	lsls	r0, r3, #28
 80018fc:	d422      	bmi.n	8001944 <__swsetup_r+0x64>
 80018fe:	06d9      	lsls	r1, r3, #27
 8001900:	d407      	bmi.n	8001912 <__swsetup_r+0x32>
 8001902:	2309      	movs	r3, #9
 8001904:	602b      	str	r3, [r5, #0]
 8001906:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	81a3      	strh	r3, [r4, #12]
 8001910:	e034      	b.n	800197c <__swsetup_r+0x9c>
 8001912:	0758      	lsls	r0, r3, #29
 8001914:	d512      	bpl.n	800193c <__swsetup_r+0x5c>
 8001916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001918:	b141      	cbz	r1, 800192c <__swsetup_r+0x4c>
 800191a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800191e:	4299      	cmp	r1, r3
 8001920:	d002      	beq.n	8001928 <__swsetup_r+0x48>
 8001922:	4628      	mov	r0, r5
 8001924:	f7ff fafa 	bl	8000f1c <_free_r>
 8001928:	2300      	movs	r3, #0
 800192a:	6363      	str	r3, [r4, #52]	; 0x34
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001932:	81a3      	strh	r3, [r4, #12]
 8001934:	2300      	movs	r3, #0
 8001936:	6063      	str	r3, [r4, #4]
 8001938:	6923      	ldr	r3, [r4, #16]
 800193a:	6023      	str	r3, [r4, #0]
 800193c:	89a3      	ldrh	r3, [r4, #12]
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	81a3      	strh	r3, [r4, #12]
 8001944:	6923      	ldr	r3, [r4, #16]
 8001946:	b94b      	cbnz	r3, 800195c <__swsetup_r+0x7c>
 8001948:	89a3      	ldrh	r3, [r4, #12]
 800194a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800194e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001952:	d003      	beq.n	800195c <__swsetup_r+0x7c>
 8001954:	4621      	mov	r1, r4
 8001956:	4628      	mov	r0, r5
 8001958:	f000 f891 	bl	8001a7e <__smakebuf_r>
 800195c:	89a0      	ldrh	r0, [r4, #12]
 800195e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001962:	f010 0301 	ands.w	r3, r0, #1
 8001966:	d00a      	beq.n	800197e <__swsetup_r+0x9e>
 8001968:	2300      	movs	r3, #0
 800196a:	60a3      	str	r3, [r4, #8]
 800196c:	6963      	ldr	r3, [r4, #20]
 800196e:	425b      	negs	r3, r3
 8001970:	61a3      	str	r3, [r4, #24]
 8001972:	6923      	ldr	r3, [r4, #16]
 8001974:	b943      	cbnz	r3, 8001988 <__swsetup_r+0xa8>
 8001976:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800197a:	d1c4      	bne.n	8001906 <__swsetup_r+0x26>
 800197c:	bd38      	pop	{r3, r4, r5, pc}
 800197e:	0781      	lsls	r1, r0, #30
 8001980:	bf58      	it	pl
 8001982:	6963      	ldrpl	r3, [r4, #20]
 8001984:	60a3      	str	r3, [r4, #8]
 8001986:	e7f4      	b.n	8001972 <__swsetup_r+0x92>
 8001988:	2000      	movs	r0, #0
 800198a:	e7f7      	b.n	800197c <__swsetup_r+0x9c>
 800198c:	20000058 	.word	0x20000058

08001990 <_raise_r>:
 8001990:	291f      	cmp	r1, #31
 8001992:	b538      	push	{r3, r4, r5, lr}
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1
 8001998:	d904      	bls.n	80019a4 <_raise_r+0x14>
 800199a:	2316      	movs	r3, #22
 800199c:	6003      	str	r3, [r0, #0]
 800199e:	f04f 30ff 	mov.w	r0, #4294967295
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80019a6:	b112      	cbz	r2, 80019ae <_raise_r+0x1e>
 80019a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80019ac:	b94b      	cbnz	r3, 80019c2 <_raise_r+0x32>
 80019ae:	4620      	mov	r0, r4
 80019b0:	f000 f830 	bl	8001a14 <_getpid_r>
 80019b4:	462a      	mov	r2, r5
 80019b6:	4601      	mov	r1, r0
 80019b8:	4620      	mov	r0, r4
 80019ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019be:	f000 b817 	b.w	80019f0 <_kill_r>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d00a      	beq.n	80019dc <_raise_r+0x4c>
 80019c6:	1c59      	adds	r1, r3, #1
 80019c8:	d103      	bne.n	80019d2 <_raise_r+0x42>
 80019ca:	2316      	movs	r3, #22
 80019cc:	6003      	str	r3, [r0, #0]
 80019ce:	2001      	movs	r0, #1
 80019d0:	e7e7      	b.n	80019a2 <_raise_r+0x12>
 80019d2:	2400      	movs	r4, #0
 80019d4:	4628      	mov	r0, r5
 80019d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80019da:	4798      	blx	r3
 80019dc:	2000      	movs	r0, #0
 80019de:	e7e0      	b.n	80019a2 <_raise_r+0x12>

080019e0 <raise>:
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <raise+0xc>)
 80019e2:	4601      	mov	r1, r0
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f7ff bfd3 	b.w	8001990 <_raise_r>
 80019ea:	bf00      	nop
 80019ec:	20000058 	.word	0x20000058

080019f0 <_kill_r>:
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	2300      	movs	r3, #0
 80019f4:	4d06      	ldr	r5, [pc, #24]	; (8001a10 <_kill_r+0x20>)
 80019f6:	4604      	mov	r4, r0
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	602b      	str	r3, [r5, #0]
 80019fe:	f7fe fdb0 	bl	8000562 <_kill>
 8001a02:	1c43      	adds	r3, r0, #1
 8001a04:	d102      	bne.n	8001a0c <_kill_r+0x1c>
 8001a06:	682b      	ldr	r3, [r5, #0]
 8001a08:	b103      	cbz	r3, 8001a0c <_kill_r+0x1c>
 8001a0a:	6023      	str	r3, [r4, #0]
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002f8 	.word	0x200002f8

08001a14 <_getpid_r>:
 8001a14:	f7fe bd9e 	b.w	8000554 <_getpid>

08001a18 <memchr>:
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	b2c9      	uxtb	r1, r1
 8001a1e:	4402      	add	r2, r0
 8001a20:	4293      	cmp	r3, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	d101      	bne.n	8001a2a <memchr+0x12>
 8001a26:	2000      	movs	r0, #0
 8001a28:	e003      	b.n	8001a32 <memchr+0x1a>
 8001a2a:	7804      	ldrb	r4, [r0, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	428c      	cmp	r4, r1
 8001a30:	d1f6      	bne.n	8001a20 <memchr+0x8>
 8001a32:	bd10      	pop	{r4, pc}

08001a34 <__swhatbuf_r>:
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	460c      	mov	r4, r1
 8001a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a3c:	4615      	mov	r5, r2
 8001a3e:	2900      	cmp	r1, #0
 8001a40:	461e      	mov	r6, r3
 8001a42:	b096      	sub	sp, #88	; 0x58
 8001a44:	da0c      	bge.n	8001a60 <__swhatbuf_r+0x2c>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a4e:	bf0c      	ite	eq
 8001a50:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001a54:	2340      	movne	r3, #64	; 0x40
 8001a56:	2000      	movs	r0, #0
 8001a58:	6031      	str	r1, [r6, #0]
 8001a5a:	602b      	str	r3, [r5, #0]
 8001a5c:	b016      	add	sp, #88	; 0x58
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
 8001a60:	466a      	mov	r2, sp
 8001a62:	f000 f849 	bl	8001af8 <_fstat_r>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	dbed      	blt.n	8001a46 <__swhatbuf_r+0x12>
 8001a6a:	9901      	ldr	r1, [sp, #4]
 8001a6c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001a70:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001a74:	4259      	negs	r1, r3
 8001a76:	4159      	adcs	r1, r3
 8001a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7c:	e7eb      	b.n	8001a56 <__swhatbuf_r+0x22>

08001a7e <__smakebuf_r>:
 8001a7e:	898b      	ldrh	r3, [r1, #12]
 8001a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a82:	079d      	lsls	r5, r3, #30
 8001a84:	4606      	mov	r6, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	d507      	bpl.n	8001a9a <__smakebuf_r+0x1c>
 8001a8a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a8e:	6023      	str	r3, [r4, #0]
 8001a90:	6123      	str	r3, [r4, #16]
 8001a92:	2301      	movs	r3, #1
 8001a94:	6163      	str	r3, [r4, #20]
 8001a96:	b002      	add	sp, #8
 8001a98:	bd70      	pop	{r4, r5, r6, pc}
 8001a9a:	466a      	mov	r2, sp
 8001a9c:	ab01      	add	r3, sp, #4
 8001a9e:	f7ff ffc9 	bl	8001a34 <__swhatbuf_r>
 8001aa2:	9900      	ldr	r1, [sp, #0]
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f7ff faa8 	bl	8000ffc <_malloc_r>
 8001aac:	b948      	cbnz	r0, 8001ac2 <__smakebuf_r+0x44>
 8001aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ab2:	059a      	lsls	r2, r3, #22
 8001ab4:	d4ef      	bmi.n	8001a96 <__smakebuf_r+0x18>
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	81a3      	strh	r3, [r4, #12]
 8001ac0:	e7e3      	b.n	8001a8a <__smakebuf_r+0xc>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	6020      	str	r0, [r4, #0]
 8001ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aca:	81a3      	strh	r3, [r4, #12]
 8001acc:	9b00      	ldr	r3, [sp, #0]
 8001ace:	6120      	str	r0, [r4, #16]
 8001ad0:	6163      	str	r3, [r4, #20]
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	b15b      	cbz	r3, 8001aee <__smakebuf_r+0x70>
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001adc:	f000 f81e 	bl	8001b1c <_isatty_r>
 8001ae0:	b128      	cbz	r0, 8001aee <__smakebuf_r+0x70>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	f023 0303 	bic.w	r3, r3, #3
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	81a3      	strh	r3, [r4, #12]
 8001aee:	89a3      	ldrh	r3, [r4, #12]
 8001af0:	431d      	orrs	r5, r3
 8001af2:	81a5      	strh	r5, [r4, #12]
 8001af4:	e7cf      	b.n	8001a96 <__smakebuf_r+0x18>
	...

08001af8 <_fstat_r>:
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	2300      	movs	r3, #0
 8001afc:	4d06      	ldr	r5, [pc, #24]	; (8001b18 <_fstat_r+0x20>)
 8001afe:	4604      	mov	r4, r0
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	602b      	str	r3, [r5, #0]
 8001b06:	f7fe fd8a 	bl	800061e <_fstat>
 8001b0a:	1c43      	adds	r3, r0, #1
 8001b0c:	d102      	bne.n	8001b14 <_fstat_r+0x1c>
 8001b0e:	682b      	ldr	r3, [r5, #0]
 8001b10:	b103      	cbz	r3, 8001b14 <_fstat_r+0x1c>
 8001b12:	6023      	str	r3, [r4, #0]
 8001b14:	bd38      	pop	{r3, r4, r5, pc}
 8001b16:	bf00      	nop
 8001b18:	200002f8 	.word	0x200002f8

08001b1c <_isatty_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4d05      	ldr	r5, [pc, #20]	; (8001b38 <_isatty_r+0x1c>)
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	602b      	str	r3, [r5, #0]
 8001b28:	f7fe fd88 	bl	800063c <_isatty>
 8001b2c:	1c43      	adds	r3, r0, #1
 8001b2e:	d102      	bne.n	8001b36 <_isatty_r+0x1a>
 8001b30:	682b      	ldr	r3, [r5, #0]
 8001b32:	b103      	cbz	r3, 8001b36 <_isatty_r+0x1a>
 8001b34:	6023      	str	r3, [r4, #0]
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	200002f8 	.word	0x200002f8

08001b3c <_init>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	bf00      	nop
 8001b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b42:	bc08      	pop	{r3}
 8001b44:	469e      	mov	lr, r3
 8001b46:	4770      	bx	lr

08001b48 <_fini>:
 8001b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4a:	bf00      	nop
 8001b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4e:	bc08      	pop	{r3}
 8001b50:	469e      	mov	lr, r3
 8001b52:	4770      	bx	lr
