
IoT_Coding_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019c4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08001af4  08001af4  00011af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d2c  08001d2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d2c  08001d2c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d2c  08001d2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d2c  08001d2c  00011d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d30  08001d30  00011d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001d90  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001d90  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018b6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008e5  00000000  00000000  0002197e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00022268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016e  00000000  00000000  00022480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c27  00000000  00000000  000225ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f9f  00000000  00000000  00034215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00058bff  00000000  00000000  000371b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010ec  00000000  00000000  0008fdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00090ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001adc 	.word	0x08001adc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001adc 	.word	0x08001adc

08000170 <isStringAllDigits>:
#include "command_parser.h"

int isStringAllDigits(const char *str) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000178:	e00c      	b.n	8000194 <isStringAllDigits+0x24>
        if (*str < '0' || *str > '9') {
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b2f      	cmp	r3, #47	; 0x2f
 8000180:	d903      	bls.n	800018a <isStringAllDigits+0x1a>
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b39      	cmp	r3, #57	; 0x39
 8000188:	d901      	bls.n	800018e <isStringAllDigits+0x1e>
            return 1; // Not all characters are digits
 800018a:	2301      	movs	r3, #1
 800018c:	e007      	b.n	800019e <isStringAllDigits+0x2e>
        }
        str++;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3301      	adds	r3, #1
 8000192:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d1ee      	bne.n	800017a <isStringAllDigits+0xa>
    }
    return 0; // All characters are digits
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <call_echo>:

uint8_t call_echo(char *str, uint16_t len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	460b      	mov	r3, r1
 80001b2:	807b      	strh	r3, [r7, #2]

	char *arr;
	uint8_t chr_count;

	arr = strtok(str, " ");
 80001b4:	4919      	ldr	r1, [pc, #100]	; (800021c <call_echo+0x74>)
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	f000 fd92 	bl	8000ce0 <strtok>
 80001bc:	60f8      	str	r0, [r7, #12]
	arr = strtok(NULL, ",");
 80001be:	4918      	ldr	r1, [pc, #96]	; (8000220 <call_echo+0x78>)
 80001c0:	2000      	movs	r0, #0
 80001c2:	f000 fd8d 	bl	8000ce0 <strtok>
 80001c6:	60f8      	str	r0, [r7, #12]

	if(isStringAllDigits(arr)){
 80001c8:	68f8      	ldr	r0, [r7, #12]
 80001ca:	f7ff ffd1 	bl	8000170 <isStringAllDigits>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <call_echo+0x30>
		return 1;
 80001d4:	2301      	movs	r3, #1
 80001d6:	e01c      	b.n	8000212 <call_echo+0x6a>
	}

	chr_count = atoi(arr);
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	f000 fbd4 	bl	8000986 <atoi>
 80001de:	4603      	mov	r3, r0
 80001e0:	72fb      	strb	r3, [r7, #11]

	if(chr_count < 0 || chr_count >= 300){
		return 1;
	}

	arr = strtok(NULL, "\r");
 80001e2:	4910      	ldr	r1, [pc, #64]	; (8000224 <call_echo+0x7c>)
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 fd7b 	bl	8000ce0 <strtok>
 80001ea:	60f8      	str	r0, [r7, #12]

	write_str("data: ", 6);
 80001ec:	2106      	movs	r1, #6
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <call_echo+0x80>)
 80001f0:	f000 fb80 	bl	80008f4 <write_str>
	if(chr_count != 0){
 80001f4:	7afb      	ldrb	r3, [r7, #11]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d006      	beq.n	8000208 <call_echo+0x60>
		write_str(arr, len-9);
 80001fa:	887b      	ldrh	r3, [r7, #2]
 80001fc:	3b09      	subs	r3, #9
 80001fe:	b29b      	uxth	r3, r3
 8000200:	4619      	mov	r1, r3
 8000202:	68f8      	ldr	r0, [r7, #12]
 8000204:	f000 fb76 	bl	80008f4 <write_str>
	}
	write_str("\r\n", 2);
 8000208:	2102      	movs	r1, #2
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <call_echo+0x84>)
 800020c:	f000 fb72 	bl	80008f4 <write_str>

	return 0;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	08001af4 	.word	0x08001af4
 8000220:	08001af8 	.word	0x08001af8
 8000224:	08001afc 	.word	0x08001afc
 8000228:	08001b00 	.word	0x08001b00
 800022c:	08001b08 	.word	0x08001b08

08000230 <call_set_led>:

uint8_t call_set_led(char *str){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

	char *arr;
	uint8_t led_id;
	uint16_t time_ms;

	arr = strtok(str, " ");
 8000238:	4922      	ldr	r1, [pc, #136]	; (80002c4 <call_set_led+0x94>)
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 fd50 	bl	8000ce0 <strtok>
 8000240:	60f8      	str	r0, [r7, #12]
	arr = strtok(NULL, ",");
 8000242:	4921      	ldr	r1, [pc, #132]	; (80002c8 <call_set_led+0x98>)
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fd4b 	bl	8000ce0 <strtok>
 800024a:	60f8      	str	r0, [r7, #12]

	if(isStringAllDigits(arr)){
 800024c:	68f8      	ldr	r0, [r7, #12]
 800024e:	f7ff ff8f 	bl	8000170 <isStringAllDigits>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <call_set_led+0x2c>
		return 1;
 8000258:	2301      	movs	r3, #1
 800025a:	e02f      	b.n	80002bc <call_set_led+0x8c>
	}

	led_id = atoi(arr);
 800025c:	68f8      	ldr	r0, [r7, #12]
 800025e:	f000 fb92 	bl	8000986 <atoi>
 8000262:	4603      	mov	r3, r0
 8000264:	72fb      	strb	r3, [r7, #11]

	if(led_id != 0 && led_id != 1){
 8000266:	7afb      	ldrb	r3, [r7, #11]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d004      	beq.n	8000276 <call_set_led+0x46>
 800026c:	7afb      	ldrb	r3, [r7, #11]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d001      	beq.n	8000276 <call_set_led+0x46>
		return 1;
 8000272:	2301      	movs	r3, #1
 8000274:	e022      	b.n	80002bc <call_set_led+0x8c>
	}

	arr = strtok(NULL, "\r");
 8000276:	4915      	ldr	r1, [pc, #84]	; (80002cc <call_set_led+0x9c>)
 8000278:	2000      	movs	r0, #0
 800027a:	f000 fd31 	bl	8000ce0 <strtok>
 800027e:	60f8      	str	r0, [r7, #12]

	if(isStringAllDigits(arr)){
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f7ff ff75 	bl	8000170 <isStringAllDigits>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <call_set_led+0x60>
		return 1;
 800028c:	2301      	movs	r3, #1
 800028e:	e015      	b.n	80002bc <call_set_led+0x8c>
	}

	time_ms = atoi(arr);
 8000290:	68f8      	ldr	r0, [r7, #12]
 8000292:	f000 fb78 	bl	8000986 <atoi>
 8000296:	4603      	mov	r3, r0
 8000298:	813b      	strh	r3, [r7, #8]

	if(time_ms < 1 || time_ms >= 5000){
 800029a:	893b      	ldrh	r3, [r7, #8]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d004      	beq.n	80002aa <call_set_led+0x7a>
 80002a0:	893b      	ldrh	r3, [r7, #8]
 80002a2:	f241 3287 	movw	r2, #4999	; 0x1387
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d901      	bls.n	80002ae <call_set_led+0x7e>
		return 1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	e006      	b.n	80002bc <call_set_led+0x8c>
	}

	led_on(led_id, time_ms);
 80002ae:	893a      	ldrh	r2, [r7, #8]
 80002b0:	7afb      	ldrb	r3, [r7, #11]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f8ab 	bl	8000410 <led_on>

	return 0;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	08001af4 	.word	0x08001af4
 80002c8:	08001af8 	.word	0x08001af8
 80002cc:	08001afc 	.word	0x08001afc

080002d0 <write_error>:

void write_error(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	write_str("ERROR\r\n", 7);
 80002d4:	2107      	movs	r1, #7
 80002d6:	4802      	ldr	r0, [pc, #8]	; (80002e0 <write_error+0x10>)
 80002d8:	f000 fb0c 	bl	80008f4 <write_str>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	08001b0c 	.word	0x08001b0c

080002e4 <write_ok>:

void write_ok(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	write_str("OK\r\n", 4);
 80002e8:	2104      	movs	r1, #4
 80002ea:	4802      	ldr	r0, [pc, #8]	; (80002f4 <write_ok+0x10>)
 80002ec:	f000 fb02 	bl	80008f4 <write_str>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	08001b14 	.word	0x08001b14

080002f8 <parse_string>:

void parse_string(char *str, uint16_t len){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	807b      	strh	r3, [r7, #2]
//	uint8_t delim = 0;
//	while(!(str[delim]==' '||delim==len||delim>7)){
//		delim++;
//	}

	if(!strncmp(str, "echo", 4)){
 8000304:	2204      	movs	r2, #4
 8000306:	4917      	ldr	r1, [pc, #92]	; (8000364 <parse_string+0x6c>)
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f000 fcd6 	bl	8000cba <strncmp>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d10d      	bne.n	8000330 <parse_string+0x38>
		if(call_echo(str, len)){
 8000314:	887b      	ldrh	r3, [r7, #2]
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff45 	bl	80001a8 <call_echo>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d002      	beq.n	800032a <parse_string+0x32>
			write_error();
 8000324:	f7ff ffd4 	bl	80002d0 <write_error>
		}else{
			write_ok();
		}
		return;
 8000328:	e018      	b.n	800035c <parse_string+0x64>
			write_ok();
 800032a:	f7ff ffdb 	bl	80002e4 <write_ok>
		return;
 800032e:	e015      	b.n	800035c <parse_string+0x64>
	}

	if(!strncmp(str, "set-led", 7)){
 8000330:	2207      	movs	r2, #7
 8000332:	490d      	ldr	r1, [pc, #52]	; (8000368 <parse_string+0x70>)
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 fcc0 	bl	8000cba <strncmp>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d10b      	bne.n	8000358 <parse_string+0x60>
		if(call_set_led(str)){
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ff75 	bl	8000230 <call_set_led>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <parse_string+0x5a>
			write_error();
 800034c:	f7ff ffc0 	bl	80002d0 <write_error>
		}else{
			write_ok();
		}
		return;
 8000350:	e004      	b.n	800035c <parse_string+0x64>
			write_ok();
 8000352:	f7ff ffc7 	bl	80002e4 <write_ok>
		return;
 8000356:	e001      	b.n	800035c <parse_string+0x64>
	}

	write_error();
 8000358:	f7ff ffba 	bl	80002d0 <write_error>
//	while(!(str[delim]=='\r'||delim==len)){
//		delim++;
//	}
//	write_str(str, delim);

}
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	08001b1c 	.word	0x08001b1c
 8000368:	08001b24 	.word	0x08001b24

0800036c <led_init>:
#include "led.h"

void led_init(void){
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <led_init+0x48>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <led_init+0x48>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]

	GPIOA->CRH &=~ (3U << ((LED_PIN0-8)*4+2));//6
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <led_init+0x4c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <led_init+0x4c>)
 8000382:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000386:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (2U << ((LED_PIN0-8)*4));//4
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <led_init+0x4c>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <led_init+0x4c>)
 800038e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000392:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=~ (3U << ((LED_PIN1-8)*4+2));//10
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <led_init+0x4c>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <led_init+0x4c>)
 800039a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800039e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (2U << ((LED_PIN1-8)*4));//8
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <led_init+0x4c>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <led_init+0x4c>)
 80003a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003aa:	6053      	str	r3, [r2, #4]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800

080003bc <led_off>:

void led_off(uint8_t led_id){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	if (led_id == 0){
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d109      	bne.n	80003e0 <led_off+0x24>
		GPIOA->ODR &=~ (0x1UL << LED_PIN0);
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <led_off+0x48>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <led_off+0x48>)
 80003d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003d6:	60d3      	str	r3, [r2, #12]
		write_str("led_off: 0\r\n", 12);
 80003d8:	210c      	movs	r1, #12
 80003da:	480b      	ldr	r0, [pc, #44]	; (8000408 <led_off+0x4c>)
 80003dc:	f000 fa8a 	bl	80008f4 <write_str>
	}

	if (led_id == 1){
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d109      	bne.n	80003fa <led_off+0x3e>
		GPIOA->ODR &=~ (0x1UL << LED_PIN1);
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <led_off+0x48>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4a06      	ldr	r2, [pc, #24]	; (8000404 <led_off+0x48>)
 80003ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003f0:	60d3      	str	r3, [r2, #12]
		write_str("led_off: 1\r\n", 12);
 80003f2:	210c      	movs	r1, #12
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <led_off+0x50>)
 80003f6:	f000 fa7d 	bl	80008f4 <write_str>
	}
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010800 	.word	0x40010800
 8000408:	08001b2c 	.word	0x08001b2c
 800040c:	08001b3c 	.word	0x08001b3c

08000410 <led_on>:

void led_on(uint8_t led_id, uint16_t time_ms){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	460a      	mov	r2, r1
 800041a:	71fb      	strb	r3, [r7, #7]
 800041c:	4613      	mov	r3, r2
 800041e:	80bb      	strh	r3, [r7, #4]

	if (led_id == 0){
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d109      	bne.n	800043a <led_on+0x2a>
		GPIOA->ODR |= (0x1UL << LED_PIN0);
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <led_on+0x4c>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	4a0c      	ldr	r2, [pc, #48]	; (800045c <led_on+0x4c>)
 800042c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000430:	60d3      	str	r3, [r2, #12]
		tim2_start(time_ms);
 8000432:	88bb      	ldrh	r3, [r7, #4]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f947 	bl	80006c8 <tim2_start>
	}

	if (led_id == 1){
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d109      	bne.n	8000454 <led_on+0x44>
		GPIOA->ODR |= (0x1UL << LED_PIN1);
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <led_on+0x4c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a05      	ldr	r2, [pc, #20]	; (800045c <led_on+0x4c>)
 8000446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800044a:	60d3      	str	r3, [r2, #12]
		tim3_start(time_ms);
 800044c:	88bb      	ldrh	r3, [r7, #4]
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f990 	bl	8000774 <tim3_start>
	}
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40010800 	.word	0x40010800

08000460 <main>:





int main(void){
 8000460:	b580      	push	{r7, lr}
 8000462:	b0ce      	sub	sp, #312	; 0x138
 8000464:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000466:	f000 f9f3 	bl	8000850 <uart2_rxtx_init>
	led_init();
 800046a:	f7ff ff7f 	bl	800036c <led_init>

	char arr_rx[310];
	uint16_t arr_last = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136

	while(1){
		key = uart_read(USART2);
 8000474:	4814      	ldr	r0, [pc, #80]	; (80004c8 <main+0x68>)
 8000476:	f000 fa2a 	bl	80008ce <uart_read>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <main+0x6c>)
 8000480:	701a      	strb	r2, [r3, #0]
		arr_rx[arr_last] = key;
 8000482:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000486:	4a11      	ldr	r2, [pc, #68]	; (80004cc <main+0x6c>)
 8000488:	7811      	ldrb	r1, [r2, #0]
 800048a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800048e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000492:	54d1      	strb	r1, [r2, r3]
		arr_last++;
 8000494:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8000498:	3301      	adds	r3, #1
 800049a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		if(key=='\r'||arr_last==310){
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <main+0x6c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b0d      	cmp	r3, #13
 80004a4:	d004      	beq.n	80004b0 <main+0x50>
 80004a6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 80004aa:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80004ae:	d1e1      	bne.n	8000474 <main+0x14>

			parse_string(arr_rx, arr_last);
 80004b0:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 80004b4:	463b      	mov	r3, r7
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff1d 	bl	80002f8 <parse_string>

			arr_last = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
		key = uart_read(USART2);
 80004c4:	e7d6      	b.n	8000474 <main+0x14>
 80004c6:	bf00      	nop
 80004c8:	40004400 	.word	0x40004400
 80004cc:	20000078 	.word	0x20000078

080004d0 <TIM2_IRQHandler>:

	}
}


void TIM2_IRQHandler(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	TIM2->SR &=~ TIM_SR_UIF;
 80004d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d8:	691b      	ldr	r3, [r3, #16]
 80004da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6113      	str	r3, [r2, #16]
	led_off(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ff69 	bl	80003bc <led_off>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	TIM3->SR &=~ TIM_SR_UIF;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <TIM3_IRQHandler+0x1c>)
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <TIM3_IRQHandler+0x1c>)
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	6113      	str	r3, [r2, #16]
	led_off(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f7ff ff5b 	bl	80003bc <led_off>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40000400 	.word	0x40000400

08000510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  return 1;
 8000514:	2301      	movs	r3, #1
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <_kill>:

int _kill(int pid, int sig)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000528:	f000 fc7c 	bl	8000e24 <__errno>
 800052c:	4603      	mov	r3, r0
 800052e:	2216      	movs	r2, #22
 8000530:	601a      	str	r2, [r3, #0]
  return -1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_exit>:

void _exit (int status)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000546:	f04f 31ff 	mov.w	r1, #4294967295
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffe7 	bl	800051e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000550:	e7fe      	b.n	8000550 <_exit+0x12>

08000552 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e00a      	b.n	800057a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000564:	f3af 8000 	nop.w
 8000568:	4601      	mov	r1, r0
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	60ba      	str	r2, [r7, #8]
 8000570:	b2ca      	uxtb	r2, r1
 8000572:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	3301      	adds	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	429a      	cmp	r2, r3
 8000580:	dbf0      	blt.n	8000564 <_read+0x12>
  }

  return len;
 8000582:	687b      	ldr	r3, [r7, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	e009      	b.n	80005b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	60ba      	str	r2, [r7, #8]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	3301      	adds	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	dbf1      	blt.n	800059e <_write+0x12>
  }
  return len;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_close>:

int _close(int file)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ea:	605a      	str	r2, [r3, #4]
  return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <_isatty>:

int _isatty(int file)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000600:	2301      	movs	r3, #1
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <_sbrk+0x5c>)
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <_sbrk+0x60>)
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <_sbrk+0x64>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <_sbrk+0x68>)
 8000644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	693a      	ldr	r2, [r7, #16]
 8000650:	429a      	cmp	r2, r3
 8000652:	d207      	bcs.n	8000664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000654:	f000 fbe6 	bl	8000e24 <__errno>
 8000658:	4603      	mov	r3, r0
 800065a:	220c      	movs	r2, #12
 800065c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	e009      	b.n	8000678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <_sbrk+0x64>)
 8000674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000676:	68fb      	ldr	r3, [r7, #12]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20005000 	.word	0x20005000
 8000684:	00000400 	.word	0x00000400
 8000688:	2000007c 	.word	0x2000007c
 800068c:	200001d0 	.word	0x200001d0

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <__NVIC_EnableIRQ+0x34>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <tim2_start>:
#include "uart.h"

void tim2_start(uint16_t time_ms){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <tim2_start+0xa8>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a26      	ldr	r2, [pc, #152]	; (8000770 <tim2_start+0xa8>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	61d3      	str	r3, [r2, #28]
	TIM2->ARR = (time_ms * 10) - 1;
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	4613      	mov	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1e5a      	subs	r2, r3, #1
 80006ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 800 - 1;
 80006f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f4:	f240 321f 	movw	r2, #799	; 0x31f
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->CNT = 0;
 80006fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->DIER &=~ TIM_DIER_UIE;
 8000702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_OPM;
 8000712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= TIM_EGR_UG;
 8000722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6153      	str	r3, [r2, #20]
	TIM2->SR &=~ TIM_SR_UIF;
 8000732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6013      	str	r3, [r2, #0]
	TIM2->DIER |= TIM_DIER_UIE;
 8000752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000762:	201c      	movs	r0, #28
 8000764:	f7ff ff94 	bl	8000690 <__NVIC_EnableIRQ>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000

08000774 <tim3_start>:

void tim3_start(uint16_t time_ms){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <tim3_start+0x8c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <tim3_start+0x8c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	61d3      	str	r3, [r2, #28]
	TIM3->ARR = (time_ms * 10) - 1;
 800078a:	88fa      	ldrh	r2, [r7, #6]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <tim3_start+0x90>)
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 800 - 1;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <tim3_start+0x90>)
 800079c:	f240 321f 	movw	r2, #799	; 0x31f
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CNT = 0;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <tim3_start+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->DIER &=~ TIM_DIER_UIE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <tim3_start+0x90>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <tim3_start+0x90>)
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
	TIM3->CR1 |= TIM_CR1_OPM;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <tim3_start+0x90>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <tim3_start+0x90>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6013      	str	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <tim3_start+0x90>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <tim3_start+0x90>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6153      	str	r3, [r2, #20]
	TIM3->SR &=~ TIM_SR_UIF;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <tim3_start+0x90>)
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <tim3_start+0x90>)
 80007d2:	f023 0301 	bic.w	r3, r3, #1
 80007d6:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= TIM_CR1_CEN;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <tim3_start+0x90>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <tim3_start+0x90>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= TIM_DIER_UIE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <tim3_start+0x90>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <tim3_start+0x90>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 80007f0:	201d      	movs	r0, #29
 80007f2:	f7ff ff4d 	bl	8000690 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	40000400 	.word	0x40000400

08000808 <compute_uart_div>:
#include "uart.h"


static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BoudRate){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BoudRate/2U))/BoudRate);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	085a      	lsrs	r2, r3, #1
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	441a      	add	r2, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000820:	b29b      	uxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BoudRate){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BoudRate);
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff ffe4 	bl	8000808 <compute_uart_div>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	609a      	str	r2, [r3, #8]
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <uart2_rxtx_init>:
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);

	USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void uart2_rxtx_init(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
//	PA2 init
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <uart2_rxtx_init+0x44>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <uart2_rxtx_init+0x44>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
//				|(2UL << GPIO_CRL_CNF3_Pos)
//				|(3UL << GPIO_CRL_MODE3_Pos);

//	sends ok
//	GPIOA->CRL = (((GPIOA->CRL |(1U<<9)|(1U<<8)|(1U<<11))&~(1U<<10))|(1U<<13)|(1U<<12)|(1U<<15))&~(1U<<14);
	GPIOA->CRL = (GPIOA->CRL |(1U<<9)|(1U<<8)|(1U<<11))&~(1U<<10); //output 50 mhz max
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <uart2_rxtx_init+0x48>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <uart2_rxtx_init+0x48>)
 800086a:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 800086e:	6013      	str	r3, [r2, #0]
//	GPIOA->CRL = (GPIOA->CRL |(1U<<13)|(1U<<12)|(1U<<15))&~(1U<<14);

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <uart2_rxtx_init+0x44>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <uart2_rxtx_init+0x44>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	61d3      	str	r3, [r2, #28]

//	UART init
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800087c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <uart2_rxtx_init+0x4c>)
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <uart2_rxtx_init+0x50>)
 8000884:	f7ff ffd2 	bl	800082c <uart_set_baudrate>

	USART2->CR1 = USART_CR1_TE | USART_CR1_UE | USART_CR1_RE;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <uart2_rxtx_init+0x50>)
 800088a:	f242 020c 	movw	r2, #8204	; 0x200c
 800088e:	60da      	str	r2, [r3, #12]
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800
 800089c:	007a1200 	.word	0x007a1200
 80008a0:	40004400 	.word	0x40004400

080008a4 <uart_write>:

void uart_write(USART_TypeDef *UARTx, int ch){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	while (!(UARTx->SR & USART_SR_TXE));
 80008ae:	bf00      	nop
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f9      	beq.n	80008b0 <uart_write+0xc>
	UARTx->DR = (ch & 0xFF);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	605a      	str	r2, [r3, #4]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <uart_read>:

char uart_read(USART_TypeDef *UARTx){
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
	while(!(UARTx->SR & USART_SR_RXNE));
 80008d6:	bf00      	nop
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f9      	beq.n	80008d8 <uart_read+0xa>
	return UARTx->DR;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	b2db      	uxtb	r3, r3
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <write_str>:

void write_str(char* ch_arr, uint16_t size){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < (size); i++){
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e00a      	b.n	800091c <write_str+0x28>
		uart_write(USART2, ch_arr[i]);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <write_str+0x3c>)
 8000912:	f7ff ffc7 	bl	80008a4 <uart_write>
	for (int i = 0; i < (size); i++){
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3301      	adds	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	887b      	ldrh	r3, [r7, #2]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	429a      	cmp	r2, r3
 8000922:	dbf0      	blt.n	8000906 <write_str+0x12>
	}
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400

08000934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000962:	f000 fa65 	bl	8000e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff fd7b 	bl	8000460 <main>

0800096a <LoopForever>:

LoopForever:
  b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   r0, =_estack
 800096c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000978:	08001d34 	.word	0x08001d34
  ldr r2, =_sbss
 800097c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000980:	200001cc 	.word	0x200001cc

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>

08000986 <atoi>:
 8000986:	220a      	movs	r2, #10
 8000988:	2100      	movs	r1, #0
 800098a:	f000 b87f 	b.w	8000a8c <strtol>
	...

08000990 <_strtol_l.constprop.0>:
 8000990:	2b01      	cmp	r3, #1
 8000992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000996:	4686      	mov	lr, r0
 8000998:	4690      	mov	r8, r2
 800099a:	d001      	beq.n	80009a0 <_strtol_l.constprop.0+0x10>
 800099c:	2b24      	cmp	r3, #36	; 0x24
 800099e:	d906      	bls.n	80009ae <_strtol_l.constprop.0+0x1e>
 80009a0:	f000 fa40 	bl	8000e24 <__errno>
 80009a4:	2316      	movs	r3, #22
 80009a6:	6003      	str	r3, [r0, #0]
 80009a8:	2000      	movs	r0, #0
 80009aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ae:	460d      	mov	r5, r1
 80009b0:	4835      	ldr	r0, [pc, #212]	; (8000a88 <_strtol_l.constprop.0+0xf8>)
 80009b2:	462a      	mov	r2, r5
 80009b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80009b8:	5d06      	ldrb	r6, [r0, r4]
 80009ba:	f016 0608 	ands.w	r6, r6, #8
 80009be:	d1f8      	bne.n	80009b2 <_strtol_l.constprop.0+0x22>
 80009c0:	2c2d      	cmp	r4, #45	; 0x2d
 80009c2:	d12e      	bne.n	8000a22 <_strtol_l.constprop.0+0x92>
 80009c4:	2601      	movs	r6, #1
 80009c6:	782c      	ldrb	r4, [r5, #0]
 80009c8:	1c95      	adds	r5, r2, #2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d057      	beq.n	8000a7e <_strtol_l.constprop.0+0xee>
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d109      	bne.n	80009e6 <_strtol_l.constprop.0+0x56>
 80009d2:	2c30      	cmp	r4, #48	; 0x30
 80009d4:	d107      	bne.n	80009e6 <_strtol_l.constprop.0+0x56>
 80009d6:	782a      	ldrb	r2, [r5, #0]
 80009d8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80009dc:	2a58      	cmp	r2, #88	; 0x58
 80009de:	d149      	bne.n	8000a74 <_strtol_l.constprop.0+0xe4>
 80009e0:	2310      	movs	r3, #16
 80009e2:	786c      	ldrb	r4, [r5, #1]
 80009e4:	3502      	adds	r5, #2
 80009e6:	2200      	movs	r2, #0
 80009e8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80009ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80009f0:	fbbc f9f3 	udiv	r9, ip, r3
 80009f4:	4610      	mov	r0, r2
 80009f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80009fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80009fe:	2f09      	cmp	r7, #9
 8000a00:	d814      	bhi.n	8000a2c <_strtol_l.constprop.0+0x9c>
 8000a02:	463c      	mov	r4, r7
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	dd20      	ble.n	8000a4a <_strtol_l.constprop.0+0xba>
 8000a08:	1c57      	adds	r7, r2, #1
 8000a0a:	d007      	beq.n	8000a1c <_strtol_l.constprop.0+0x8c>
 8000a0c:	4581      	cmp	r9, r0
 8000a0e:	d319      	bcc.n	8000a44 <_strtol_l.constprop.0+0xb4>
 8000a10:	d101      	bne.n	8000a16 <_strtol_l.constprop.0+0x86>
 8000a12:	45a2      	cmp	sl, r4
 8000a14:	db16      	blt.n	8000a44 <_strtol_l.constprop.0+0xb4>
 8000a16:	2201      	movs	r2, #1
 8000a18:	fb00 4003 	mla	r0, r0, r3, r4
 8000a1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000a20:	e7eb      	b.n	80009fa <_strtol_l.constprop.0+0x6a>
 8000a22:	2c2b      	cmp	r4, #43	; 0x2b
 8000a24:	bf04      	itt	eq
 8000a26:	782c      	ldrbeq	r4, [r5, #0]
 8000a28:	1c95      	addeq	r5, r2, #2
 8000a2a:	e7ce      	b.n	80009ca <_strtol_l.constprop.0+0x3a>
 8000a2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8000a30:	2f19      	cmp	r7, #25
 8000a32:	d801      	bhi.n	8000a38 <_strtol_l.constprop.0+0xa8>
 8000a34:	3c37      	subs	r4, #55	; 0x37
 8000a36:	e7e5      	b.n	8000a04 <_strtol_l.constprop.0+0x74>
 8000a38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8000a3c:	2f19      	cmp	r7, #25
 8000a3e:	d804      	bhi.n	8000a4a <_strtol_l.constprop.0+0xba>
 8000a40:	3c57      	subs	r4, #87	; 0x57
 8000a42:	e7df      	b.n	8000a04 <_strtol_l.constprop.0+0x74>
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	e7e8      	b.n	8000a1c <_strtol_l.constprop.0+0x8c>
 8000a4a:	1c53      	adds	r3, r2, #1
 8000a4c:	d108      	bne.n	8000a60 <_strtol_l.constprop.0+0xd0>
 8000a4e:	2322      	movs	r3, #34	; 0x22
 8000a50:	4660      	mov	r0, ip
 8000a52:	f8ce 3000 	str.w	r3, [lr]
 8000a56:	f1b8 0f00 	cmp.w	r8, #0
 8000a5a:	d0a6      	beq.n	80009aa <_strtol_l.constprop.0+0x1a>
 8000a5c:	1e69      	subs	r1, r5, #1
 8000a5e:	e006      	b.n	8000a6e <_strtol_l.constprop.0+0xde>
 8000a60:	b106      	cbz	r6, 8000a64 <_strtol_l.constprop.0+0xd4>
 8000a62:	4240      	negs	r0, r0
 8000a64:	f1b8 0f00 	cmp.w	r8, #0
 8000a68:	d09f      	beq.n	80009aa <_strtol_l.constprop.0+0x1a>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d1f6      	bne.n	8000a5c <_strtol_l.constprop.0+0xcc>
 8000a6e:	f8c8 1000 	str.w	r1, [r8]
 8000a72:	e79a      	b.n	80009aa <_strtol_l.constprop.0+0x1a>
 8000a74:	2430      	movs	r4, #48	; 0x30
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1b5      	bne.n	80009e6 <_strtol_l.constprop.0+0x56>
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	e7b3      	b.n	80009e6 <_strtol_l.constprop.0+0x56>
 8000a7e:	2c30      	cmp	r4, #48	; 0x30
 8000a80:	d0a9      	beq.n	80009d6 <_strtol_l.constprop.0+0x46>
 8000a82:	230a      	movs	r3, #10
 8000a84:	e7af      	b.n	80009e6 <_strtol_l.constprop.0+0x56>
 8000a86:	bf00      	nop
 8000a88:	08001b4a 	.word	0x08001b4a

08000a8c <strtol>:
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	460a      	mov	r2, r1
 8000a90:	4601      	mov	r1, r0
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <strtol+0x10>)
 8000a94:	6800      	ldr	r0, [r0, #0]
 8000a96:	f7ff bf7b 	b.w	8000990 <_strtol_l.constprop.0>
 8000a9a:	bf00      	nop
 8000a9c:	20000058 	.word	0x20000058

08000aa0 <std>:
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	b510      	push	{r4, lr}
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8000aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000aae:	6083      	str	r3, [r0, #8]
 8000ab0:	8181      	strh	r1, [r0, #12]
 8000ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8000ab4:	81c2      	strh	r2, [r0, #14]
 8000ab6:	6183      	str	r3, [r0, #24]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2208      	movs	r2, #8
 8000abc:	305c      	adds	r0, #92	; 0x5c
 8000abe:	f000 f8f4 	bl	8000caa <memset>
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <std+0x58>)
 8000ac4:	6224      	str	r4, [r4, #32]
 8000ac6:	6263      	str	r3, [r4, #36]	; 0x24
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <std+0x5c>)
 8000aca:	62a3      	str	r3, [r4, #40]	; 0x28
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <std+0x60>)
 8000ace:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <std+0x64>)
 8000ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <std+0x68>)
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	d006      	beq.n	8000ae8 <std+0x48>
 8000ada:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000ade:	4294      	cmp	r4, r2
 8000ae0:	d002      	beq.n	8000ae8 <std+0x48>
 8000ae2:	33d0      	adds	r3, #208	; 0xd0
 8000ae4:	429c      	cmp	r4, r3
 8000ae6:	d105      	bne.n	8000af4 <std+0x54>
 8000ae8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af0:	f000 b9c2 	b.w	8000e78 <__retarget_lock_init_recursive>
 8000af4:	bd10      	pop	{r4, pc}
 8000af6:	bf00      	nop
 8000af8:	08000c25 	.word	0x08000c25
 8000afc:	08000c47 	.word	0x08000c47
 8000b00:	08000c7f 	.word	0x08000c7f
 8000b04:	08000ca3 	.word	0x08000ca3
 8000b08:	20000080 	.word	0x20000080

08000b0c <stdio_exit_handler>:
 8000b0c:	4a02      	ldr	r2, [pc, #8]	; (8000b18 <stdio_exit_handler+0xc>)
 8000b0e:	4903      	ldr	r1, [pc, #12]	; (8000b1c <stdio_exit_handler+0x10>)
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <stdio_exit_handler+0x14>)
 8000b12:	f000 b869 	b.w	8000be8 <_fwalk_sglue>
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	080011b9 	.word	0x080011b9
 8000b20:	2000000c 	.word	0x2000000c

08000b24 <cleanup_stdio>:
 8000b24:	6841      	ldr	r1, [r0, #4]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <cleanup_stdio+0x34>)
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	d001      	beq.n	8000b34 <cleanup_stdio+0x10>
 8000b30:	f000 fb42 	bl	80011b8 <_fflush_r>
 8000b34:	68a1      	ldr	r1, [r4, #8]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <cleanup_stdio+0x38>)
 8000b38:	4299      	cmp	r1, r3
 8000b3a:	d002      	beq.n	8000b42 <cleanup_stdio+0x1e>
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f000 fb3b 	bl	80011b8 <_fflush_r>
 8000b42:	68e1      	ldr	r1, [r4, #12]
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <cleanup_stdio+0x3c>)
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d004      	beq.n	8000b54 <cleanup_stdio+0x30>
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b50:	f000 bb32 	b.w	80011b8 <_fflush_r>
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	bf00      	nop
 8000b58:	20000080 	.word	0x20000080
 8000b5c:	200000e8 	.word	0x200000e8
 8000b60:	20000150 	.word	0x20000150

08000b64 <global_stdio_init.part.0>:
 8000b64:	b510      	push	{r4, lr}
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <global_stdio_init.part.0+0x30>)
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <global_stdio_init.part.0+0x34>)
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <global_stdio_init.part.0+0x38>)
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	2104      	movs	r1, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	f7ff ff94 	bl	8000aa0 <std>
 8000b78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2109      	movs	r1, #9
 8000b80:	f7ff ff8e 	bl	8000aa0 <std>
 8000b84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000b88:	2202      	movs	r2, #2
 8000b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b8e:	2112      	movs	r1, #18
 8000b90:	f7ff bf86 	b.w	8000aa0 <std>
 8000b94:	200001b8 	.word	0x200001b8
 8000b98:	20000080 	.word	0x20000080
 8000b9c:	08000b0d 	.word	0x08000b0d

08000ba0 <__sfp_lock_acquire>:
 8000ba0:	4801      	ldr	r0, [pc, #4]	; (8000ba8 <__sfp_lock_acquire+0x8>)
 8000ba2:	f000 b96a 	b.w	8000e7a <__retarget_lock_acquire_recursive>
 8000ba6:	bf00      	nop
 8000ba8:	200001c1 	.word	0x200001c1

08000bac <__sfp_lock_release>:
 8000bac:	4801      	ldr	r0, [pc, #4]	; (8000bb4 <__sfp_lock_release+0x8>)
 8000bae:	f000 b965 	b.w	8000e7c <__retarget_lock_release_recursive>
 8000bb2:	bf00      	nop
 8000bb4:	200001c1 	.word	0x200001c1

08000bb8 <__sinit>:
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	4604      	mov	r4, r0
 8000bbc:	f7ff fff0 	bl	8000ba0 <__sfp_lock_acquire>
 8000bc0:	6a23      	ldr	r3, [r4, #32]
 8000bc2:	b11b      	cbz	r3, 8000bcc <__sinit+0x14>
 8000bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc8:	f7ff bff0 	b.w	8000bac <__sfp_lock_release>
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__sinit+0x28>)
 8000bce:	6223      	str	r3, [r4, #32]
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__sinit+0x2c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f5      	bne.n	8000bc4 <__sinit+0xc>
 8000bd8:	f7ff ffc4 	bl	8000b64 <global_stdio_init.part.0>
 8000bdc:	e7f2      	b.n	8000bc4 <__sinit+0xc>
 8000bde:	bf00      	nop
 8000be0:	08000b25 	.word	0x08000b25
 8000be4:	200001b8 	.word	0x200001b8

08000be8 <_fwalk_sglue>:
 8000be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bec:	4607      	mov	r7, r0
 8000bee:	4688      	mov	r8, r1
 8000bf0:	4614      	mov	r4, r2
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8000bfc:	d505      	bpl.n	8000c0a <_fwalk_sglue+0x22>
 8000bfe:	6824      	ldr	r4, [r4, #0]
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d1f7      	bne.n	8000bf4 <_fwalk_sglue+0xc>
 8000c04:	4630      	mov	r0, r6
 8000c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c0a:	89ab      	ldrh	r3, [r5, #12]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d907      	bls.n	8000c20 <_fwalk_sglue+0x38>
 8000c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c14:	3301      	adds	r3, #1
 8000c16:	d003      	beq.n	8000c20 <_fwalk_sglue+0x38>
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4638      	mov	r0, r7
 8000c1c:	47c0      	blx	r8
 8000c1e:	4306      	orrs	r6, r0
 8000c20:	3568      	adds	r5, #104	; 0x68
 8000c22:	e7e9      	b.n	8000bf8 <_fwalk_sglue+0x10>

08000c24 <__sread>:
 8000c24:	b510      	push	{r4, lr}
 8000c26:	460c      	mov	r4, r1
 8000c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c2c:	f000 f8d6 	bl	8000ddc <_read_r>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	bfab      	itete	ge
 8000c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c36:	89a3      	ldrhlt	r3, [r4, #12]
 8000c38:	181b      	addge	r3, r3, r0
 8000c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c3e:	bfac      	ite	ge
 8000c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8000c42:	81a3      	strhlt	r3, [r4, #12]
 8000c44:	bd10      	pop	{r4, pc}

08000c46 <__swrite>:
 8000c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4a:	461f      	mov	r7, r3
 8000c4c:	898b      	ldrh	r3, [r1, #12]
 8000c4e:	4605      	mov	r5, r0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	460c      	mov	r4, r1
 8000c54:	4616      	mov	r6, r2
 8000c56:	d505      	bpl.n	8000c64 <__swrite+0x1e>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c60:	f000 f8aa 	bl	8000db8 <_lseek_r>
 8000c64:	89a3      	ldrh	r3, [r4, #12]
 8000c66:	4632      	mov	r2, r6
 8000c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c6c:	81a3      	strh	r3, [r4, #12]
 8000c6e:	4628      	mov	r0, r5
 8000c70:	463b      	mov	r3, r7
 8000c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c7a:	f000 b8c1 	b.w	8000e00 <_write_r>

08000c7e <__sseek>:
 8000c7e:	b510      	push	{r4, lr}
 8000c80:	460c      	mov	r4, r1
 8000c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c86:	f000 f897 	bl	8000db8 <_lseek_r>
 8000c8a:	1c43      	adds	r3, r0, #1
 8000c8c:	89a3      	ldrh	r3, [r4, #12]
 8000c8e:	bf15      	itete	ne
 8000c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c9a:	81a3      	strheq	r3, [r4, #12]
 8000c9c:	bf18      	it	ne
 8000c9e:	81a3      	strhne	r3, [r4, #12]
 8000ca0:	bd10      	pop	{r4, pc}

08000ca2 <__sclose>:
 8000ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ca6:	f000 b877 	b.w	8000d98 <_close_r>

08000caa <memset>:
 8000caa:	4603      	mov	r3, r0
 8000cac:	4402      	add	r2, r0
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d100      	bne.n	8000cb4 <memset+0xa>
 8000cb2:	4770      	bx	lr
 8000cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8000cb8:	e7f9      	b.n	8000cae <memset+0x4>

08000cba <strncmp>:
 8000cba:	b510      	push	{r4, lr}
 8000cbc:	b16a      	cbz	r2, 8000cda <strncmp+0x20>
 8000cbe:	3901      	subs	r1, #1
 8000cc0:	1884      	adds	r4, r0, r2
 8000cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d103      	bne.n	8000cd6 <strncmp+0x1c>
 8000cce:	42a0      	cmp	r0, r4
 8000cd0:	d001      	beq.n	8000cd6 <strncmp+0x1c>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d1f5      	bne.n	8000cc2 <strncmp+0x8>
 8000cd6:	1ad0      	subs	r0, r2, r3
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	4610      	mov	r0, r2
 8000cdc:	e7fc      	b.n	8000cd8 <strncmp+0x1e>
	...

08000ce0 <strtok>:
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <strtok+0x5c>)
 8000ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce6:	681f      	ldr	r7, [r3, #0]
 8000ce8:	4605      	mov	r5, r0
 8000cea:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000cec:	460e      	mov	r6, r1
 8000cee:	b9ec      	cbnz	r4, 8000d2c <strtok+0x4c>
 8000cf0:	2050      	movs	r0, #80	; 0x50
 8000cf2:	f000 f92b 	bl	8000f4c <malloc>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	6478      	str	r0, [r7, #68]	; 0x44
 8000cfa:	b920      	cbnz	r0, 8000d06 <strtok+0x26>
 8000cfc:	215b      	movs	r1, #91	; 0x5b
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <strtok+0x60>)
 8000d00:	4810      	ldr	r0, [pc, #64]	; (8000d44 <strtok+0x64>)
 8000d02:	f000 f8bd 	bl	8000e80 <__assert_func>
 8000d06:	e9c0 4400 	strd	r4, r4, [r0]
 8000d0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000d0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000d12:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000d16:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000d1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000d1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000d22:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000d26:	6184      	str	r4, [r0, #24]
 8000d28:	7704      	strb	r4, [r0, #28]
 8000d2a:	6244      	str	r4, [r0, #36]	; 0x24
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	4628      	mov	r0, r5
 8000d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d32:	2301      	movs	r3, #1
 8000d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d38:	f000 b806 	b.w	8000d48 <__strtok_r>
 8000d3c:	20000058 	.word	0x20000058
 8000d40:	08001c4a 	.word	0x08001c4a
 8000d44:	08001c61 	.word	0x08001c61

08000d48 <__strtok_r>:
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b908      	cbnz	r0, 8000d50 <__strtok_r+0x8>
 8000d4c:	6810      	ldr	r0, [r2, #0]
 8000d4e:	b188      	cbz	r0, 8000d74 <__strtok_r+0x2c>
 8000d50:	4604      	mov	r4, r0
 8000d52:	460f      	mov	r7, r1
 8000d54:	4620      	mov	r0, r4
 8000d56:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000d5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000d5e:	b91e      	cbnz	r6, 8000d68 <__strtok_r+0x20>
 8000d60:	b965      	cbnz	r5, 8000d7c <__strtok_r+0x34>
 8000d62:	4628      	mov	r0, r5
 8000d64:	6015      	str	r5, [r2, #0]
 8000d66:	e005      	b.n	8000d74 <__strtok_r+0x2c>
 8000d68:	42b5      	cmp	r5, r6
 8000d6a:	d1f6      	bne.n	8000d5a <__strtok_r+0x12>
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f0      	bne.n	8000d52 <__strtok_r+0xa>
 8000d70:	6014      	str	r4, [r2, #0]
 8000d72:	7003      	strb	r3, [r0, #0]
 8000d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d76:	461c      	mov	r4, r3
 8000d78:	e00c      	b.n	8000d94 <__strtok_r+0x4c>
 8000d7a:	b915      	cbnz	r5, 8000d82 <__strtok_r+0x3a>
 8000d7c:	460e      	mov	r6, r1
 8000d7e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000d82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	d1f7      	bne.n	8000d7a <__strtok_r+0x32>
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f3      	beq.n	8000d76 <__strtok_r+0x2e>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000d94:	6014      	str	r4, [r2, #0]
 8000d96:	e7ed      	b.n	8000d74 <__strtok_r+0x2c>

08000d98 <_close_r>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	4d05      	ldr	r5, [pc, #20]	; (8000db4 <_close_r+0x1c>)
 8000d9e:	4604      	mov	r4, r0
 8000da0:	4608      	mov	r0, r1
 8000da2:	602b      	str	r3, [r5, #0]
 8000da4:	f7ff fc0e 	bl	80005c4 <_close>
 8000da8:	1c43      	adds	r3, r0, #1
 8000daa:	d102      	bne.n	8000db2 <_close_r+0x1a>
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	b103      	cbz	r3, 8000db2 <_close_r+0x1a>
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	bd38      	pop	{r3, r4, r5, pc}
 8000db4:	200001bc 	.word	0x200001bc

08000db8 <_lseek_r>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	4604      	mov	r4, r0
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4d05      	ldr	r5, [pc, #20]	; (8000dd8 <_lseek_r+0x20>)
 8000dc4:	602a      	str	r2, [r5, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f7ff fc20 	bl	800060c <_lseek>
 8000dcc:	1c43      	adds	r3, r0, #1
 8000dce:	d102      	bne.n	8000dd6 <_lseek_r+0x1e>
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	b103      	cbz	r3, 8000dd6 <_lseek_r+0x1e>
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	bd38      	pop	{r3, r4, r5, pc}
 8000dd8:	200001bc 	.word	0x200001bc

08000ddc <_read_r>:
 8000ddc:	b538      	push	{r3, r4, r5, lr}
 8000dde:	4604      	mov	r4, r0
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	4d05      	ldr	r5, [pc, #20]	; (8000dfc <_read_r+0x20>)
 8000de8:	602a      	str	r2, [r5, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	f7ff fbb1 	bl	8000552 <_read>
 8000df0:	1c43      	adds	r3, r0, #1
 8000df2:	d102      	bne.n	8000dfa <_read_r+0x1e>
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	b103      	cbz	r3, 8000dfa <_read_r+0x1e>
 8000df8:	6023      	str	r3, [r4, #0]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
 8000dfc:	200001bc 	.word	0x200001bc

08000e00 <_write_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4d05      	ldr	r5, [pc, #20]	; (8000e20 <_write_r+0x20>)
 8000e0c:	602a      	str	r2, [r5, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f7ff fbbc 	bl	800058c <_write>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	d102      	bne.n	8000e1e <_write_r+0x1e>
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	b103      	cbz	r3, 8000e1e <_write_r+0x1e>
 8000e1c:	6023      	str	r3, [r4, #0]
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	200001bc 	.word	0x200001bc

08000e24 <__errno>:
 8000e24:	4b01      	ldr	r3, [pc, #4]	; (8000e2c <__errno+0x8>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000058 	.word	0x20000058

08000e30 <__libc_init_array>:
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	2600      	movs	r6, #0
 8000e34:	4d0c      	ldr	r5, [pc, #48]	; (8000e68 <__libc_init_array+0x38>)
 8000e36:	4c0d      	ldr	r4, [pc, #52]	; (8000e6c <__libc_init_array+0x3c>)
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	10a4      	asrs	r4, r4, #2
 8000e3c:	42a6      	cmp	r6, r4
 8000e3e:	d109      	bne.n	8000e54 <__libc_init_array+0x24>
 8000e40:	f000 fe4c 	bl	8001adc <_init>
 8000e44:	2600      	movs	r6, #0
 8000e46:	4d0a      	ldr	r5, [pc, #40]	; (8000e70 <__libc_init_array+0x40>)
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <__libc_init_array+0x44>)
 8000e4a:	1b64      	subs	r4, r4, r5
 8000e4c:	10a4      	asrs	r4, r4, #2
 8000e4e:	42a6      	cmp	r6, r4
 8000e50:	d105      	bne.n	8000e5e <__libc_init_array+0x2e>
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
 8000e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e58:	4798      	blx	r3
 8000e5a:	3601      	adds	r6, #1
 8000e5c:	e7ee      	b.n	8000e3c <__libc_init_array+0xc>
 8000e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e62:	4798      	blx	r3
 8000e64:	3601      	adds	r6, #1
 8000e66:	e7f2      	b.n	8000e4e <__libc_init_array+0x1e>
 8000e68:	08001d2c 	.word	0x08001d2c
 8000e6c:	08001d2c 	.word	0x08001d2c
 8000e70:	08001d2c 	.word	0x08001d2c
 8000e74:	08001d30 	.word	0x08001d30

08000e78 <__retarget_lock_init_recursive>:
 8000e78:	4770      	bx	lr

08000e7a <__retarget_lock_acquire_recursive>:
 8000e7a:	4770      	bx	lr

08000e7c <__retarget_lock_release_recursive>:
 8000e7c:	4770      	bx	lr
	...

08000e80 <__assert_func>:
 8000e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e82:	4614      	mov	r4, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <__assert_func+0x2c>)
 8000e88:	4605      	mov	r5, r0
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68d8      	ldr	r0, [r3, #12]
 8000e8e:	b14c      	cbz	r4, 8000ea4 <__assert_func+0x24>
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <__assert_func+0x30>)
 8000e92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000e96:	9100      	str	r1, [sp, #0]
 8000e98:	462b      	mov	r3, r5
 8000e9a:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <__assert_func+0x34>)
 8000e9c:	f000 f9b4 	bl	8001208 <fiprintf>
 8000ea0:	f000 f9d4 	bl	800124c <abort>
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__assert_func+0x38>)
 8000ea6:	461c      	mov	r4, r3
 8000ea8:	e7f3      	b.n	8000e92 <__assert_func+0x12>
 8000eaa:	bf00      	nop
 8000eac:	20000058 	.word	0x20000058
 8000eb0:	08001cbb 	.word	0x08001cbb
 8000eb4:	08001cc8 	.word	0x08001cc8
 8000eb8:	08001cf6 	.word	0x08001cf6

08000ebc <_free_r>:
 8000ebc:	b538      	push	{r3, r4, r5, lr}
 8000ebe:	4605      	mov	r5, r0
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	d040      	beq.n	8000f46 <_free_r+0x8a>
 8000ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ec8:	1f0c      	subs	r4, r1, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bfb8      	it	lt
 8000ece:	18e4      	addlt	r4, r4, r3
 8000ed0:	f000 f8e4 	bl	800109c <__malloc_lock>
 8000ed4:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <_free_r+0x8c>)
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	b933      	cbnz	r3, 8000ee8 <_free_r+0x2c>
 8000eda:	6063      	str	r3, [r4, #4]
 8000edc:	6014      	str	r4, [r2, #0]
 8000ede:	4628      	mov	r0, r5
 8000ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ee4:	f000 b8e0 	b.w	80010a8 <__malloc_unlock>
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <_free_r+0x42>
 8000eec:	6820      	ldr	r0, [r4, #0]
 8000eee:	1821      	adds	r1, r4, r0
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	bf01      	itttt	eq
 8000ef4:	6819      	ldreq	r1, [r3, #0]
 8000ef6:	685b      	ldreq	r3, [r3, #4]
 8000ef8:	1809      	addeq	r1, r1, r0
 8000efa:	6021      	streq	r1, [r4, #0]
 8000efc:	e7ed      	b.n	8000eda <_free_r+0x1e>
 8000efe:	461a      	mov	r2, r3
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	b10b      	cbz	r3, 8000f08 <_free_r+0x4c>
 8000f04:	42a3      	cmp	r3, r4
 8000f06:	d9fa      	bls.n	8000efe <_free_r+0x42>
 8000f08:	6811      	ldr	r1, [r2, #0]
 8000f0a:	1850      	adds	r0, r2, r1
 8000f0c:	42a0      	cmp	r0, r4
 8000f0e:	d10b      	bne.n	8000f28 <_free_r+0x6c>
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	4401      	add	r1, r0
 8000f14:	1850      	adds	r0, r2, r1
 8000f16:	4283      	cmp	r3, r0
 8000f18:	6011      	str	r1, [r2, #0]
 8000f1a:	d1e0      	bne.n	8000ede <_free_r+0x22>
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4408      	add	r0, r1
 8000f22:	6010      	str	r0, [r2, #0]
 8000f24:	6053      	str	r3, [r2, #4]
 8000f26:	e7da      	b.n	8000ede <_free_r+0x22>
 8000f28:	d902      	bls.n	8000f30 <_free_r+0x74>
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	602b      	str	r3, [r5, #0]
 8000f2e:	e7d6      	b.n	8000ede <_free_r+0x22>
 8000f30:	6820      	ldr	r0, [r4, #0]
 8000f32:	1821      	adds	r1, r4, r0
 8000f34:	428b      	cmp	r3, r1
 8000f36:	bf01      	itttt	eq
 8000f38:	6819      	ldreq	r1, [r3, #0]
 8000f3a:	685b      	ldreq	r3, [r3, #4]
 8000f3c:	1809      	addeq	r1, r1, r0
 8000f3e:	6021      	streq	r1, [r4, #0]
 8000f40:	6063      	str	r3, [r4, #4]
 8000f42:	6054      	str	r4, [r2, #4]
 8000f44:	e7cb      	b.n	8000ede <_free_r+0x22>
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
 8000f48:	200001c4 	.word	0x200001c4

08000f4c <malloc>:
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <malloc+0xc>)
 8000f4e:	4601      	mov	r1, r0
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	f000 b823 	b.w	8000f9c <_malloc_r>
 8000f56:	bf00      	nop
 8000f58:	20000058 	.word	0x20000058

08000f5c <sbrk_aligned>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	4e0e      	ldr	r6, [pc, #56]	; (8000f98 <sbrk_aligned+0x3c>)
 8000f60:	460c      	mov	r4, r1
 8000f62:	6831      	ldr	r1, [r6, #0]
 8000f64:	4605      	mov	r5, r0
 8000f66:	b911      	cbnz	r1, 8000f6e <sbrk_aligned+0x12>
 8000f68:	f000 f960 	bl	800122c <_sbrk_r>
 8000f6c:	6030      	str	r0, [r6, #0]
 8000f6e:	4621      	mov	r1, r4
 8000f70:	4628      	mov	r0, r5
 8000f72:	f000 f95b 	bl	800122c <_sbrk_r>
 8000f76:	1c43      	adds	r3, r0, #1
 8000f78:	d00a      	beq.n	8000f90 <sbrk_aligned+0x34>
 8000f7a:	1cc4      	adds	r4, r0, #3
 8000f7c:	f024 0403 	bic.w	r4, r4, #3
 8000f80:	42a0      	cmp	r0, r4
 8000f82:	d007      	beq.n	8000f94 <sbrk_aligned+0x38>
 8000f84:	1a21      	subs	r1, r4, r0
 8000f86:	4628      	mov	r0, r5
 8000f88:	f000 f950 	bl	800122c <_sbrk_r>
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	d101      	bne.n	8000f94 <sbrk_aligned+0x38>
 8000f90:	f04f 34ff 	mov.w	r4, #4294967295
 8000f94:	4620      	mov	r0, r4
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
 8000f98:	200001c8 	.word	0x200001c8

08000f9c <_malloc_r>:
 8000f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fa0:	1ccd      	adds	r5, r1, #3
 8000fa2:	f025 0503 	bic.w	r5, r5, #3
 8000fa6:	3508      	adds	r5, #8
 8000fa8:	2d0c      	cmp	r5, #12
 8000faa:	bf38      	it	cc
 8000fac:	250c      	movcc	r5, #12
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	4607      	mov	r7, r0
 8000fb2:	db01      	blt.n	8000fb8 <_malloc_r+0x1c>
 8000fb4:	42a9      	cmp	r1, r5
 8000fb6:	d905      	bls.n	8000fc4 <_malloc_r+0x28>
 8000fb8:	230c      	movs	r3, #12
 8000fba:	2600      	movs	r6, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001098 <_malloc_r+0xfc>
 8000fc8:	f000 f868 	bl	800109c <__malloc_lock>
 8000fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	bb5c      	cbnz	r4, 800102c <_malloc_r+0x90>
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	f7ff ffc0 	bl	8000f5c <sbrk_aligned>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	4604      	mov	r4, r0
 8000fe0:	d155      	bne.n	800108e <_malloc_r+0xf2>
 8000fe2:	f8d8 4000 	ldr.w	r4, [r8]
 8000fe6:	4626      	mov	r6, r4
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d145      	bne.n	8001078 <_malloc_r+0xdc>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d048      	beq.n	8001082 <_malloc_r+0xe6>
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	4631      	mov	r1, r6
 8000ff4:	4638      	mov	r0, r7
 8000ff6:	eb04 0903 	add.w	r9, r4, r3
 8000ffa:	f000 f917 	bl	800122c <_sbrk_r>
 8000ffe:	4581      	cmp	r9, r0
 8001000:	d13f      	bne.n	8001082 <_malloc_r+0xe6>
 8001002:	6821      	ldr	r1, [r4, #0]
 8001004:	4638      	mov	r0, r7
 8001006:	1a6d      	subs	r5, r5, r1
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff ffa7 	bl	8000f5c <sbrk_aligned>
 800100e:	3001      	adds	r0, #1
 8001010:	d037      	beq.n	8001082 <_malloc_r+0xe6>
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	442b      	add	r3, r5
 8001016:	6023      	str	r3, [r4, #0]
 8001018:	f8d8 3000 	ldr.w	r3, [r8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d038      	beq.n	8001092 <_malloc_r+0xf6>
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	42a2      	cmp	r2, r4
 8001024:	d12b      	bne.n	800107e <_malloc_r+0xe2>
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	e00f      	b.n	800104c <_malloc_r+0xb0>
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	1b52      	subs	r2, r2, r5
 8001030:	d41f      	bmi.n	8001072 <_malloc_r+0xd6>
 8001032:	2a0b      	cmp	r2, #11
 8001034:	d917      	bls.n	8001066 <_malloc_r+0xca>
 8001036:	1961      	adds	r1, r4, r5
 8001038:	42a3      	cmp	r3, r4
 800103a:	6025      	str	r5, [r4, #0]
 800103c:	bf18      	it	ne
 800103e:	6059      	strne	r1, [r3, #4]
 8001040:	6863      	ldr	r3, [r4, #4]
 8001042:	bf08      	it	eq
 8001044:	f8c8 1000 	streq.w	r1, [r8]
 8001048:	5162      	str	r2, [r4, r5]
 800104a:	604b      	str	r3, [r1, #4]
 800104c:	4638      	mov	r0, r7
 800104e:	f104 060b 	add.w	r6, r4, #11
 8001052:	f000 f829 	bl	80010a8 <__malloc_unlock>
 8001056:	f026 0607 	bic.w	r6, r6, #7
 800105a:	1d23      	adds	r3, r4, #4
 800105c:	1af2      	subs	r2, r6, r3
 800105e:	d0ae      	beq.n	8000fbe <_malloc_r+0x22>
 8001060:	1b9b      	subs	r3, r3, r6
 8001062:	50a3      	str	r3, [r4, r2]
 8001064:	e7ab      	b.n	8000fbe <_malloc_r+0x22>
 8001066:	42a3      	cmp	r3, r4
 8001068:	6862      	ldr	r2, [r4, #4]
 800106a:	d1dd      	bne.n	8001028 <_malloc_r+0x8c>
 800106c:	f8c8 2000 	str.w	r2, [r8]
 8001070:	e7ec      	b.n	800104c <_malloc_r+0xb0>
 8001072:	4623      	mov	r3, r4
 8001074:	6864      	ldr	r4, [r4, #4]
 8001076:	e7ac      	b.n	8000fd2 <_malloc_r+0x36>
 8001078:	4634      	mov	r4, r6
 800107a:	6876      	ldr	r6, [r6, #4]
 800107c:	e7b4      	b.n	8000fe8 <_malloc_r+0x4c>
 800107e:	4613      	mov	r3, r2
 8001080:	e7cc      	b.n	800101c <_malloc_r+0x80>
 8001082:	230c      	movs	r3, #12
 8001084:	4638      	mov	r0, r7
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	f000 f80e 	bl	80010a8 <__malloc_unlock>
 800108c:	e797      	b.n	8000fbe <_malloc_r+0x22>
 800108e:	6025      	str	r5, [r4, #0]
 8001090:	e7dc      	b.n	800104c <_malloc_r+0xb0>
 8001092:	605b      	str	r3, [r3, #4]
 8001094:	deff      	udf	#255	; 0xff
 8001096:	bf00      	nop
 8001098:	200001c4 	.word	0x200001c4

0800109c <__malloc_lock>:
 800109c:	4801      	ldr	r0, [pc, #4]	; (80010a4 <__malloc_lock+0x8>)
 800109e:	f7ff beec 	b.w	8000e7a <__retarget_lock_acquire_recursive>
 80010a2:	bf00      	nop
 80010a4:	200001c0 	.word	0x200001c0

080010a8 <__malloc_unlock>:
 80010a8:	4801      	ldr	r0, [pc, #4]	; (80010b0 <__malloc_unlock+0x8>)
 80010aa:	f7ff bee7 	b.w	8000e7c <__retarget_lock_release_recursive>
 80010ae:	bf00      	nop
 80010b0:	200001c0 	.word	0x200001c0

080010b4 <__sflush_r>:
 80010b4:	898a      	ldrh	r2, [r1, #12]
 80010b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b8:	4605      	mov	r5, r0
 80010ba:	0710      	lsls	r0, r2, #28
 80010bc:	460c      	mov	r4, r1
 80010be:	d457      	bmi.n	8001170 <__sflush_r+0xbc>
 80010c0:	684b      	ldr	r3, [r1, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dc04      	bgt.n	80010d0 <__sflush_r+0x1c>
 80010c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dc01      	bgt.n	80010d0 <__sflush_r+0x1c>
 80010cc:	2000      	movs	r0, #0
 80010ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010d2:	2e00      	cmp	r6, #0
 80010d4:	d0fa      	beq.n	80010cc <__sflush_r+0x18>
 80010d6:	2300      	movs	r3, #0
 80010d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010dc:	682f      	ldr	r7, [r5, #0]
 80010de:	6a21      	ldr	r1, [r4, #32]
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	d032      	beq.n	800114a <__sflush_r+0x96>
 80010e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010e6:	89a3      	ldrh	r3, [r4, #12]
 80010e8:	075a      	lsls	r2, r3, #29
 80010ea:	d505      	bpl.n	80010f8 <__sflush_r+0x44>
 80010ec:	6863      	ldr	r3, [r4, #4]
 80010ee:	1ac0      	subs	r0, r0, r3
 80010f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010f2:	b10b      	cbz	r3, 80010f8 <__sflush_r+0x44>
 80010f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f6:	1ac0      	subs	r0, r0, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	4602      	mov	r2, r0
 80010fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010fe:	4628      	mov	r0, r5
 8001100:	6a21      	ldr	r1, [r4, #32]
 8001102:	47b0      	blx	r6
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	89a3      	ldrh	r3, [r4, #12]
 8001108:	d106      	bne.n	8001118 <__sflush_r+0x64>
 800110a:	6829      	ldr	r1, [r5, #0]
 800110c:	291d      	cmp	r1, #29
 800110e:	d82b      	bhi.n	8001168 <__sflush_r+0xb4>
 8001110:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <__sflush_r+0x100>)
 8001112:	410a      	asrs	r2, r1
 8001114:	07d6      	lsls	r6, r2, #31
 8001116:	d427      	bmi.n	8001168 <__sflush_r+0xb4>
 8001118:	2200      	movs	r2, #0
 800111a:	6062      	str	r2, [r4, #4]
 800111c:	6922      	ldr	r2, [r4, #16]
 800111e:	04d9      	lsls	r1, r3, #19
 8001120:	6022      	str	r2, [r4, #0]
 8001122:	d504      	bpl.n	800112e <__sflush_r+0x7a>
 8001124:	1c42      	adds	r2, r0, #1
 8001126:	d101      	bne.n	800112c <__sflush_r+0x78>
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	b903      	cbnz	r3, 800112e <__sflush_r+0x7a>
 800112c:	6560      	str	r0, [r4, #84]	; 0x54
 800112e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001130:	602f      	str	r7, [r5, #0]
 8001132:	2900      	cmp	r1, #0
 8001134:	d0ca      	beq.n	80010cc <__sflush_r+0x18>
 8001136:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800113a:	4299      	cmp	r1, r3
 800113c:	d002      	beq.n	8001144 <__sflush_r+0x90>
 800113e:	4628      	mov	r0, r5
 8001140:	f7ff febc 	bl	8000ebc <_free_r>
 8001144:	2000      	movs	r0, #0
 8001146:	6360      	str	r0, [r4, #52]	; 0x34
 8001148:	e7c1      	b.n	80010ce <__sflush_r+0x1a>
 800114a:	2301      	movs	r3, #1
 800114c:	4628      	mov	r0, r5
 800114e:	47b0      	blx	r6
 8001150:	1c41      	adds	r1, r0, #1
 8001152:	d1c8      	bne.n	80010e6 <__sflush_r+0x32>
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0c5      	beq.n	80010e6 <__sflush_r+0x32>
 800115a:	2b1d      	cmp	r3, #29
 800115c:	d001      	beq.n	8001162 <__sflush_r+0xae>
 800115e:	2b16      	cmp	r3, #22
 8001160:	d101      	bne.n	8001166 <__sflush_r+0xb2>
 8001162:	602f      	str	r7, [r5, #0]
 8001164:	e7b2      	b.n	80010cc <__sflush_r+0x18>
 8001166:	89a3      	ldrh	r3, [r4, #12]
 8001168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116c:	81a3      	strh	r3, [r4, #12]
 800116e:	e7ae      	b.n	80010ce <__sflush_r+0x1a>
 8001170:	690f      	ldr	r7, [r1, #16]
 8001172:	2f00      	cmp	r7, #0
 8001174:	d0aa      	beq.n	80010cc <__sflush_r+0x18>
 8001176:	0793      	lsls	r3, r2, #30
 8001178:	bf18      	it	ne
 800117a:	2300      	movne	r3, #0
 800117c:	680e      	ldr	r6, [r1, #0]
 800117e:	bf08      	it	eq
 8001180:	694b      	ldreq	r3, [r1, #20]
 8001182:	1bf6      	subs	r6, r6, r7
 8001184:	600f      	str	r7, [r1, #0]
 8001186:	608b      	str	r3, [r1, #8]
 8001188:	2e00      	cmp	r6, #0
 800118a:	dd9f      	ble.n	80010cc <__sflush_r+0x18>
 800118c:	4633      	mov	r3, r6
 800118e:	463a      	mov	r2, r7
 8001190:	4628      	mov	r0, r5
 8001192:	6a21      	ldr	r1, [r4, #32]
 8001194:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001198:	47e0      	blx	ip
 800119a:	2800      	cmp	r0, #0
 800119c:	dc06      	bgt.n	80011ac <__sflush_r+0xf8>
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a8:	81a3      	strh	r3, [r4, #12]
 80011aa:	e790      	b.n	80010ce <__sflush_r+0x1a>
 80011ac:	4407      	add	r7, r0
 80011ae:	1a36      	subs	r6, r6, r0
 80011b0:	e7ea      	b.n	8001188 <__sflush_r+0xd4>
 80011b2:	bf00      	nop
 80011b4:	dfbffffe 	.word	0xdfbffffe

080011b8 <_fflush_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	690b      	ldr	r3, [r1, #16]
 80011bc:	4605      	mov	r5, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	b913      	cbnz	r3, 80011c8 <_fflush_r+0x10>
 80011c2:	2500      	movs	r5, #0
 80011c4:	4628      	mov	r0, r5
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	b118      	cbz	r0, 80011d2 <_fflush_r+0x1a>
 80011ca:	6a03      	ldr	r3, [r0, #32]
 80011cc:	b90b      	cbnz	r3, 80011d2 <_fflush_r+0x1a>
 80011ce:	f7ff fcf3 	bl	8000bb8 <__sinit>
 80011d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f3      	beq.n	80011c2 <_fflush_r+0xa>
 80011da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011dc:	07d0      	lsls	r0, r2, #31
 80011de:	d404      	bmi.n	80011ea <_fflush_r+0x32>
 80011e0:	0599      	lsls	r1, r3, #22
 80011e2:	d402      	bmi.n	80011ea <_fflush_r+0x32>
 80011e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011e6:	f7ff fe48 	bl	8000e7a <__retarget_lock_acquire_recursive>
 80011ea:	4628      	mov	r0, r5
 80011ec:	4621      	mov	r1, r4
 80011ee:	f7ff ff61 	bl	80010b4 <__sflush_r>
 80011f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011f4:	4605      	mov	r5, r0
 80011f6:	07da      	lsls	r2, r3, #31
 80011f8:	d4e4      	bmi.n	80011c4 <_fflush_r+0xc>
 80011fa:	89a3      	ldrh	r3, [r4, #12]
 80011fc:	059b      	lsls	r3, r3, #22
 80011fe:	d4e1      	bmi.n	80011c4 <_fflush_r+0xc>
 8001200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001202:	f7ff fe3b 	bl	8000e7c <__retarget_lock_release_recursive>
 8001206:	e7dd      	b.n	80011c4 <_fflush_r+0xc>

08001208 <fiprintf>:
 8001208:	b40e      	push	{r1, r2, r3}
 800120a:	b503      	push	{r0, r1, lr}
 800120c:	4601      	mov	r1, r0
 800120e:	ab03      	add	r3, sp, #12
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <fiprintf+0x20>)
 8001212:	f853 2b04 	ldr.w	r2, [r3], #4
 8001216:	6800      	ldr	r0, [r0, #0]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f000 f845 	bl	80012a8 <_vfiprintf_r>
 800121e:	b002      	add	sp, #8
 8001220:	f85d eb04 	ldr.w	lr, [sp], #4
 8001224:	b003      	add	sp, #12
 8001226:	4770      	bx	lr
 8001228:	20000058 	.word	0x20000058

0800122c <_sbrk_r>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	2300      	movs	r3, #0
 8001230:	4d05      	ldr	r5, [pc, #20]	; (8001248 <_sbrk_r+0x1c>)
 8001232:	4604      	mov	r4, r0
 8001234:	4608      	mov	r0, r1
 8001236:	602b      	str	r3, [r5, #0]
 8001238:	f7ff f9f4 	bl	8000624 <_sbrk>
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	d102      	bne.n	8001246 <_sbrk_r+0x1a>
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	b103      	cbz	r3, 8001246 <_sbrk_r+0x1a>
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	bd38      	pop	{r3, r4, r5, pc}
 8001248:	200001bc 	.word	0x200001bc

0800124c <abort>:
 800124c:	2006      	movs	r0, #6
 800124e:	b508      	push	{r3, lr}
 8001250:	f000 fb96 	bl	8001980 <raise>
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff f972 	bl	800053e <_exit>

0800125a <__sfputc_r>:
 800125a:	6893      	ldr	r3, [r2, #8]
 800125c:	b410      	push	{r4}
 800125e:	3b01      	subs	r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	6093      	str	r3, [r2, #8]
 8001264:	da07      	bge.n	8001276 <__sfputc_r+0x1c>
 8001266:	6994      	ldr	r4, [r2, #24]
 8001268:	42a3      	cmp	r3, r4
 800126a:	db01      	blt.n	8001270 <__sfputc_r+0x16>
 800126c:	290a      	cmp	r1, #10
 800126e:	d102      	bne.n	8001276 <__sfputc_r+0x1c>
 8001270:	bc10      	pop	{r4}
 8001272:	f000 bac7 	b.w	8001804 <__swbuf_r>
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	1c58      	adds	r0, r3, #1
 800127a:	6010      	str	r0, [r2, #0]
 800127c:	7019      	strb	r1, [r3, #0]
 800127e:	4608      	mov	r0, r1
 8001280:	bc10      	pop	{r4}
 8001282:	4770      	bx	lr

08001284 <__sfputs_r>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	4606      	mov	r6, r0
 8001288:	460f      	mov	r7, r1
 800128a:	4614      	mov	r4, r2
 800128c:	18d5      	adds	r5, r2, r3
 800128e:	42ac      	cmp	r4, r5
 8001290:	d101      	bne.n	8001296 <__sfputs_r+0x12>
 8001292:	2000      	movs	r0, #0
 8001294:	e007      	b.n	80012a6 <__sfputs_r+0x22>
 8001296:	463a      	mov	r2, r7
 8001298:	4630      	mov	r0, r6
 800129a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800129e:	f7ff ffdc 	bl	800125a <__sfputc_r>
 80012a2:	1c43      	adds	r3, r0, #1
 80012a4:	d1f3      	bne.n	800128e <__sfputs_r+0xa>
 80012a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012a8 <_vfiprintf_r>:
 80012a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ac:	460d      	mov	r5, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	4698      	mov	r8, r3
 80012b2:	4606      	mov	r6, r0
 80012b4:	b09d      	sub	sp, #116	; 0x74
 80012b6:	b118      	cbz	r0, 80012c0 <_vfiprintf_r+0x18>
 80012b8:	6a03      	ldr	r3, [r0, #32]
 80012ba:	b90b      	cbnz	r3, 80012c0 <_vfiprintf_r+0x18>
 80012bc:	f7ff fc7c 	bl	8000bb8 <__sinit>
 80012c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012c2:	07d9      	lsls	r1, r3, #31
 80012c4:	d405      	bmi.n	80012d2 <_vfiprintf_r+0x2a>
 80012c6:	89ab      	ldrh	r3, [r5, #12]
 80012c8:	059a      	lsls	r2, r3, #22
 80012ca:	d402      	bmi.n	80012d2 <_vfiprintf_r+0x2a>
 80012cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012ce:	f7ff fdd4 	bl	8000e7a <__retarget_lock_acquire_recursive>
 80012d2:	89ab      	ldrh	r3, [r5, #12]
 80012d4:	071b      	lsls	r3, r3, #28
 80012d6:	d501      	bpl.n	80012dc <_vfiprintf_r+0x34>
 80012d8:	692b      	ldr	r3, [r5, #16]
 80012da:	b99b      	cbnz	r3, 8001304 <_vfiprintf_r+0x5c>
 80012dc:	4629      	mov	r1, r5
 80012de:	4630      	mov	r0, r6
 80012e0:	f000 face 	bl	8001880 <__swsetup_r>
 80012e4:	b170      	cbz	r0, 8001304 <_vfiprintf_r+0x5c>
 80012e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012e8:	07dc      	lsls	r4, r3, #31
 80012ea:	d504      	bpl.n	80012f6 <_vfiprintf_r+0x4e>
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	b01d      	add	sp, #116	; 0x74
 80012f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f6:	89ab      	ldrh	r3, [r5, #12]
 80012f8:	0598      	lsls	r0, r3, #22
 80012fa:	d4f7      	bmi.n	80012ec <_vfiprintf_r+0x44>
 80012fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012fe:	f7ff fdbd 	bl	8000e7c <__retarget_lock_release_recursive>
 8001302:	e7f3      	b.n	80012ec <_vfiprintf_r+0x44>
 8001304:	2300      	movs	r3, #0
 8001306:	9309      	str	r3, [sp, #36]	; 0x24
 8001308:	2320      	movs	r3, #32
 800130a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800130e:	2330      	movs	r3, #48	; 0x30
 8001310:	f04f 0901 	mov.w	r9, #1
 8001314:	f8cd 800c 	str.w	r8, [sp, #12]
 8001318:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80014c8 <_vfiprintf_r+0x220>
 800131c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001320:	4623      	mov	r3, r4
 8001322:	469a      	mov	sl, r3
 8001324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001328:	b10a      	cbz	r2, 800132e <_vfiprintf_r+0x86>
 800132a:	2a25      	cmp	r2, #37	; 0x25
 800132c:	d1f9      	bne.n	8001322 <_vfiprintf_r+0x7a>
 800132e:	ebba 0b04 	subs.w	fp, sl, r4
 8001332:	d00b      	beq.n	800134c <_vfiprintf_r+0xa4>
 8001334:	465b      	mov	r3, fp
 8001336:	4622      	mov	r2, r4
 8001338:	4629      	mov	r1, r5
 800133a:	4630      	mov	r0, r6
 800133c:	f7ff ffa2 	bl	8001284 <__sfputs_r>
 8001340:	3001      	adds	r0, #1
 8001342:	f000 80a9 	beq.w	8001498 <_vfiprintf_r+0x1f0>
 8001346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001348:	445a      	add	r2, fp
 800134a:	9209      	str	r2, [sp, #36]	; 0x24
 800134c:	f89a 3000 	ldrb.w	r3, [sl]
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80a1 	beq.w	8001498 <_vfiprintf_r+0x1f0>
 8001356:	2300      	movs	r3, #0
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001360:	f10a 0a01 	add.w	sl, sl, #1
 8001364:	9304      	str	r3, [sp, #16]
 8001366:	9307      	str	r3, [sp, #28]
 8001368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800136c:	931a      	str	r3, [sp, #104]	; 0x68
 800136e:	4654      	mov	r4, sl
 8001370:	2205      	movs	r2, #5
 8001372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001376:	4854      	ldr	r0, [pc, #336]	; (80014c8 <_vfiprintf_r+0x220>)
 8001378:	f000 fb1e 	bl	80019b8 <memchr>
 800137c:	9a04      	ldr	r2, [sp, #16]
 800137e:	b9d8      	cbnz	r0, 80013b8 <_vfiprintf_r+0x110>
 8001380:	06d1      	lsls	r1, r2, #27
 8001382:	bf44      	itt	mi
 8001384:	2320      	movmi	r3, #32
 8001386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800138a:	0713      	lsls	r3, r2, #28
 800138c:	bf44      	itt	mi
 800138e:	232b      	movmi	r3, #43	; 0x2b
 8001390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001394:	f89a 3000 	ldrb.w	r3, [sl]
 8001398:	2b2a      	cmp	r3, #42	; 0x2a
 800139a:	d015      	beq.n	80013c8 <_vfiprintf_r+0x120>
 800139c:	4654      	mov	r4, sl
 800139e:	2000      	movs	r0, #0
 80013a0:	f04f 0c0a 	mov.w	ip, #10
 80013a4:	9a07      	ldr	r2, [sp, #28]
 80013a6:	4621      	mov	r1, r4
 80013a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013ac:	3b30      	subs	r3, #48	; 0x30
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d94d      	bls.n	800144e <_vfiprintf_r+0x1a6>
 80013b2:	b1b0      	cbz	r0, 80013e2 <_vfiprintf_r+0x13a>
 80013b4:	9207      	str	r2, [sp, #28]
 80013b6:	e014      	b.n	80013e2 <_vfiprintf_r+0x13a>
 80013b8:	eba0 0308 	sub.w	r3, r0, r8
 80013bc:	fa09 f303 	lsl.w	r3, r9, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	46a2      	mov	sl, r4
 80013c4:	9304      	str	r3, [sp, #16]
 80013c6:	e7d2      	b.n	800136e <_vfiprintf_r+0xc6>
 80013c8:	9b03      	ldr	r3, [sp, #12]
 80013ca:	1d19      	adds	r1, r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	9103      	str	r1, [sp, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bfbb      	ittet	lt
 80013d4:	425b      	neglt	r3, r3
 80013d6:	f042 0202 	orrlt.w	r2, r2, #2
 80013da:	9307      	strge	r3, [sp, #28]
 80013dc:	9307      	strlt	r3, [sp, #28]
 80013de:	bfb8      	it	lt
 80013e0:	9204      	strlt	r2, [sp, #16]
 80013e2:	7823      	ldrb	r3, [r4, #0]
 80013e4:	2b2e      	cmp	r3, #46	; 0x2e
 80013e6:	d10c      	bne.n	8001402 <_vfiprintf_r+0x15a>
 80013e8:	7863      	ldrb	r3, [r4, #1]
 80013ea:	2b2a      	cmp	r3, #42	; 0x2a
 80013ec:	d134      	bne.n	8001458 <_vfiprintf_r+0x1b0>
 80013ee:	9b03      	ldr	r3, [sp, #12]
 80013f0:	3402      	adds	r4, #2
 80013f2:	1d1a      	adds	r2, r3, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	9203      	str	r2, [sp, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001400:	9305      	str	r3, [sp, #20]
 8001402:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80014cc <_vfiprintf_r+0x224>
 8001406:	2203      	movs	r2, #3
 8001408:	4650      	mov	r0, sl
 800140a:	7821      	ldrb	r1, [r4, #0]
 800140c:	f000 fad4 	bl	80019b8 <memchr>
 8001410:	b138      	cbz	r0, 8001422 <_vfiprintf_r+0x17a>
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	9b04      	ldr	r3, [sp, #16]
 8001416:	eba0 000a 	sub.w	r0, r0, sl
 800141a:	4082      	lsls	r2, r0
 800141c:	4313      	orrs	r3, r2
 800141e:	3401      	adds	r4, #1
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001426:	2206      	movs	r2, #6
 8001428:	4829      	ldr	r0, [pc, #164]	; (80014d0 <_vfiprintf_r+0x228>)
 800142a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800142e:	f000 fac3 	bl	80019b8 <memchr>
 8001432:	2800      	cmp	r0, #0
 8001434:	d03f      	beq.n	80014b6 <_vfiprintf_r+0x20e>
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <_vfiprintf_r+0x22c>)
 8001438:	bb1b      	cbnz	r3, 8001482 <_vfiprintf_r+0x1da>
 800143a:	9b03      	ldr	r3, [sp, #12]
 800143c:	3307      	adds	r3, #7
 800143e:	f023 0307 	bic.w	r3, r3, #7
 8001442:	3308      	adds	r3, #8
 8001444:	9303      	str	r3, [sp, #12]
 8001446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001448:	443b      	add	r3, r7
 800144a:	9309      	str	r3, [sp, #36]	; 0x24
 800144c:	e768      	b.n	8001320 <_vfiprintf_r+0x78>
 800144e:	460c      	mov	r4, r1
 8001450:	2001      	movs	r0, #1
 8001452:	fb0c 3202 	mla	r2, ip, r2, r3
 8001456:	e7a6      	b.n	80013a6 <_vfiprintf_r+0xfe>
 8001458:	2300      	movs	r3, #0
 800145a:	f04f 0c0a 	mov.w	ip, #10
 800145e:	4619      	mov	r1, r3
 8001460:	3401      	adds	r4, #1
 8001462:	9305      	str	r3, [sp, #20]
 8001464:	4620      	mov	r0, r4
 8001466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800146a:	3a30      	subs	r2, #48	; 0x30
 800146c:	2a09      	cmp	r2, #9
 800146e:	d903      	bls.n	8001478 <_vfiprintf_r+0x1d0>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0c6      	beq.n	8001402 <_vfiprintf_r+0x15a>
 8001474:	9105      	str	r1, [sp, #20]
 8001476:	e7c4      	b.n	8001402 <_vfiprintf_r+0x15a>
 8001478:	4604      	mov	r4, r0
 800147a:	2301      	movs	r3, #1
 800147c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001480:	e7f0      	b.n	8001464 <_vfiprintf_r+0x1bc>
 8001482:	ab03      	add	r3, sp, #12
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	462a      	mov	r2, r5
 8001488:	4630      	mov	r0, r6
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_vfiprintf_r+0x230>)
 800148c:	a904      	add	r1, sp, #16
 800148e:	f3af 8000 	nop.w
 8001492:	4607      	mov	r7, r0
 8001494:	1c78      	adds	r0, r7, #1
 8001496:	d1d6      	bne.n	8001446 <_vfiprintf_r+0x19e>
 8001498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800149a:	07d9      	lsls	r1, r3, #31
 800149c:	d405      	bmi.n	80014aa <_vfiprintf_r+0x202>
 800149e:	89ab      	ldrh	r3, [r5, #12]
 80014a0:	059a      	lsls	r2, r3, #22
 80014a2:	d402      	bmi.n	80014aa <_vfiprintf_r+0x202>
 80014a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014a6:	f7ff fce9 	bl	8000e7c <__retarget_lock_release_recursive>
 80014aa:	89ab      	ldrh	r3, [r5, #12]
 80014ac:	065b      	lsls	r3, r3, #25
 80014ae:	f53f af1d 	bmi.w	80012ec <_vfiprintf_r+0x44>
 80014b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014b4:	e71c      	b.n	80012f0 <_vfiprintf_r+0x48>
 80014b6:	ab03      	add	r3, sp, #12
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	462a      	mov	r2, r5
 80014bc:	4630      	mov	r0, r6
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <_vfiprintf_r+0x230>)
 80014c0:	a904      	add	r1, sp, #16
 80014c2:	f000 f87d 	bl	80015c0 <_printf_i>
 80014c6:	e7e4      	b.n	8001492 <_vfiprintf_r+0x1ea>
 80014c8:	08001cf7 	.word	0x08001cf7
 80014cc:	08001cfd 	.word	0x08001cfd
 80014d0:	08001d01 	.word	0x08001d01
 80014d4:	00000000 	.word	0x00000000
 80014d8:	08001285 	.word	0x08001285

080014dc <_printf_common>:
 80014dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014e0:	4616      	mov	r6, r2
 80014e2:	4699      	mov	r9, r3
 80014e4:	688a      	ldr	r2, [r1, #8]
 80014e6:	690b      	ldr	r3, [r1, #16]
 80014e8:	4607      	mov	r7, r0
 80014ea:	4293      	cmp	r3, r2
 80014ec:	bfb8      	it	lt
 80014ee:	4613      	movlt	r3, r2
 80014f0:	6033      	str	r3, [r6, #0]
 80014f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014f6:	460c      	mov	r4, r1
 80014f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014fc:	b10a      	cbz	r2, 8001502 <_printf_common+0x26>
 80014fe:	3301      	adds	r3, #1
 8001500:	6033      	str	r3, [r6, #0]
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	0699      	lsls	r1, r3, #26
 8001506:	bf42      	ittt	mi
 8001508:	6833      	ldrmi	r3, [r6, #0]
 800150a:	3302      	addmi	r3, #2
 800150c:	6033      	strmi	r3, [r6, #0]
 800150e:	6825      	ldr	r5, [r4, #0]
 8001510:	f015 0506 	ands.w	r5, r5, #6
 8001514:	d106      	bne.n	8001524 <_printf_common+0x48>
 8001516:	f104 0a19 	add.w	sl, r4, #25
 800151a:	68e3      	ldr	r3, [r4, #12]
 800151c:	6832      	ldr	r2, [r6, #0]
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	42ab      	cmp	r3, r5
 8001522:	dc2b      	bgt.n	800157c <_printf_common+0xa0>
 8001524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001528:	1e13      	subs	r3, r2, #0
 800152a:	6822      	ldr	r2, [r4, #0]
 800152c:	bf18      	it	ne
 800152e:	2301      	movne	r3, #1
 8001530:	0692      	lsls	r2, r2, #26
 8001532:	d430      	bmi.n	8001596 <_printf_common+0xba>
 8001534:	4649      	mov	r1, r9
 8001536:	4638      	mov	r0, r7
 8001538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800153c:	47c0      	blx	r8
 800153e:	3001      	adds	r0, #1
 8001540:	d023      	beq.n	800158a <_printf_common+0xae>
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	6922      	ldr	r2, [r4, #16]
 8001546:	f003 0306 	and.w	r3, r3, #6
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf14      	ite	ne
 800154e:	2500      	movne	r5, #0
 8001550:	6833      	ldreq	r3, [r6, #0]
 8001552:	f04f 0600 	mov.w	r6, #0
 8001556:	bf08      	it	eq
 8001558:	68e5      	ldreq	r5, [r4, #12]
 800155a:	f104 041a 	add.w	r4, r4, #26
 800155e:	bf08      	it	eq
 8001560:	1aed      	subeq	r5, r5, r3
 8001562:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001566:	bf08      	it	eq
 8001568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800156c:	4293      	cmp	r3, r2
 800156e:	bfc4      	itt	gt
 8001570:	1a9b      	subgt	r3, r3, r2
 8001572:	18ed      	addgt	r5, r5, r3
 8001574:	42b5      	cmp	r5, r6
 8001576:	d11a      	bne.n	80015ae <_printf_common+0xd2>
 8001578:	2000      	movs	r0, #0
 800157a:	e008      	b.n	800158e <_printf_common+0xb2>
 800157c:	2301      	movs	r3, #1
 800157e:	4652      	mov	r2, sl
 8001580:	4649      	mov	r1, r9
 8001582:	4638      	mov	r0, r7
 8001584:	47c0      	blx	r8
 8001586:	3001      	adds	r0, #1
 8001588:	d103      	bne.n	8001592 <_printf_common+0xb6>
 800158a:	f04f 30ff 	mov.w	r0, #4294967295
 800158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001592:	3501      	adds	r5, #1
 8001594:	e7c1      	b.n	800151a <_printf_common+0x3e>
 8001596:	2030      	movs	r0, #48	; 0x30
 8001598:	18e1      	adds	r1, r4, r3
 800159a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80015a4:	4422      	add	r2, r4
 80015a6:	3302      	adds	r3, #2
 80015a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80015ac:	e7c2      	b.n	8001534 <_printf_common+0x58>
 80015ae:	2301      	movs	r3, #1
 80015b0:	4622      	mov	r2, r4
 80015b2:	4649      	mov	r1, r9
 80015b4:	4638      	mov	r0, r7
 80015b6:	47c0      	blx	r8
 80015b8:	3001      	adds	r0, #1
 80015ba:	d0e6      	beq.n	800158a <_printf_common+0xae>
 80015bc:	3601      	adds	r6, #1
 80015be:	e7d9      	b.n	8001574 <_printf_common+0x98>

080015c0 <_printf_i>:
 80015c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015c4:	7e0f      	ldrb	r7, [r1, #24]
 80015c6:	4691      	mov	r9, r2
 80015c8:	2f78      	cmp	r7, #120	; 0x78
 80015ca:	4680      	mov	r8, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	469a      	mov	sl, r3
 80015d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80015d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80015d6:	d807      	bhi.n	80015e8 <_printf_i+0x28>
 80015d8:	2f62      	cmp	r7, #98	; 0x62
 80015da:	d80a      	bhi.n	80015f2 <_printf_i+0x32>
 80015dc:	2f00      	cmp	r7, #0
 80015de:	f000 80d5 	beq.w	800178c <_printf_i+0x1cc>
 80015e2:	2f58      	cmp	r7, #88	; 0x58
 80015e4:	f000 80c1 	beq.w	800176a <_printf_i+0x1aa>
 80015e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80015f0:	e03a      	b.n	8001668 <_printf_i+0xa8>
 80015f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80015f6:	2b15      	cmp	r3, #21
 80015f8:	d8f6      	bhi.n	80015e8 <_printf_i+0x28>
 80015fa:	a101      	add	r1, pc, #4	; (adr r1, 8001600 <_printf_i+0x40>)
 80015fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001600:	08001659 	.word	0x08001659
 8001604:	0800166d 	.word	0x0800166d
 8001608:	080015e9 	.word	0x080015e9
 800160c:	080015e9 	.word	0x080015e9
 8001610:	080015e9 	.word	0x080015e9
 8001614:	080015e9 	.word	0x080015e9
 8001618:	0800166d 	.word	0x0800166d
 800161c:	080015e9 	.word	0x080015e9
 8001620:	080015e9 	.word	0x080015e9
 8001624:	080015e9 	.word	0x080015e9
 8001628:	080015e9 	.word	0x080015e9
 800162c:	08001773 	.word	0x08001773
 8001630:	08001699 	.word	0x08001699
 8001634:	0800172d 	.word	0x0800172d
 8001638:	080015e9 	.word	0x080015e9
 800163c:	080015e9 	.word	0x080015e9
 8001640:	08001795 	.word	0x08001795
 8001644:	080015e9 	.word	0x080015e9
 8001648:	08001699 	.word	0x08001699
 800164c:	080015e9 	.word	0x080015e9
 8001650:	080015e9 	.word	0x080015e9
 8001654:	08001735 	.word	0x08001735
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	1d1a      	adds	r2, r3, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	602a      	str	r2, [r5, #0]
 8001660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001668:	2301      	movs	r3, #1
 800166a:	e0a0      	b.n	80017ae <_printf_i+0x1ee>
 800166c:	6820      	ldr	r0, [r4, #0]
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	0607      	lsls	r7, r0, #24
 8001672:	f103 0104 	add.w	r1, r3, #4
 8001676:	6029      	str	r1, [r5, #0]
 8001678:	d501      	bpl.n	800167e <_printf_i+0xbe>
 800167a:	681e      	ldr	r6, [r3, #0]
 800167c:	e003      	b.n	8001686 <_printf_i+0xc6>
 800167e:	0646      	lsls	r6, r0, #25
 8001680:	d5fb      	bpl.n	800167a <_printf_i+0xba>
 8001682:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001686:	2e00      	cmp	r6, #0
 8001688:	da03      	bge.n	8001692 <_printf_i+0xd2>
 800168a:	232d      	movs	r3, #45	; 0x2d
 800168c:	4276      	negs	r6, r6
 800168e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001692:	230a      	movs	r3, #10
 8001694:	4859      	ldr	r0, [pc, #356]	; (80017fc <_printf_i+0x23c>)
 8001696:	e012      	b.n	80016be <_printf_i+0xfe>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	1d19      	adds	r1, r3, #4
 800169e:	6029      	str	r1, [r5, #0]
 80016a0:	0605      	lsls	r5, r0, #24
 80016a2:	d501      	bpl.n	80016a8 <_printf_i+0xe8>
 80016a4:	681e      	ldr	r6, [r3, #0]
 80016a6:	e002      	b.n	80016ae <_printf_i+0xee>
 80016a8:	0641      	lsls	r1, r0, #25
 80016aa:	d5fb      	bpl.n	80016a4 <_printf_i+0xe4>
 80016ac:	881e      	ldrh	r6, [r3, #0]
 80016ae:	2f6f      	cmp	r7, #111	; 0x6f
 80016b0:	bf0c      	ite	eq
 80016b2:	2308      	moveq	r3, #8
 80016b4:	230a      	movne	r3, #10
 80016b6:	4851      	ldr	r0, [pc, #324]	; (80017fc <_printf_i+0x23c>)
 80016b8:	2100      	movs	r1, #0
 80016ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016be:	6865      	ldr	r5, [r4, #4]
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	bfa8      	it	ge
 80016c4:	6821      	ldrge	r1, [r4, #0]
 80016c6:	60a5      	str	r5, [r4, #8]
 80016c8:	bfa4      	itt	ge
 80016ca:	f021 0104 	bicge.w	r1, r1, #4
 80016ce:	6021      	strge	r1, [r4, #0]
 80016d0:	b90e      	cbnz	r6, 80016d6 <_printf_i+0x116>
 80016d2:	2d00      	cmp	r5, #0
 80016d4:	d04b      	beq.n	800176e <_printf_i+0x1ae>
 80016d6:	4615      	mov	r5, r2
 80016d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80016dc:	fb03 6711 	mls	r7, r3, r1, r6
 80016e0:	5dc7      	ldrb	r7, [r0, r7]
 80016e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80016e6:	4637      	mov	r7, r6
 80016e8:	42bb      	cmp	r3, r7
 80016ea:	460e      	mov	r6, r1
 80016ec:	d9f4      	bls.n	80016d8 <_printf_i+0x118>
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d10b      	bne.n	800170a <_printf_i+0x14a>
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	07de      	lsls	r6, r3, #31
 80016f6:	d508      	bpl.n	800170a <_printf_i+0x14a>
 80016f8:	6923      	ldr	r3, [r4, #16]
 80016fa:	6861      	ldr	r1, [r4, #4]
 80016fc:	4299      	cmp	r1, r3
 80016fe:	bfde      	ittt	le
 8001700:	2330      	movle	r3, #48	; 0x30
 8001702:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001706:	f105 35ff 	addle.w	r5, r5, #4294967295
 800170a:	1b52      	subs	r2, r2, r5
 800170c:	6122      	str	r2, [r4, #16]
 800170e:	464b      	mov	r3, r9
 8001710:	4621      	mov	r1, r4
 8001712:	4640      	mov	r0, r8
 8001714:	f8cd a000 	str.w	sl, [sp]
 8001718:	aa03      	add	r2, sp, #12
 800171a:	f7ff fedf 	bl	80014dc <_printf_common>
 800171e:	3001      	adds	r0, #1
 8001720:	d14a      	bne.n	80017b8 <_printf_i+0x1f8>
 8001722:	f04f 30ff 	mov.w	r0, #4294967295
 8001726:	b004      	add	sp, #16
 8001728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	6023      	str	r3, [r4, #0]
 8001734:	2778      	movs	r7, #120	; 0x78
 8001736:	4832      	ldr	r0, [pc, #200]	; (8001800 <_printf_i+0x240>)
 8001738:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	6829      	ldr	r1, [r5, #0]
 8001740:	061f      	lsls	r7, r3, #24
 8001742:	f851 6b04 	ldr.w	r6, [r1], #4
 8001746:	d402      	bmi.n	800174e <_printf_i+0x18e>
 8001748:	065f      	lsls	r7, r3, #25
 800174a:	bf48      	it	mi
 800174c:	b2b6      	uxthmi	r6, r6
 800174e:	07df      	lsls	r7, r3, #31
 8001750:	bf48      	it	mi
 8001752:	f043 0320 	orrmi.w	r3, r3, #32
 8001756:	6029      	str	r1, [r5, #0]
 8001758:	bf48      	it	mi
 800175a:	6023      	strmi	r3, [r4, #0]
 800175c:	b91e      	cbnz	r6, 8001766 <_printf_i+0x1a6>
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	f023 0320 	bic.w	r3, r3, #32
 8001764:	6023      	str	r3, [r4, #0]
 8001766:	2310      	movs	r3, #16
 8001768:	e7a6      	b.n	80016b8 <_printf_i+0xf8>
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <_printf_i+0x23c>)
 800176c:	e7e4      	b.n	8001738 <_printf_i+0x178>
 800176e:	4615      	mov	r5, r2
 8001770:	e7bd      	b.n	80016ee <_printf_i+0x12e>
 8001772:	682b      	ldr	r3, [r5, #0]
 8001774:	6826      	ldr	r6, [r4, #0]
 8001776:	1d18      	adds	r0, r3, #4
 8001778:	6961      	ldr	r1, [r4, #20]
 800177a:	6028      	str	r0, [r5, #0]
 800177c:	0635      	lsls	r5, r6, #24
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	d501      	bpl.n	8001786 <_printf_i+0x1c6>
 8001782:	6019      	str	r1, [r3, #0]
 8001784:	e002      	b.n	800178c <_printf_i+0x1cc>
 8001786:	0670      	lsls	r0, r6, #25
 8001788:	d5fb      	bpl.n	8001782 <_printf_i+0x1c2>
 800178a:	8019      	strh	r1, [r3, #0]
 800178c:	2300      	movs	r3, #0
 800178e:	4615      	mov	r5, r2
 8001790:	6123      	str	r3, [r4, #16]
 8001792:	e7bc      	b.n	800170e <_printf_i+0x14e>
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	2100      	movs	r1, #0
 8001798:	1d1a      	adds	r2, r3, #4
 800179a:	602a      	str	r2, [r5, #0]
 800179c:	681d      	ldr	r5, [r3, #0]
 800179e:	6862      	ldr	r2, [r4, #4]
 80017a0:	4628      	mov	r0, r5
 80017a2:	f000 f909 	bl	80019b8 <memchr>
 80017a6:	b108      	cbz	r0, 80017ac <_printf_i+0x1ec>
 80017a8:	1b40      	subs	r0, r0, r5
 80017aa:	6060      	str	r0, [r4, #4]
 80017ac:	6863      	ldr	r3, [r4, #4]
 80017ae:	6123      	str	r3, [r4, #16]
 80017b0:	2300      	movs	r3, #0
 80017b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017b6:	e7aa      	b.n	800170e <_printf_i+0x14e>
 80017b8:	462a      	mov	r2, r5
 80017ba:	4649      	mov	r1, r9
 80017bc:	4640      	mov	r0, r8
 80017be:	6923      	ldr	r3, [r4, #16]
 80017c0:	47d0      	blx	sl
 80017c2:	3001      	adds	r0, #1
 80017c4:	d0ad      	beq.n	8001722 <_printf_i+0x162>
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	079b      	lsls	r3, r3, #30
 80017ca:	d413      	bmi.n	80017f4 <_printf_i+0x234>
 80017cc:	68e0      	ldr	r0, [r4, #12]
 80017ce:	9b03      	ldr	r3, [sp, #12]
 80017d0:	4298      	cmp	r0, r3
 80017d2:	bfb8      	it	lt
 80017d4:	4618      	movlt	r0, r3
 80017d6:	e7a6      	b.n	8001726 <_printf_i+0x166>
 80017d8:	2301      	movs	r3, #1
 80017da:	4632      	mov	r2, r6
 80017dc:	4649      	mov	r1, r9
 80017de:	4640      	mov	r0, r8
 80017e0:	47d0      	blx	sl
 80017e2:	3001      	adds	r0, #1
 80017e4:	d09d      	beq.n	8001722 <_printf_i+0x162>
 80017e6:	3501      	adds	r5, #1
 80017e8:	68e3      	ldr	r3, [r4, #12]
 80017ea:	9903      	ldr	r1, [sp, #12]
 80017ec:	1a5b      	subs	r3, r3, r1
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	dcf2      	bgt.n	80017d8 <_printf_i+0x218>
 80017f2:	e7eb      	b.n	80017cc <_printf_i+0x20c>
 80017f4:	2500      	movs	r5, #0
 80017f6:	f104 0619 	add.w	r6, r4, #25
 80017fa:	e7f5      	b.n	80017e8 <_printf_i+0x228>
 80017fc:	08001d08 	.word	0x08001d08
 8001800:	08001d19 	.word	0x08001d19

08001804 <__swbuf_r>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	460e      	mov	r6, r1
 8001808:	4614      	mov	r4, r2
 800180a:	4605      	mov	r5, r0
 800180c:	b118      	cbz	r0, 8001816 <__swbuf_r+0x12>
 800180e:	6a03      	ldr	r3, [r0, #32]
 8001810:	b90b      	cbnz	r3, 8001816 <__swbuf_r+0x12>
 8001812:	f7ff f9d1 	bl	8000bb8 <__sinit>
 8001816:	69a3      	ldr	r3, [r4, #24]
 8001818:	60a3      	str	r3, [r4, #8]
 800181a:	89a3      	ldrh	r3, [r4, #12]
 800181c:	071a      	lsls	r2, r3, #28
 800181e:	d525      	bpl.n	800186c <__swbuf_r+0x68>
 8001820:	6923      	ldr	r3, [r4, #16]
 8001822:	b31b      	cbz	r3, 800186c <__swbuf_r+0x68>
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	6922      	ldr	r2, [r4, #16]
 8001828:	b2f6      	uxtb	r6, r6
 800182a:	1a98      	subs	r0, r3, r2
 800182c:	6963      	ldr	r3, [r4, #20]
 800182e:	4637      	mov	r7, r6
 8001830:	4283      	cmp	r3, r0
 8001832:	dc04      	bgt.n	800183e <__swbuf_r+0x3a>
 8001834:	4621      	mov	r1, r4
 8001836:	4628      	mov	r0, r5
 8001838:	f7ff fcbe 	bl	80011b8 <_fflush_r>
 800183c:	b9e0      	cbnz	r0, 8001878 <__swbuf_r+0x74>
 800183e:	68a3      	ldr	r3, [r4, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60a3      	str	r3, [r4, #8]
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	6022      	str	r2, [r4, #0]
 800184a:	701e      	strb	r6, [r3, #0]
 800184c:	6962      	ldr	r2, [r4, #20]
 800184e:	1c43      	adds	r3, r0, #1
 8001850:	429a      	cmp	r2, r3
 8001852:	d004      	beq.n	800185e <__swbuf_r+0x5a>
 8001854:	89a3      	ldrh	r3, [r4, #12]
 8001856:	07db      	lsls	r3, r3, #31
 8001858:	d506      	bpl.n	8001868 <__swbuf_r+0x64>
 800185a:	2e0a      	cmp	r6, #10
 800185c:	d104      	bne.n	8001868 <__swbuf_r+0x64>
 800185e:	4621      	mov	r1, r4
 8001860:	4628      	mov	r0, r5
 8001862:	f7ff fca9 	bl	80011b8 <_fflush_r>
 8001866:	b938      	cbnz	r0, 8001878 <__swbuf_r+0x74>
 8001868:	4638      	mov	r0, r7
 800186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800186c:	4621      	mov	r1, r4
 800186e:	4628      	mov	r0, r5
 8001870:	f000 f806 	bl	8001880 <__swsetup_r>
 8001874:	2800      	cmp	r0, #0
 8001876:	d0d5      	beq.n	8001824 <__swbuf_r+0x20>
 8001878:	f04f 37ff 	mov.w	r7, #4294967295
 800187c:	e7f4      	b.n	8001868 <__swbuf_r+0x64>
	...

08001880 <__swsetup_r>:
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <__swsetup_r+0xac>)
 8001884:	4605      	mov	r5, r0
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	460c      	mov	r4, r1
 800188a:	b118      	cbz	r0, 8001894 <__swsetup_r+0x14>
 800188c:	6a03      	ldr	r3, [r0, #32]
 800188e:	b90b      	cbnz	r3, 8001894 <__swsetup_r+0x14>
 8001890:	f7ff f992 	bl	8000bb8 <__sinit>
 8001894:	89a3      	ldrh	r3, [r4, #12]
 8001896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800189a:	0718      	lsls	r0, r3, #28
 800189c:	d422      	bmi.n	80018e4 <__swsetup_r+0x64>
 800189e:	06d9      	lsls	r1, r3, #27
 80018a0:	d407      	bmi.n	80018b2 <__swsetup_r+0x32>
 80018a2:	2309      	movs	r3, #9
 80018a4:	602b      	str	r3, [r5, #0]
 80018a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018aa:	f04f 30ff 	mov.w	r0, #4294967295
 80018ae:	81a3      	strh	r3, [r4, #12]
 80018b0:	e034      	b.n	800191c <__swsetup_r+0x9c>
 80018b2:	0758      	lsls	r0, r3, #29
 80018b4:	d512      	bpl.n	80018dc <__swsetup_r+0x5c>
 80018b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018b8:	b141      	cbz	r1, 80018cc <__swsetup_r+0x4c>
 80018ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018be:	4299      	cmp	r1, r3
 80018c0:	d002      	beq.n	80018c8 <__swsetup_r+0x48>
 80018c2:	4628      	mov	r0, r5
 80018c4:	f7ff fafa 	bl	8000ebc <_free_r>
 80018c8:	2300      	movs	r3, #0
 80018ca:	6363      	str	r3, [r4, #52]	; 0x34
 80018cc:	89a3      	ldrh	r3, [r4, #12]
 80018ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80018d2:	81a3      	strh	r3, [r4, #12]
 80018d4:	2300      	movs	r3, #0
 80018d6:	6063      	str	r3, [r4, #4]
 80018d8:	6923      	ldr	r3, [r4, #16]
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	89a3      	ldrh	r3, [r4, #12]
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	81a3      	strh	r3, [r4, #12]
 80018e4:	6923      	ldr	r3, [r4, #16]
 80018e6:	b94b      	cbnz	r3, 80018fc <__swsetup_r+0x7c>
 80018e8:	89a3      	ldrh	r3, [r4, #12]
 80018ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80018ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f2:	d003      	beq.n	80018fc <__swsetup_r+0x7c>
 80018f4:	4621      	mov	r1, r4
 80018f6:	4628      	mov	r0, r5
 80018f8:	f000 f891 	bl	8001a1e <__smakebuf_r>
 80018fc:	89a0      	ldrh	r0, [r4, #12]
 80018fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001902:	f010 0301 	ands.w	r3, r0, #1
 8001906:	d00a      	beq.n	800191e <__swsetup_r+0x9e>
 8001908:	2300      	movs	r3, #0
 800190a:	60a3      	str	r3, [r4, #8]
 800190c:	6963      	ldr	r3, [r4, #20]
 800190e:	425b      	negs	r3, r3
 8001910:	61a3      	str	r3, [r4, #24]
 8001912:	6923      	ldr	r3, [r4, #16]
 8001914:	b943      	cbnz	r3, 8001928 <__swsetup_r+0xa8>
 8001916:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800191a:	d1c4      	bne.n	80018a6 <__swsetup_r+0x26>
 800191c:	bd38      	pop	{r3, r4, r5, pc}
 800191e:	0781      	lsls	r1, r0, #30
 8001920:	bf58      	it	pl
 8001922:	6963      	ldrpl	r3, [r4, #20]
 8001924:	60a3      	str	r3, [r4, #8]
 8001926:	e7f4      	b.n	8001912 <__swsetup_r+0x92>
 8001928:	2000      	movs	r0, #0
 800192a:	e7f7      	b.n	800191c <__swsetup_r+0x9c>
 800192c:	20000058 	.word	0x20000058

08001930 <_raise_r>:
 8001930:	291f      	cmp	r1, #31
 8001932:	b538      	push	{r3, r4, r5, lr}
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	d904      	bls.n	8001944 <_raise_r+0x14>
 800193a:	2316      	movs	r3, #22
 800193c:	6003      	str	r3, [r0, #0]
 800193e:	f04f 30ff 	mov.w	r0, #4294967295
 8001942:	bd38      	pop	{r3, r4, r5, pc}
 8001944:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001946:	b112      	cbz	r2, 800194e <_raise_r+0x1e>
 8001948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800194c:	b94b      	cbnz	r3, 8001962 <_raise_r+0x32>
 800194e:	4620      	mov	r0, r4
 8001950:	f000 f830 	bl	80019b4 <_getpid_r>
 8001954:	462a      	mov	r2, r5
 8001956:	4601      	mov	r1, r0
 8001958:	4620      	mov	r0, r4
 800195a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800195e:	f000 b817 	b.w	8001990 <_kill_r>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d00a      	beq.n	800197c <_raise_r+0x4c>
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	d103      	bne.n	8001972 <_raise_r+0x42>
 800196a:	2316      	movs	r3, #22
 800196c:	6003      	str	r3, [r0, #0]
 800196e:	2001      	movs	r0, #1
 8001970:	e7e7      	b.n	8001942 <_raise_r+0x12>
 8001972:	2400      	movs	r4, #0
 8001974:	4628      	mov	r0, r5
 8001976:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800197a:	4798      	blx	r3
 800197c:	2000      	movs	r0, #0
 800197e:	e7e0      	b.n	8001942 <_raise_r+0x12>

08001980 <raise>:
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <raise+0xc>)
 8001982:	4601      	mov	r1, r0
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	f7ff bfd3 	b.w	8001930 <_raise_r>
 800198a:	bf00      	nop
 800198c:	20000058 	.word	0x20000058

08001990 <_kill_r>:
 8001990:	b538      	push	{r3, r4, r5, lr}
 8001992:	2300      	movs	r3, #0
 8001994:	4d06      	ldr	r5, [pc, #24]	; (80019b0 <_kill_r+0x20>)
 8001996:	4604      	mov	r4, r0
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	602b      	str	r3, [r5, #0]
 800199e:	f7fe fdbe 	bl	800051e <_kill>
 80019a2:	1c43      	adds	r3, r0, #1
 80019a4:	d102      	bne.n	80019ac <_kill_r+0x1c>
 80019a6:	682b      	ldr	r3, [r5, #0]
 80019a8:	b103      	cbz	r3, 80019ac <_kill_r+0x1c>
 80019aa:	6023      	str	r3, [r4, #0]
 80019ac:	bd38      	pop	{r3, r4, r5, pc}
 80019ae:	bf00      	nop
 80019b0:	200001bc 	.word	0x200001bc

080019b4 <_getpid_r>:
 80019b4:	f7fe bdac 	b.w	8000510 <_getpid>

080019b8 <memchr>:
 80019b8:	4603      	mov	r3, r0
 80019ba:	b510      	push	{r4, lr}
 80019bc:	b2c9      	uxtb	r1, r1
 80019be:	4402      	add	r2, r0
 80019c0:	4293      	cmp	r3, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	d101      	bne.n	80019ca <memchr+0x12>
 80019c6:	2000      	movs	r0, #0
 80019c8:	e003      	b.n	80019d2 <memchr+0x1a>
 80019ca:	7804      	ldrb	r4, [r0, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	428c      	cmp	r4, r1
 80019d0:	d1f6      	bne.n	80019c0 <memchr+0x8>
 80019d2:	bd10      	pop	{r4, pc}

080019d4 <__swhatbuf_r>:
 80019d4:	b570      	push	{r4, r5, r6, lr}
 80019d6:	460c      	mov	r4, r1
 80019d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019dc:	4615      	mov	r5, r2
 80019de:	2900      	cmp	r1, #0
 80019e0:	461e      	mov	r6, r3
 80019e2:	b096      	sub	sp, #88	; 0x58
 80019e4:	da0c      	bge.n	8001a00 <__swhatbuf_r+0x2c>
 80019e6:	89a3      	ldrh	r3, [r4, #12]
 80019e8:	2100      	movs	r1, #0
 80019ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019ee:	bf0c      	ite	eq
 80019f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80019f4:	2340      	movne	r3, #64	; 0x40
 80019f6:	2000      	movs	r0, #0
 80019f8:	6031      	str	r1, [r6, #0]
 80019fa:	602b      	str	r3, [r5, #0]
 80019fc:	b016      	add	sp, #88	; 0x58
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	466a      	mov	r2, sp
 8001a02:	f000 f849 	bl	8001a98 <_fstat_r>
 8001a06:	2800      	cmp	r0, #0
 8001a08:	dbed      	blt.n	80019e6 <__swhatbuf_r+0x12>
 8001a0a:	9901      	ldr	r1, [sp, #4]
 8001a0c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001a10:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001a14:	4259      	negs	r1, r3
 8001a16:	4159      	adcs	r1, r3
 8001a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1c:	e7eb      	b.n	80019f6 <__swhatbuf_r+0x22>

08001a1e <__smakebuf_r>:
 8001a1e:	898b      	ldrh	r3, [r1, #12]
 8001a20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a22:	079d      	lsls	r5, r3, #30
 8001a24:	4606      	mov	r6, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	d507      	bpl.n	8001a3a <__smakebuf_r+0x1c>
 8001a2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a2e:	6023      	str	r3, [r4, #0]
 8001a30:	6123      	str	r3, [r4, #16]
 8001a32:	2301      	movs	r3, #1
 8001a34:	6163      	str	r3, [r4, #20]
 8001a36:	b002      	add	sp, #8
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
 8001a3a:	466a      	mov	r2, sp
 8001a3c:	ab01      	add	r3, sp, #4
 8001a3e:	f7ff ffc9 	bl	80019d4 <__swhatbuf_r>
 8001a42:	9900      	ldr	r1, [sp, #0]
 8001a44:	4605      	mov	r5, r0
 8001a46:	4630      	mov	r0, r6
 8001a48:	f7ff faa8 	bl	8000f9c <_malloc_r>
 8001a4c:	b948      	cbnz	r0, 8001a62 <__smakebuf_r+0x44>
 8001a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a52:	059a      	lsls	r2, r3, #22
 8001a54:	d4ef      	bmi.n	8001a36 <__smakebuf_r+0x18>
 8001a56:	f023 0303 	bic.w	r3, r3, #3
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	81a3      	strh	r3, [r4, #12]
 8001a60:	e7e3      	b.n	8001a2a <__smakebuf_r+0xc>
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	6020      	str	r0, [r4, #0]
 8001a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6a:	81a3      	strh	r3, [r4, #12]
 8001a6c:	9b00      	ldr	r3, [sp, #0]
 8001a6e:	6120      	str	r0, [r4, #16]
 8001a70:	6163      	str	r3, [r4, #20]
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	b15b      	cbz	r3, 8001a8e <__smakebuf_r+0x70>
 8001a76:	4630      	mov	r0, r6
 8001a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a7c:	f000 f81e 	bl	8001abc <_isatty_r>
 8001a80:	b128      	cbz	r0, 8001a8e <__smakebuf_r+0x70>
 8001a82:	89a3      	ldrh	r3, [r4, #12]
 8001a84:	f023 0303 	bic.w	r3, r3, #3
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	81a3      	strh	r3, [r4, #12]
 8001a8e:	89a3      	ldrh	r3, [r4, #12]
 8001a90:	431d      	orrs	r5, r3
 8001a92:	81a5      	strh	r5, [r4, #12]
 8001a94:	e7cf      	b.n	8001a36 <__smakebuf_r+0x18>
	...

08001a98 <_fstat_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	4d06      	ldr	r5, [pc, #24]	; (8001ab8 <_fstat_r+0x20>)
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	602b      	str	r3, [r5, #0]
 8001aa6:	f7fe fd98 	bl	80005da <_fstat>
 8001aaa:	1c43      	adds	r3, r0, #1
 8001aac:	d102      	bne.n	8001ab4 <_fstat_r+0x1c>
 8001aae:	682b      	ldr	r3, [r5, #0]
 8001ab0:	b103      	cbz	r3, 8001ab4 <_fstat_r+0x1c>
 8001ab2:	6023      	str	r3, [r4, #0]
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200001bc 	.word	0x200001bc

08001abc <_isatty_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	2300      	movs	r3, #0
 8001ac0:	4d05      	ldr	r5, [pc, #20]	; (8001ad8 <_isatty_r+0x1c>)
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	602b      	str	r3, [r5, #0]
 8001ac8:	f7fe fd96 	bl	80005f8 <_isatty>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d102      	bne.n	8001ad6 <_isatty_r+0x1a>
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	b103      	cbz	r3, 8001ad6 <_isatty_r+0x1a>
 8001ad4:	6023      	str	r3, [r4, #0]
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	200001bc 	.word	0x200001bc

08001adc <_init>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	bf00      	nop
 8001ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae2:	bc08      	pop	{r3}
 8001ae4:	469e      	mov	lr, r3
 8001ae6:	4770      	bx	lr

08001ae8 <_fini>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	bf00      	nop
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr
